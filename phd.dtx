% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
phd --- a package to shorten preambles
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
This file provides a phd for defining a class.
%</readme>
%<*readmemd>
###The `phd` LaTeX2e package

The `phd` latex package and the class with the same name provide
convenient methods to create new styles for books, reports
and articles. It also loads the most commonly used packages 
and resolves conflicts.

This work consists of the file  `phd.dtx`,
and the derived files   `phd.ins`,  `phd.pdf`, and `phd.sty`.

###Installation

run
          
           pdflatex phd.dtx
           makeindex -s gind.ist -g phd 

If you have any difficulties with the package come and join us at
http://tex.stackexchange.com and post a new question or
add a comment at http://tex.stackexchange.com/a/45023/963.
or send me a message at  yannislaz at gmail.com

### Documentation

The package was written using the `doc` and `docscript` packages,
so that it is self documented in a literary programming style. 
The .pdf is a fat document, providing over fifty book styles (the
equivalent of classes) plus there is a lot of write-up on the inner
workings of TeX and LaTeX2e. However, you don't need to know much
to use it.

      \usepackage{phd}
      \input{style13}

All choices, are made via an extended key-value interface. 
Although not a compliment, it resembles CSS and the keys are a bit verbose but
attributes are easy to change and have a consistent and easy to remember interface.

To set or add a key we only use one command:

      \cxset{chapter name font-size: Huge,
             chapter number font-size: HUGE} 

### Future Development

This is still an experimental version, but I will retain the
interface in future releases. There is a large amount of
work still to be carried out to improve the template styles
provided, to test it more thoroughly and to add a number of
improvements in the special designs.

__The package as it stands is not production stable.__ 


%</readmemd>
%
%<*TODO>
add tcolorbox support fix pgf codeexample has issues with integration
too 
%</TODO>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
phd --- A package to beautify documents.
E-mail: yannislaz@gmail.com
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble

%\BaseDirectory{C:/users/admin/my documents/github/phd}
%\usedir{MWE}
\generate{\file{\jobname.sty}{\from{\jobname.dtx}{package}}}
\generate{
  \file{MWE-02.tex}{\from{\jobname.dtx}{MWE-02}}
  \file{MWE-03.tex}{\from{\jobname.dtx}{MWE-03}}
}
\generate{
  \file{test-tufte.tex}{\from{\jobname.dtx}{test-tufte}}
  \file{test-memoir.tex}{\from{\jobname.dtx}{test-memoir}}
  \file{test-scrartcl.tex}{\from{\jobname.dtx}{test-scrartcl}}
  \file{test-algorithms.tex}{\from{\jobname.dtx}{test-algorithms}}
  \file{test-hyphenation.tex}{\from{\jobname.dtx}{test-hyphenation}}
  \file{settings.tex}{\from{\jobname.dtx}{settings}}
  \file{test-spacing.tex}{\from{\jobname.dtx}{test-spacing}}
 }
%\nopreamble\nopostamble
%\generate{
%  \file{hhiero.lua}{\from{\jobname.dtx}{hhiero}}
%}
%</install>

%<install>\endbatchfile
%<*internal>
%\usedir{tex/latex/phd}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble

\generate{
	\file{README.txt}{\from{\jobname.dtx}{readme}}
  }

\generate{
  \file{README.md}{\from{\jobname.dtx}{readmemd}}
}
\generate{
  \file{TODO.tex}{\from{\jobname.dtx}{TODO}}
}
\generate{
  \file{MWE-01.tex}{\from{\jobname.dtx}{MWE-01}}
}

\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
 
\immediate\write18{makeindex -s gglo.ist -g phd.gls phd.glo}  %needs checking from trivfloat
\immediate\write18{makeindex -s gind.ist -g phd.ind phd.idx} %needs checking from Josephâ€™s trivfloat
%</internal>
%<*driver>
\listfiles
\documentclass[oneside,11pt,a4paper]{ltxdoc}
\makeatletter
\gdef\@notprerr{text command only in preamble} %supress error for commands only in preamble
%\def\@eha{}
\makeatother
%
\usepackage[bottom=2cm]{geometry}
\savegeometry{std}
% Font management is perhaps the most complicated
% part for using the three engines we are supporting
% 
% \usepackage[style=mla]{biblatex}
\usepackage{phd}
\usepackage{Acorn, AnnSton, ArtNouv, ArtNouvc, Carrickc, Eichenla, Eileen, EileenBl, Elzevier, GotIn, GoudyIn, Kinigcap, Konanur, Kramer, MorrisIn, Nouveaud, Romantik, Rothdn, Royal, Sanremo, Starburst, Typocaps, Zallman}
\RequirePackage{morewrites}
\ifluatex
  \newfontfamily\hiero{NotoSansEgyptianHieroglyphs-Regular.ttf}
  \newfontfamily\meitei{Noto Sans Meetei Mayek}
  \newfontfamily\yi{Microsoft Yi Baiti}
  \newfontfamily\sundanese{SundaneseUnicode-1.0.5.ttf}
  \newfontfamily\tailue{NotoSansNewTaiLue-Regular.ttf}
  \newfontfamily\myanmar{Padauk}
  \newfontfamily\hebrew{Miriam}
  \newfontfamily\arabian
    [Script=Arabic,        % to get correct arabic shaping
     Scale=1.2]            % make the arabic font bigger, a matter of taste
    {Scheherazade}         % whatever Arabic font you like
  \newcommand{\textarabic}[1] % Arabic inside LTR
           {\bgroup\luatextextdir TRT\arabian #1\egroup}
  \newcommand{\narabic}         [1] % for digits inside Arabic text
           {\bgroup\luatextextdir TLT #1\egroup}
  \newcommand{\afootnote} [1] % Arabic footnotes
           {\footnote{\textarabic{#1}}}
  \newenvironment{Arabic}     % Arabic paragraph
           {\luatextextdir TRT\luatexpardir TRT\arabicfont}{}
  \newfontfamily\arabicfont[Script=Arabic]{Amiri}
  \newfontfamily\cherokee{Digohweli_1.ttf}%
  \newfontfamily\telugufam{code2000.ttf}
 
  \newfontfamily\gujarati[Scale=1.0]{code2000.ttf}
  \newfontfamily\bengal[Script=Bengali,Scale=1]{Shonar Bangla}
  \newfontfamily\russianfonttt{DejaVu Sans Mono}
  \newfontfamily\russianfont{Arial}
  \newfontfamily\armenianfont[Script=Armenian,Scale=MatchLowercase]{FreeSans}
  %%\newfontfamily\titus[Scale=1.05]{TITUSCBZ.ttf}
  %\newfontfamily\noto{NotoSerif-Regular.ttf}
  \newfontfamily\brahmi{Noto Sans Brahmi}
  %\newfontfamily\arial{Arial Unicode MS}
  \newfontfamily\pan{code2000.ttf}
  \let\cjk\pan
  \let\mongolian\pan
  \newfontfamily\aegean{Aegean.ttf}
   % Thai font
  \newfontfamily\thai[Scale=1.0,Script=Thai]{IrisUPC}
  % balinese
  \newfontfamily\balinese{Aksara Bali}
  \let\balinese\pan
  % lao
  \newfontfamily\lao[Scale=1.1]{code2000.ttf}
  \let\lao\pan
  \let\indicative\pan
  \def\defaulttext{\arial }
  \linespread{1.05}
  \frenchspacing
\fi
\ifxetex
\newfontfamily\arabian
    [Script=Arabic,        % to get correct arabic shaping
     Scale=1.2]            % make the arabic font bigger, a matter of taste
    {Scheherazade}         % whatever Arabic font you like
\newcommand{\textarabic}[1] % Arabic inside LTR
           {\bgroup\luatextextdir TRT\arabian #1\egroup}
\newcommand{\narabic}         [1] % for digits inside Arabic text
           {\bgroup\luatextextdir TLT #1\egroup}
\newcommand{\afootnote} [1] % Arabic footnotes
           {\footnote{\textarabic{#1}}}
\newenvironment{Arabic}     % Arabic paragraph
           {\luatextextdir TRT\luatexpardir TRT\arabicfont}{}
\newfontfamily\arabicfont[Script=Arabic]{Amiri}
  \newfontfamily%
  \arabicfonttt[Script=Arabic,Scale=.75]{DejaVu   Sans Mono}
  \newfontfamily\telugufam{code2000.ttf}
  \newfontfamily\gujarati[Scale=1.0]{code2000.ttf}
  \newfontfamily\bengal[Script=Bengali,Scale=1]{Shonar Bangla}
  \newfontfamily\russianfonttt{DejaVu Sans Mono}
  \newfontfamily%
    \russianfont{Arial}
  \newfontfamily%
    \armenianfont[Script=Armenian,Scale=MatchLowercase]
{FreeSans}
  \newfontfamily\titus[Scale=1.05]{TITUSCBZ.ttf}

  \newfontfamily\noto{NotoSerif-Regular.ttf}
  \newfontfamily\brahmi{Noto Sans Brahmi}
  \newfontfamily\arial{Arial Unicode MS}
  \newfontfamily\pan{code2000.ttf}
  \let\mongolian\pan
  %\newfontfamily\aegean{Aegean.ttf}
   % Thai font
  \newfontfamily\thai[Scale=1.0,Script=Thai]{IrisUPC}
  % balinese
  \newfontfamily\balinese{Aksara Bali}
  \let\balinese\pan
  % lao
  \newfontfamily\lao[Scale=1.1]{code2000.ttf}
  \let\lao\pan
  \let\indicative\pan
  \def\defaulttext{\arial }
  \linespread{1.05}
  \frenchspacing
\fi

\setcounter{secnumdepth}{6}

\sethyperref


%\input{defaultstyle}

%\usepackage[verbose]{backref}  not eith biblatex
%\backrefsetup{verbose=false}
% gives error
%
%% PACKAGES AFTER HYPERREF
%\usepackage{arydshln}
%\usepackage{cleveref}
\usepackage{expl3}
\usepackage{xparse}
%\usepackage{pagenote}
%\usepackage{pkgindoc}
%xfrac loads xtemplate?
\usepackage{subcaption}
\usepackage{calligra} 
%\usedictionary{pages}
%Fix overfful hboxes automatically
\tolerance=2000
\emergencystretch=10pt
\makepagenote %????
%\EnableCrossrefs
% One of the two commands below
%\CodelineIndex

\PageIndex
\RecordChanges
\usepackage{makeidx}
\makeindex

\DeclareFloatingEnvironment[fileext=plate,
                                             listname=List of Plates,
                                             name=Plate,
                                             placement=htbp,
                                             within=none]{plate}
                                             
\DeclareFloatingEnvironment[fileext=painting,
                                             listname=Paintings,
                                             name=Painting,
                                             placement=htbp,
                                             within=none]{painting}                                             
            

% Try getting errors
%\usepackage{opcit}  
%\let\citep\cite
%\let\citet\cite
%\usepackage{glossaries} conflict with acronym
%\makeglossaries %experimental
\makeatletter\@debugfalse\makeatother
%\let\oldnobreakspace\nobreakspace
%\usepackage{ctib}
%\let\nobreakspace\oldnobreakspace
\newfontfamily{\codetwothousand}{code2000.ttf}
  \newfontfamily{\codetwothousandone}{code2001.ttf}
  \newfontfamily{\symbola}{symbola.ttf}
\begin{document}
\mainmatter
\cxset{blank page text=}

\DocInput{\jobname.dtx}
\raggedright
%\input{./styles/style87b-doc}
%


\def\programming{%
  \part{PROGRAMMING}
  \input{./sections/macros}%
  \input{./sections/grouping}%
  \input{./sections/iteration}%
  \input{./sections/expandafter}
  \input{./sections/futurelet}
  \input{./sections/colors}
  \input{./sections/classes}
  \input{./sections/dates}
  \input{./sections/keyvalues}%
 }
%
\def\fontsandsymbols{%
   \part{FONTS}
   \input{./sections/unicode}
   \input{./sections/fonts}
   \input{./sections/symbols}
   \input{./sections/characters}
 }   
%
%

\def\mathdocs{
\part{MATHEMATICS}
\input{./sections/maths-01}
 \input{./sections/pericula}
}
  
\def\bibandindex{%
  \part{BIBLIOGRAPHIES, INDICES and GLOSSARIES}
  \input{./sections/bibliographies}
  \input{./sections/indices}
 }  
 


\def\ttreport{
	\input{./mep/claim}
	\input{./mep/dewa}
	\input{./mep/busbar}
	\input{./mep/ahu}
	\input{./mep/disruption}
	\input{./mep/RFI-mechanical}
	\input{./mep/RFI-electrical}
	\input{./mep/provisional-sums}
	\normalsize
}



\def\latexiiidocs{
    \input{./sections/io}
    \input{./sections/l3files}
	\input{./sections/l3macros}
	\input{./sections/latex3-basic}
	\input{./sections/l3expansion}
	\input{./sections/l3quarks}
	\input{./sections/l3keys}
	\input{./sections/l3error}
	\input{./sections/l3counters}
	\input{./sections/l3xtemplate}
	\input{./sections/l3seq}
	\input{./sections/l3token}
	\input{./sections/l3tlists}
	\input{./sections/l3clists}
}


\def\luadocs{%
  \part{LuaTeX}
  \parindent=1em
  \input{./sections/i18n}
  \input{./sections/luatex}
  \input{./lua/lpeg} 
  \input{./lua/lua-tables}
  \input{./lua/metatables} 
  \input{./lua/luatex-fonts}
  \input{./sections/solar}
  \input{./lua/variadic}
  \input{./lua/strings}    
  \input{./lua/pattern-matching} 
  \input{./lua/modules}
  \input{lua/lua-objects}
  \input{./lua/nodes} 
  \input{./lua/luaio}
}


\def\kernel{%
  \part{THE LaTeX2e KERNEL}
     \input{./sections/book.cls.tex}
     \input{./sections/latexkernel}
     \input{./sections/ltfloat}
     \input{./sections/kernel-ltoutput}
     \input{./sections/kernel-N-ltlength}
%  \input{./sections/kernel-h-ltpar}
     \input{./sections/kernel-ltspace}
     \input{./sections/kernel-ltxref}
     \input{./sections/kernel-lterror}
     \input{./sections/kernel-ltdefns.tex}
     \input{./sections/kernel-ltbibl}
     \input{./sections/kernel-ltsect}
  ^^A\input{./sections/kernel-ltlists}
}


 %\ttreport
\def\textdocs{
  \input{./sections/paragraphs}
  \input{./sections/characters}
  \input{./sections/acronyms}
  \input{./sections/hyperlinks}
   \input{./sections/marginpar}
   \input{./sections/quotations}
   \input{./sections/quotationsandotherintrusions}
    \input{./sections/dropcaps}
%\input{./sections/verse}
  \input{./sections/docmacros}
  \input{./sections/lists}
   \input{./sections/tables}
   \input{./sections/chemistry}
  \input{./sections/epigraphschapter}
}  
 


\def\phddoc{%
   \input{./sections/introduction}
   \input{./sections/chapterdesign}
    \input{./sections/lowerlevelheadings}
   \input{./styles/style87}
   \cxset{style87} 
    \cxset{section align=left}
    \cxset{section font-weight=bold}
    \cxset{section font-family=sffamily} 
}

\cxset{chapter numbering=arabic}

\def\graphicsdocs{%
  \part{GRAPHICS}
  \input{./sections/graphics}
  \input{./sections/wrapfig-02}
  \input{./sections/subfigure}
  \input{./sections/long-figures}
  \input{./sections/sideways}
  \input{./sections/twowomenreverse}
  \input{./sections/twowomen}
  \input{./sections/kroll}
  \input{./sections/bache}
  \input{./sections/elgreco.tex}
  \input{./sections/albumpage}
  \input{./sections/albumpage-vertical-image}
  \restoregeometry
  \input{./sections/captions}
  \input{./sections/captionsandothers}
  \pagestyle{headings}
 
}

 \def\docboxing{%
    \part{BASIC TeX}
    %\input{./sections/characters}
    \input{./sections/boxesandglue}
    \input{./sections/rulesandleaders}
 }


\def\visualizations{
  \part{VISUALIZATIONS AND PLOTTING}
   \input{./sections/pictureenvironment}
   \input{./sections/tikz}
  \input{./sections/charting01}
}

 
 \def\languages{%
    \part{SCRIPTS AND LANGUAGES}
    \input{./sections/languages}
    \input{./languages/ancient-and-historic-scripts}
    \input{south-asian-scripts}
    \input{./languages/middle-eastern-scripts}
    \input{./languages/south-east-asian-scripts}
    \input{./languages/east-asian-scripts}
    \input{./languages/modern-scripts}
    \input{./languages/greek}
 }

\makeatletter
\mainmatter
\newcommand{\normalencoding}{\fontencoding{OT1}}
\newcommand\ttverb[1]{\texttt{\string#1}}
\newfontfamily{\tiresias}{Tiresias PCfont}
\input{./styles/style87}
\input{./sections/more-on-boxes}


\cxset{section align=left}
\cxset{section font-weight=bold}
\cxset{section font-family=sffamily}
\cxset{subsection beforeskip=10pt} 
\cxset{subsection afterskip=10pt,
       subsection font-weight=bfseries,
       subsection font-family=tiresias,
       subsection font-size=Large,
       subsection font-shape=upshape,
       subsection align=flushleft,%don't say left
       subsection color=spot!50,
       subsection indent=0pt,
       %subsection afterindent=false,
       subsection numbering prefix=\thesection.,
       subsubsection indent=0pt,
       section font-family=tiresias,
       subsection font-family=tiresias,
       subsubsection font-family=tiresias,
       subsubsection indent=0pt,
       subsubsection font-size=large,
       chapter spaceout=soul,
       }
%  \larger
% \phddoc
%  \textdocs
%%
%  \fontsandsymbols
%%
%%  
% \mathdocs 
% \latexiiidocs
%%   
% \bibandindex 
%% 
% \programming

 \luadocs 
% 
% \end{document}
%%
% \graphicsdocs
% \docboxing
% \visualizations
%%
% \languages 
%% % programming source2e
% \kernel 
% \bibliography{phd} 
%% %
 \PrintIndex

%\debugchapter
 \end{document}
 %
% \input{./sections/OTR}
% 
%</driver>
% \fi
%  
%  \CheckSum{0}
%  \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \changes{1.0}{2013/01/26}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
% \GetFileInfo{phd.dtx}
% 
%  \def\fileversion{v1.0}          
%  \def\filedate{2012/03/06}
% \title{The \textsf{phd} package.
% \thanks{This
%        file (\texttt{phd.dtx}) has version number \fileversion, last revised
%        \filedate.}
% }
% \author{Dr. Yiannis Lazarides \\ \url{yannislaz@gmail.com}}
% \date{\filedate}
%
%
% 
% ^^A\maketitle
% 
% ^^A\frontmatter
%  ^^A\coverpage{./images/hine02.jpg}{Book Design }{Camel Press}
%  ^^A\newpage
% ^^A\secondpage
% ^^A\pagestyle{empty}
%
%
% 
% \newif\ifmulticols
% \IfFileExists{multicol.sty}{\multicolstrue}{}
%
%
% {\parskip 0pt                ^^A We have to reset \parskip
%  
% 
%
% \gdef\dotsep{10000}          ^^A (bug in \LaTeX?)
% \makeatletter
%  \tableofcontents
%   ^^A\listoftables
%  ^^A\listoffigures
% }

% ^^A\pagenumbering{empty}
% \mainmatter
% \pagestyle{headings}
% \raggedbottom
%  
%  \def\partname{Part}
%  \let\sidenote\footnote
%  \let\oldinput\input
%  
%  ^^A\def\input#1{\MakePercentComment \oldinput{#1}\MakePercentIgnore}
%  \makeatletter \@debugfalse\makeatother
%  
% 
% ^^A\input{./sections/pgfmanual-en-pgfkeys}
% ^^A\input{./sections/tcolorbox}
% ^^A\input{./sections/chapterdesign}
% ^^A\input{./sections/futurelet}
% ^^A\input{./sections/iteration}
% ^^A\input{./sections/languages}

% ^^A\input{./sections/floats}
% ^^A \input{./sections/book-design}
%


%  ^^A \input{./sections/pages}  messes layout
%  ^^A \input{./sections/floats}
%   ^^A\input{./sections/headersandfooters01}

%   ^^A\input{./sections/generalsettings}

% 

%  \OnlyDescription
%
%  \StopEventually{}
%<*package>
% \CodelineNumbered
% \pagestyle{headings}
% \cxset{style87}
%
% \part{IMPLEMENTATION}
% 
% \chapter{Implementation Strategy}
%
% The implementation is divided into parts. Perhaps cutting,
% these parts into smaller packages might have been a better
% choice, but as the aim of the package is to minimize
% the loading of packages and let |phd| to handle
% this, it made more sense to me, anyway to keep everything
% together.
% 	
%
% \begin{description}
%
%  \item[The Package Manager] This section is responsible 
%       for pre-loading  packages, resolving conflicts and 
%       providing a interfacing commands.
%
%  \item[The Sectioning Layouts Manager] This section manages 
%       the design of complex layouts for sectioning commands.
%
%  \item [The Image Page Manager] This section manages the design of 
%       pages that consist primarily of images and complex
%		page layouts.
%
%  \item[Common Macros] We provide a number of predefined commands
%		for macros that us and other people found useful.
%
%  \item[MWE] The package generates a large number
%		of Minimum Working Examples that we use for testing. 
%		Most of them can also used as examples for training 
%		or self-study.
%
% \end{description}
%
% \section{The Package Manager}
%
% The basic requirement for the Package Manager is to load
% an adequate number of packages to enable the typesetting
% of a diverse number of large documents without requiring
% additional packages to be loaded by typical groups of
% authors. This has its advantages, but of course it does 
% slow things down. A long term objective is to select
% packages depending as an option on the type of document
% being prepared.
%
% \section{Preliminaries}
%
%    Standard file identification. We first announce the package 
%	 and require that it be used with \LaTeX2e. 
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1994/12/01]%
\ProvidesPackage{phd}[2015/1/13 v1.0 less preamble (YL)]%
\let\ltxtoday\today
%    \end{macrocode}
%
% Load the package \pkgname{fixltx2e} to update \LaTeX2e for various fixes. The package fixes a number things in the LaTeX2e kernel. Due to LaTeX's stability policy, these corrections have not been incorporated into the LaTeX2e kernel, but this package does things most people would agree are bugfixes. So to load this package is always recommended for newly created documents. The corrections have no commonalities, but the package's description has a nice summary:
%
%ensure one-column floats don't get ahead of two-column floats;
%correct page headers in twocolumn documents;
%stop spaces disappearing in moving arguments;
%allowing |\fnsymbol| to use text symbols;
%allow the first word after a float to hyphenate;
% cs{emph} can produce caps/small caps text;
%bugs in \cs{setlength} and \cs{flushbottom.}
% 
%    \begin{macrocode}
\RequirePackage{fixltx2e}[2006/03/24]
\RequirePackage{adjustbox}
\RequirePackage{fancybox}
% mock chapters where necessary
\@ifundefined{c@chapter}{%  
      \newcounter{chapter}
      \def\thechapter{\@arabic\c@chapter}
}{}
%    \end{macrocode}
% We load the \pkg{pgf} package early so we can use it for key management.
% We create a family for keys, unimaginatively named phd. 
% This might  change in the future.
% 
% \begin{macro}{\pkgfamilyname}
% \begin{macro}{\cxset}
% \begin{macro}{\cxsetvalue}
% The macro \cmd{\cxset} is the workhorse of the package. It is used to define or to set options
% for styling documents and also offers other utilities.
%
%    \begin{macrocode}
\RequirePackage{pgf}      
\usepgfmodule{parser}%for svg     
\usepgflibrary{svg.path}%for futurelet and parser demo       
\def\pkgfamilyname{phd}
\pgfkeys{/\pkgfamilyname/.is family}   
\newcommand\cxset{\pgfqkeys{/\pkgfamilyname}} 
\def\cxkeydef#1#2{%
 \pgfkeyssetvalue{/\pkgfamilyname/#1}{#2}%
}
\def\cxvalueof#1{%
 \expandafter\pgfkeysvalueof{#1}%
}
%\RequirePackage{silence} gives errors with varwidth
 \hfuzz=999pt % reduce overfull hbox errors
 \hbadness=10000 % reduce underfull hbox errors
% 
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\def\cx@optionlist{}
\def\cxuselibrary#1{\cxset{library/.cd,#1}}
%
% The library is added by inputting the file and setting the path accordingly.
\def\cx@add@library#1#2{%
  \cxset{library/#1/.code={\@ifundefined{cxlibrary@#1@loaded}{\input #2}{}}}%
  \DeclareOption{#1}{\edef\cx@optionlist{\cx@optionlist,#1}}%
}
%    \end{macrocode}
%
% Here is our attempt to play nice with the three
% main TeX engines.
%
%    \begin{macrocode}
\RequirePackage{phdsort}%% to check
\RequirePackage{ifluatex}
\RequirePackage{ifxetex}
\def\ifengine#1#2#3{
  \ifxetex
    #1%
  \else
    \ifluatex
      #2%
    \else
      #3%
    \fi
\fi
}
%    \end{macrocode}
%
% We use \pkgname{luacode} and luatextra only if we are using LuaTeX. Many of the
% packages we load ourselves later in any case. We need to check this.
%    \begin{macrocode}
\ifluatex
  \RequirePackage{luacode}
  %\RequirePackage{luatextra}
\fi
%    \end{macrocode}
%
% \section{Front matter and backmatter}
%
% These are both provided by the classes but we intent to parameterize them
% so we redefine them.
%
% \begin{macro}{\frontmatter}
% \begin{macro}{\mainmatter}
%    \begin{macrocode}

%\cxset{mainmatter numbering/.is choice,
%          mainmatter numbering/arabic/.code=\def\setpagenumbering{\pagenumbering{arabic}},
%	    mainmatter numbering/roman/.code=\def\setpagenumbering{\pagenumbering{roman}},
%	    mainmatter numbering/Roman/.code=\def\setpagenumbering{\pagenumbering{Roman}},
%	}
%%
%\cxset{mainmatter numbering=arabic}     
%     
%\newif\if@mainmatter \@mainmattertrue
%\def\frontmatter{
%          %\cleardoublepage
%            \@mainmatterfalse
%            %\setpagenumbering%
%}
%
%
%\def\mainmatter{%
%       %\cleardoublepage
%       \@mainmattertrue
%       \setpagenumbering}
%       
\def\backmatter{\if@openright\cleardoublepage\else\clearpage\fi
      \@mainmatterfalse}
%    \end{macrocode}      
% \end{macro}
% \end{macro}
%
% \section{Font Manager}
%
% \subsection{Sizing}
%
%    \begin{macrocode}
\setlength\lineskip{1\p@}
\setlength\normallineskip{1\p@}
\renewcommand\baselinestretch{}
%    \end{macrocode}
%
%    \begin{macrocode}
\newskip\AJW@baseskip
\newskip\AJW@theskip
\def\AJW@setskips#1{\AJW@theskip #1\relax%
  \abovedisplayskip      0.50\AJW@theskip \@plus 0.25\AJW@theskip \@minus 1\p@%
  \belowdisplayskip      \abovedisplayskip
  \abovedisplayshortskip 0.25\AJW@theskip \@plus 0.25\AJW@theskip
  \belowdisplayshortskip 0.50\AJW@theskip \@plus 0.25\AJW@theskip \@minus 1\p@%
}
\def\AJW@setlists#1{\AJW@theskip #1\relax%
 \def\@listi{\leftmargin\leftmargini
  \topsep  0.5\AJW@theskip \@plus 2\p@ \@minus 1\p@%
  \parsep  \z@
  \itemsep \z@}}
%
%
% common Sizes
\newcommand{\@viiiptv}{8.5}%                  8.5pt
\DeclareMathSizes{\@viiiptv}{\@viiiptv}{\@vipt}{\@vpt}
\newcommand{\@ixptv}{9.5}%                    9.5pt
\DeclareMathSizes{\@ixptv}{\@ixptv}{\@viipt}{\@vpt}
\newcommand{\@xptv}{10.5}%                    10.5pt (normalsize)
\DeclareMathSizes{\@xptv}{\@xptv}{\@viipt}{\@vpt}
\newcommand{\@xvipt}{16}%                     16pt size
\DeclareMathSizes{\@xvipt}{\@xvipt}{\@xiipt}{\@xpt}
\newcommand{\@xviiipt}{18}%                   18pt size
\DeclareMathSizes{\@xviiipt}{\@xviiipt}{\@xiipt}{\@xpt}

\renewcommand\tiny{\@setfontsize\tiny\@vpt{6}\AJW@setskips\AJW@setlists}
\renewcommand\footnotesize{\AJW@baseskip 10.5pt%
  \@setfontsize\footnotesize\@viiipt{10.5}\AJW@setskips\AJW@setlists}
\renewcommand\large{\@setfontsize\large\@xipt{14}\AJW@setskips\AJW@setlists}
\newcommand\Aheadsize{\@setfontsize\Aheadsize\@xipt{13}\AJW@setskips\AJW@setlists}
\renewcommand\Large{\@setfontsize\Large\@xiipt{17}\AJW@setskips\AJW@setlists}
\renewcommand\LARGE{\@setfontsize\LARGE\@xvipt{19}\AJW@setskips\AJW@setlists}
\renewcommand\huge{\@setfontsize\huge\@xviiipt{24}\AJW@setskips\AJW@setlists}
% Fix me
\def\huge{\@setfontsize\Huge{24}{26}}
\def\HUGE{\@setfontsize\Huge{38}{47}}
\def\HHUGE{\@setfontsize\HHUGE{58}{67}}
\def\HHHUGE{\@setfontsize\HHHUGE{94}{105}}
 \newcommand\smallverbatimsize{\AJW@baseskip 11.5pt%
    \@setfontsize\smallverbatimsize{10.5}{11.5}\AJW@setskips\AJW@setlists}
  \renewcommand\scriptsize{%
    \@setfontsize\scriptsize\@viipt{8}\AJW@setskips\AJW@setlists}
  \newcommand\figcaptionsize{\AJW@baseskip 10.5pt%
    \@setfontsize\figcaptionsize\@viiipt{10.5}\AJW@setskips\AJW@setlists}
  \let\smallertablesize\figcaptionsize
  \renewcommand\small{\AJW@baseskip 10pt%
    \@setfontsize\small\@ixpt{10}\AJW@setskips\AJW@setlists}
  \let\indexsize\small
  \newcommand\enotesize{\AJW@baseskip 11.5pt%
    \@setfontsize\enotesize\@ixpt{11.5}\AJW@setskips\AJW@setlists}
  \newcommand\smallish{\AJW@baseskip 11pt%
    \@setfontsize\smallish\@ixpt{11}\AJW@setskips\AJW@setlists}
  \let\bibliosize\smallish
  \newcommand\tablesize{\AJW@baseskip 11pt%
    \@setfontsize\tablesize\@ixptv{11}\AJW@setskips\AJW@setlists}
  \newcommand\exercisesize{\AJW@baseskip 12pt%
    \@setfontsize\exercisesize\@ixptv{12}\AJW@setskips\AJW@setlists}
  \newcommand\normalsmall{\AJW@baseskip 12pt%
    \@setfontsize\normalsmall\@xpt{12}\AJW@setskips\AJW@setlists}
  \newcommand\verbatimsize{\AJW@baseskip 13pt%
    \@setfontsize\verbatimsize\@xpt{13}\AJW@setskips\AJW@setlists}
  \newcommand\xheadsize{\AJW@baseskip 12pt%
    \@setfontsize\xheadsize\@xptv{12}\AJW@setskips\AJW@setlists}
  \newcommand\largerstill{\AJW@baseskip 14pt%
    \@setfontsize\largerstill\@xiipt{14}\AJW@setskips\AJW@setlists}
    
  \renewcommand\normalsize{\AJW@baseskip 13.5pt%
    \@setfontsize\normalsize\@xptv{13.5}\AJW@setskips{\AJW@baseskip}
    \let\@listi\@listI}
  \let\listsize\normalsize
%
%    \end{macrocode}
%
% \subsection{Loading fontspec} We load the \pkgname{fontspec} package \citep{fontspec} both
% for XeTeX or LuaTeX.
% The font manager needs to first distinguish  between the various
% engines used, and secondly needs to use the right packages. This is a bit of
% a kludge at the moment.
%
%  The handler |.set font-face| creates a command for activating a font face
%  and also activates it? DOES NOT WORK
%
%    \begin{macrocode}
 \pgfkeys{/handlers/.set font-face/.code=\pgfkeysalso{\pgfkeyscurrentpath/.code=
           \def\tempa{##1}%
           \def\tempb{normal}%
           \def#1{##1}%
           \ifx\tempa\tempb%
              \def#1{\normalfont}%
           \fi%
   }}%   
%
\cxset{document font/.code 2 args=\setmainfont[#2]{#1}}
%
\def\defaultfontsxetexluatex{% 
  \RequirePackage{expl3}
  \RequirePackage{xcoffins}
  \RequirePackage{xtemplate}
  \RequirePackage{l3sort}
%  
  \RequirePackage[no-math]{fontspec}
   \setmainfont[
      BoldFont={timesbd.ttf},
      ItalicFont={timesi.ttf},
      BoldItalicFont={timesbi.ttf},
      SmallCapsFont={times.ttf},
                      ]{times.ttf} % on windows
 \setsansfont{Tex Gyre Heros}% work okay with palatino
 \setmonofont[Scale=.95]{consola.ttf}
% 
 \newfontfamily\verbatimfamily[Scale=0.95]{consola.ttf}
 \DeclareTextFontCommand{\texttt}{\verbatimfamily} %CHANGED
 \newfontfamily\arial{Arial}
 \let\pan\arial
 \let\unicodenumberfam\arial
 \newfontfamily\smallcps[Scale=0.8]{Arial}
 \def\phd@font@times{Times New Roman}
  \cxset{document font={\phd@font@times}{Scale=1}}
  \newfontfamily\arabicfont[Script=Arabic]{Amiri}
 \newfontfamily\arabicfonttt[Script=Arabic,Scale=.75]{DejaVu   Sans Mono}
}  
%    \end{macrocode}
%
%  The management of default fonts for scripts and languages is attempted here first. 
%  This is a difficult topic, as the user might not have the fonts installed in their system.
%  If polyglossia is used it checks that language<languagename>  is defined, hence we
%  need to define |\arabicfont|  for the arabic language etc. 
%  
%    \begin{macrocode}  
%
\ifengine{\defaultfontsxetexluatex}{\defaultfontsxetexluatex}{}
%    \end{macrocode}
%
%  We need to cater for LTR without changing basic commands of XeTeX or eTeX.
%
%    \begin{macrocode}
\ifluatex
   \RequirePackage{luaotfload}
%   \let\TeXXeTstate\@gobble
   \def\setRTL{\luatextextdir TRT}%\pardir TRT\textdir TRT}
   \def\endLTR{\luatextextdir TLT}%{\pardir TLT\textdir TLT}
   \let\beginR\setRTL
   \let\endR\endLTR
\fi
%    \end{macrocode}
%
%  \subsection{Creating a Small Verbatim Environment}
%  This is a modified version from Cambridge classes
%    \begin{macrocode}
\begingroup \catcode `|=0 \catcode `[= 1
\catcode`]=2 \catcode `\{=12 \catcode `\}=12
\catcode`\\=12 |gdef|@xsmallverbatim#1\end{smallverbatim}[#1|end[smallverbatim]]
|gdef|@sxsmallverbatim#1\end{smallverbatim*}[#1|end[smallverbatim*]]
|endgroup
\def\@smallverbatim{\trivlist \item\relax
  \if@minipage\else\vskip\parskip\fi
  \leftskip\@totalleftmargin\rightskip\z@skip
  \parindent\z@\parfillskip\@flushglue\parskip\z@skip
  \@@par
  \@tempswafalse
  \def\par{%
    \if@tempswa
      \leavevmode \null \@@par\penalty\interlinepenalty
    \else
      \@tempswatrue
      \ifhmode\@@par\penalty\interlinepenalty\fi
    \fi}%
  \let\do\@makeother \dospecials
  \obeylines \smallverbatim@font \@noligs
  \hyphenchar\font\m@ne
  \everypar \expandafter{\the\everypar \unpenalty}%
}
\def\smallverbatim{\@smallverbatim \frenchspacing\@vobeyspaces \@xsmallverbatim}
\def\endsmallverbatim{\if@newlist \leavevmode\fi\endtrivlist}
\def\smallverbatim@font{\normalfont\smallverbatimsize\ttfamily}
%    \end{macrocode}
%
% The package fonttable provides a number of interesting testing tests
% for fonts
%
%    \begin{macrocode}					
\RequirePackage{fonttable}	
%    \end{macrocode}
%
% \section{Language Manager} 
%
% We use the package \pkgname{polyglossia} for language management for the
% newer engines and \pkgname{babel} for pdfLaTeX.
% This is full of holes which need to be closed for cases where the
% bidi package is loaded.
%
%    \begin{macrocode} 
\ifengine{\RequirePackage{polyglossia}
  \setdefaultlanguage{english}}{%
  \RequirePackage{polyglossia}
  \setdefaultlanguage{english}}{\RequirePackage[dutch, german, main=english]{babel}}
  \RequirePackage[dutch,german,english]{xlayouts}
%    \end{macrocode}
%
% \chapter{Package Management} 
%  
% In order to keep track of all the packages and keys we require a
% number of macros will be defined first.
% 
% Each of the packages used by this document is loaded conditionally.
% However, it might be nice to know if we have a complete set.  So we
% define |\ifcomplete| which starts true, but gets set to false if any
% package is missing. Some code is necessary in order to manage 
% the complexity.
% I am indebted to the source of |symbols.tex| for some of the macros.
% There are a number of symbols (e.g., \cmd{\Square}) that are defined by      
% multiple packages.  In order to typeset all the variants in this       
% document, we have to give glyph a unique name.  
% To do that, we define :
%
% 
% \cs{savesymbol{XXX}}, which renames a symbol from \cs{XXX} to \cmd{\origXXX}, and    
% \cmd{\restoresymbols{yyy}{XXX}}, which renames \cmd{\origXXX} back to \cmd{XXX} and     
% defines a new command, |\yyyXXX|, which corresponds to the most recently 
% loaded version of |\XXX|.                                                
%                                                                        
% This implementation of \savesymbol and \restoresymbol was copied from  
% the |savesym| package, which started with symbol.tex's old definitions   
% of those macros and improved upon them.  However, \renamerobustsymbol  
% and |\ifnotsavedsym| are from  the list of |symbols| documentation.                                
%                                                                        
% 
%
% \begin{macro}{\savesymbol}
%    \begin{macrocode}
\NewDocumentCommand{\savesymbol}{ m }{%
  \expandafter\let\csname orig#1\expandafter\endcsname\csname#1\endcsname
  \expandafter\let\csname #1\endcsname\relax
}

%    \end{macrocode}
% \end{macro}
%    
%
% \begin{macro}{\restoresymbols}
% 	Restore a previously saved symbol, and rename the current one.
%    \begin{macrocode}
\newcommand*{\restoresymbol}[2]{%
  \expandafter\global\expandafter\let\csname#1#2\expandafter\endcsname%
    \csname#2\endcsname
  \expandafter\global\expandafter\let\csname#2\expandafter\endcsname%
    \csname orig#2\endcsname
}
%    \end{macrocode}  
% \end{macro}
 
% Rename a robust command.
%    \begin{macrocode}
\newcommand*{\renamerobustsymbol}[2]{%
  \expandafter\let\expandafter\origrealcommand
    \csname #2\space\endcsname
    \expandafter\global\expandafter\let\csname#1#2\endcsname=\origrealcommand
}
%    \end{macrocode}
% Test if a symbol is not saved.
%    \begin{macrocode}
\def\ifnotsavedsym@helper#1#2!{\expandafter\ifx\csname orig#2\endcsname\relax}
\newcommand*{\ifnotsavedsym}[1]{%
  \expandafter\ifnotsavedsym@helper\string#1!%
}
%    \end{macrocode}
% \begin{macro}{\ifcomplete}
%    \begin{macrocode}
\let\oldcontentsline\contentsline
\newif\ifcomplete
%    \end{macrocode}
% \end{macro}    
%    
% For debugging purposes we define a switch that enables us to toggle
% on and off the loading of packages.
% 
%    \begin{macrocode}
\newif\ifloadpackages
\loadpackagestrue
%    \end{macrocode}
%    
% |\IfStyFileExists*| is just like |\IfFileExists|, except that it appends
% ".sty" to its first argument.  |\IfStyFileExists| is the same as
% |\IfStyFileExists*|, but it additionally adds its first argument to a list
% (|\missingpkgs|) and marks the document as incomplete (with
% |\completefalse|) if the |.sty| file doesn't exist.
% 
% \begin{macro}{\missingpkgs}
% \begin{macro}{\foundpkgs}
%   \begin{macrocode}
\newcommand{\missingpkgs}{}
\newcommand{\foundpkgs}{}
\newcommand{\if@sty@file@exists@star}[3]{%
  \ifloadpackages
    \IfFileExists{#1.sty}{#2}{#3}%
  \else
    #3%
  \fi
}
\newcommand{\if@sty@file@exists}[3]{%
  \ifloadpackages
    \IfFileExists{#1.sty}%
                 {#2\@cons\foundpkgs{{#1}}}%
                 {#3\completefalse\@cons\missingpkgs{{#1}}}%
  \else
    #3\completefalse\@cons\missingpkgs{{#1}}%
  \fi
}
\newcommand{\IfStyFileExists}{%
  \@ifstar{\if@sty@file@exists@star}{\if@sty@file@exists}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Utility macros for displaying symbols and fonts}
%
% In the sections that follow, we use a number of utilities for
% displaying fonts and utilities in tables and figures, we collect
% them here and make them available to the user for document
% use. Many are modifications from other packages.
%
% \begin{macro}{\symbols}
% \begin{macro}{\endsymbols}
%    \begin{macrocode}
% From stmarysrd symbols package
% A very convenient command to typeset symbols.
% Much preferable than tables. Slight modifications to
% make it a bit more clear
% CHECK END SYMBOLS
\newcommand\symbols{\flushleft}
\def\endsymbols{\endflushleft}

\def\dosymbol#1{%
   \leavevmode\hbox to .33\textwidth{%
    \hbox to 1.2em%
    {\hss$#1$\hfil}%
   \footnotesize\texttt{\string#1}\hss}%
   \penalty10}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \symbols
% \dosymbol{\Square} \dosymbol{\square} \dosymbol{\Diamond} \dosymbol{\diamond} \(\dosymbol{\symbol{60}}\)
% \endsymbols
%   
% \section{Best practices macros} 
% 
% We load a few packages for fixes and errors and |nag| if outdated packages are used.
% Modify to suit your requirements.  
% Package management is a bit complex to avoid errors
% with options.
%
%To find out if a package has already been loaded, use
%|\@ifpackageloaded|\meta{package}\meta{true}\meta{false}.
%|\@ifpackagelater| To find out if a package has already been loaded with a version more recent
%|\@ifclasslater| than version, use |\@ifpackagelater|\meta{hpackagei}\meta{version}\meta{true}\meta{false}.
%|\@ifpackagewith| To find out if a package has already been loaded with at least the options
%options, use |\@ifpackagewith|\meta{package}\meta{options}\meta{true}\meta{false}.
% 
%There exists one package that can't be tested with the above commands: the
%fontenc package pretends that it was never loaded to allow for repeated reloading
%with different options (see ltoutenc.dtx for details).
%
% 
% We include the following two packages to provide the standard 
% fixes for \LaTeX2e\ and the |nag| package to provide some guidance
% as to good
% practices. We set the |nag| keys to |orthodox| and |l2tabu.|
% \url{http://tex.stackexchange.com/questions/19264/techniques-and-packages-to-keep-up-with-good-practices?rq=1}
% and \href{http://stackoverflow.com/questions/193298/best-practices-in-latex}{best practices in LaTeX.}
%
%
% \begin{environment}{etex}
%    \begin{macrocode}
\ifxetex
   \else
     \ifluatex
        \RequirePackage{etex}
     \else
        \RequirePackage{etex}
  \fi
\fi
%    \end{macrocode}
% \end{environment}
%

%    \begin{macrocode}
\cxset{nag keys/.store in =\nagkeys@cx,
       onlyamsmath keys/.store in=\onlyamsmathkeys@cx,
       xcolor keys/.store in=\xcolorkeys@cx}
%        
%
\input{settings} % experimental
%    \end{macrocode}
%\cxset{nag keys = {l2tabu,%
%                   orthodox,%
%                   %
%                  }}
%
% \begin{macro}{xcolor}
% 	For |xcolor| we try and load as many pre-defined colornames as
% 	possible.
%    \begin{macrocode}
\cxset{xcolor keys={fixpdftex,usenames,dvipsnames,
                  svgnames,x11names,table}}                     
% Set amsmath keys
%
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
% \PassOptionsToPackage{\nagkeys@cx}{nag}
% \RequirePackage{nag}   
%    \end{macrocode}
%
%
%
% \begin{macro}{onlyasmath}
% The package |onlyasmath| also provides errors for deprecated math
% commands like using |$$|\ldots|$$| which can result in unwanted spaces
% being introduced in the typsetting of the document. The recommended 
% way is to use |\[|\ldots|\]|. The package was developed by Harold Harders
% and although targetted for class writers one might as well use it directly.
%
%% |\PassOptionsToPackage{\onlyamsmathkeys@cx}{onlyamsmath}|
% |\RequirePackage{onlyamsmath} |
% \section{microtype}
%
% \section{Typography}
%
% The package \pkgname{microtype} is loaded with no options
% as it provides facilities for loading individual features
% at run time. (This enables the use of phd keys).
%  The package had some issues with LuaLaTeX and  XeTeX
%  but now it works as advertized. As it is a great package we include it here.
%
% \subsection{Microtypography}
% With LuaTeX microtype must come after fontspec.
%    \begin{macrocode}
% 

\ifengine%
	  {\RequirePackage[tracking=true]{microtype}}%
	  {\RequirePackage[tracking=true]{microtype}}%
	  {\RequirePackage[tracking=true]{microtype}}%
%
%    \end{macrocode}
% \end{macro}
%
% \subsection{ragged2e}
%
% We load \pkgname{ragged2e} package for typography
%
% \begin{macro}{ragged2e}
%
% This package by Martin Schr\"oeder provides new commands and environments for
% setting ragged text which are easy to configure to allow hyphenation. The
% way Martin explains it, the main purpose of the package is to restore the
% plain TEX definitions which have been changed by LaTex2e. On the way it
% defines a number of useful environments. The package also loads the
% |footmisc| package if loaded with the option |footnotes|. Hm.. It also
% loads the package |everysel|. More fun. Passing of options, should be in 
% a settings file? \index{justification>ragged}
% \index{justification>ragged2e (package)}
% 
%
%
%    \begin{macrocode}
\newif\ifRAGGEDTWOE
\newif\ifEVERYSEL
\newif\ifFOOTMISC
\PassOptionsToPackage{ragged2e}{footnotes,raggedrightboxes}
\RequirePackage{ragged2e}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Highlighting}
% We load the \pkgname{soul} for spacing out and for
% highlighting words. We do not pass any options. These
% are left to the user.
%
% \begin{macro}{\sethlcolor}\marg{color name} sets
% the color for soul's \hl{highlight} command \cmd{\hl}.
%    \begin{macrocode}
\newif\ifSOUL
\IfStyFileExists{soul}
{\SOULtrue\RequirePackage{soul}
    \sethlcolor{thehighlight}}
{}
%    \end{macrocode}
% \end{macro} 
% \subsection{Dropcaps} 
%  
% We use the |lettrine| package of Daniel Flipo for drop caps. We do not pass any
% defaults and leave it to the configuration file. The lettrine configuration
% file is |lettrine.cfg|. We define a command \cs{dropcap} for some settings
% that we think are generally acceptable. 
%
%    \begin{macrocode}
\RequirePackage{lettrine}
\ifx\dropcap\undefined
  \def\dropcap#1#2{%
    \lettrine[lines=3, lraise=0.1, nindent=0em, slope=.1em]{#1}{#2}
  }%
\fi
%    \end{macrocode}
%
% \subsection{Units and formatting of numbers}
% 
% We load the defacto standard for formatting units in SI units. Note
% it loads LaTeX3 packages.
%
% \begin{macro}{siunitx}
% \begin{macro}{numprint} The package \pkg{numprint} has some
% useful macros for formatting large numbers. We use it for some
% of the examples.
%    \begin{macrocode}
\RequirePackage{siunitx}
  \sisetup{fixed-exponent =0,
           scientific-notation = false}
%\RequirePackage{numprint} 
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsection{Acronyms}
%
% For acronyms and abbreviations we load the \pkgname{acronym} package
% by Tobias Oetiker \citeyearpar{acronym}. This package makes sure, that all acronyms used 
% in the text are spelled out in full at least once. In one of its
% options it loads the |relsize| package. My recommendation is to
% load the package with the options |smaller, printonly| and 
% |withpage|. Please note that the |withpage| option only works, if the
% |printonlyused| option is present.
% 
%    \begin{macrocode}
\cxset{acronym keys/.store in = \acronymkeys@cx}
\cxset{acronym keys={smaller,printonlyused,withpage}}
\PassOptionsToPackage{\acronymkeys@cx}{acronym}
\RequirePackage{acronym}
%    \end{macrocode}
%
% We also define some common abbreviations
%    \begin{macrocode}
     \RequirePackage{mdframed}

%    \end{macrocode}
% 
% 
% \section{Graphics}
% 
%  The package \pkg{graphicx} developed by David Carlisle and Sebastian Rahtz is 
%  part of the 
%  Standard LaTeX `Graphics Bundle'.  It provides extensions to the original
% \pkg{graphics}, which it loads. The \pkg{graphics} in its turn loads
% the package \pkg{trig} which helps with trigonometrical
% calculations.
%
% We load the package |graphicx| with no options. We let |graphicx|, to 
% handle any draft options via the class itself. 
% \href{http://tex.stackexchange.com/questions/3131/graphicspath-for-miktex}{graphicspath for MikTeX} check
% adds figures etc to paths. 
% 
% \begin{docCommand} {DeclareGraphicExtensions} { \meta{extensions} } 
%   We define some common paths and extensions. 
%   to enable the user to just call he image without specifying the extension or
%   folders.
% \end{docCommand}
%
% \begin{macro}{\graphicspath}
%    \begin{macrocode}
\RequirePackage{graphicx}[1999/02/16]
\DeclareGraphicsExtensions{.jpg, .JPG, .jpeg, .png, .eps}
\graphicspath{{graphics/}{graphics//}{../images/}{images//}{./images/}{./graphics/}%
   {../graphics/}{./pic/}{../pic}}
%    \end{macrocode}
% \end{macro}
% 
%
% Various `keys' or named arguments are supported.
% \begin{description}
% \item[bb] Set the bounding box. The argument should be four
% dimensions, separated by spaces. 
% \item[bbllx,bblly,bburx,bbury] Set the bounding box. Mainly for
% compatibility with older packages. |bbllx=a,bblly=b,bburx=c,bbury=d|
% is equivalent to |bb = a b c d|.
% \item[natwidth,natheight] Again an alternative to |bb|. 
% |natheight=h,natwidth=w| is equivalent to |bb = 0 0 h w|.
% \item[viewport] Modify the bounding box specified in the file.
% The four values specify a bounding box \emph{relative} to the
% |llx|,|lly| coordinate of the original box.
% \item[trim] Modify the bounding box specified in the file.
% The four values specify the amounts to remove from
% the left, bottom, right and top of the original box.
% \item[hiresbb] Boolean valued key. Defaults to |true|. 
% Causes \TeX\ to look for |%%HiResBoundingBox| comments rather than
% the standard |%%BoundingBox|. May be set to |false| to override
% a default setting of true specified by the |hiresbb| package option.
% \item[angle] Rotation angle.
% \item[origin] Rotation origin (see |\rotatebox|, below).
% \item[width] Required width, a dimension (default units |bp|). The
% graphic will be scaled to make the width the specified dimension.
% \item[height] Required height. a dimension (default units |bp|).
% \item[totalheight] Required totalheight (ie height $+$ depth). a
% dimension (default units |bp|). Most useful after a rotation (when the
% height might be zero).
% \item[keepaspectratio] Boolean valued key (like |clip|). If it is set
%  to true, modify the meaning of the |width| and |height| (and
% |totalheight|) keys such that if both are specified then rather than
% distort the figure the figure is scaled such that neither dimension
% \emph{exceeds} the stated dimensions.
% \item[scale] Scale factor.
% \item[clip] Either `true' or `false' (or no value, which is equivalent
% to `true'). Clip the graphic to the bounding box (or viewport if one
% is specified).
% \item[draft] a boolean valued key, like `clip'. locally switches to
% draft mode, ie.\ do not include the graphic, but leave the
% correct space, and print the filename.
% \item[type] Specify the file type. (Normally determined from the file
% extension.) 
% \item[ext] Specify the file extension.
%        \emph{Only} for use with |type|.
% \item[read] Specify the `read file' which is used for determining the
% size of the graphic. \emph{Only} for use with |type|.
% \item[command] Specify the file command.
%         \emph{Only} for use with |type|.
% \end{description}
%
% The arguments are interpreted left to right. |clip|, |draft|, |bb|,,
% and |bbllx| etc.\ have the same effect wherever they appear. but the
% scaling and rotation keys interact.
%
% \begin{macro}{wrapfig} The package \pkg{wrapfig} is loaded next. 
% 
%    \begin{macrocode}
\RequirePackage{wrapfig}
%    \end{macrocode} 
% \end{macro}
%
% \begin{macro}{rotating}
% The package \pkgname{rotating} performs
% most sorts of rotation one might like, including rotation of complete floating
% figures and tables. The package was developed by Robin Fairbairns
% Sebastian Rahtz and Leonor Barroca. We use the option |quiet| as the 
% package is rather verbose.
%
%    \begin{macrocode}
\RequirePackage[quiet]{rotating}
%    \end{macrocode} 
% \end{macro}
% 
% \section{Color Management}
%
% Most classes load the |xcolor| package. Including
% it here, should either be able to check if it was 
% loaded by the class or to pass the options before
% the class itself. This package is a common source
% of errors, as classes load it with mostly different options.
% Because of this is also a good example to test our code
% in a number of minimal working examples.
%
%    \begin{macrocode}
\@ifpackageloaded{xcolor}{}%
 {\PassOptionsToPackage{\xcolorkeys@cx}{xcolor}
  \RequirePackage{xcolor}}
%    \end{macrocode}
%
%	We adopt the convention that colour names used in code should be
%	prefixed by a |the|. For simplicity we also adopt the convention
%    that all colours defined in colour schemes should be in lowercase
%	(less keystrokes and matches the styles of |pgf| keys). 
%
% \subsection{Color management}
%    \begin{macrocode}
\providecommand\href[2]{\texttt{#1}}
\definecolor{lstbgcolor}{rgb}{0.9,0.9,0.9}
\colorlet{examplefill}{yellow!80!black}
% codepalettes
%\definecolor{codebackground}{rgb}{0.972,0.929,0.753}
%\definecolor{codebackground}{rgb}{0.972,0.929,0.753}
%\definecolor{codebackground}{HTML}{B7C1C1}
%\definecolor{thekeywordstyle}{HTML}{435969}
%\definecolor{thecommentstyle}{HTML}{F87F01}
%1890
\definecolor{codebackground}{HTML}{F2F2EA}
\definecolor{thekeywordstyle}{HTML}{392726}
\definecolor{thecommentstyle}{HTML}{DF8743}

\definecolor{graphicbackground}{rgb}{0.972,0.929,0.753}
\colorlet{graphicbackground}{codebackground}




\definecolor{glyphbox}{rgb}{0.86,0.86,0.8}
%\definecolor{codebackground}{rgb}{0.8,0.8,1}
\definecolor{theblue} {rgb}{0.02,0.04,0.48}
\definecolor{thered}  {rgb}{0.65,0.04,0.07}
\definecolor{thedoccommandcolor}{rgb}{0.65,0.04,0.07}% doc command colors
\colorlet{Headings}{black} %font examples
\colorlet{Subheadings}{black} %font examples
\colorlet{thefontname}{black}%font examples
\colorlet{thehighlight}{yellow}%soul  highlight
\colorlet{thecancel}{thered}%for cancel commands
\definecolor{thegreen}{rgb}{0.06,0.44,0.08}
\definecolor{thelightgreen}{rgb}{0.06,0.44,0.06}
\definecolor{thegrey} {gray}{0.5}
\definecolor{thegray} {gray}{0.5}
\definecolor{thedarkgray} {gray}{0.95}
\definecolor{lightgray}{gray}{0.6}
\definecolor{shadedcolor}{gray}{0.6}
\definecolor{thelightgray}{gray}{0.6}
\definecolor{theshade}{gray}{0.94}
\definecolor{theframe}{gray}{0.75}
\definecolor{thecream}{rgb}{1,0.95,0.4}
\definecolor{spot}{rgb}{0,0.2,0.6}%some shades of blue
\definecolor{sweet}{rgb}{0,.68,.93}%shades of blue
%\colorlet{codebackground}{spot!5!white}
\definecolor{boxframe}{gray}{0.8}
\definecolor{boxfill}{rgb}{0.95,0.95,0.99}
\definecolor{theoption}{gray}{0.6}
\definecolor{themacro}{rgb}{0.784,0.06,0.176}
\definecolor{ExampleFrame}{rgb}{0.628,0.705,0.942}
\definecolor{ExampleBack}{rgb}{0.963,0.971,0.994}
\definecolor{Hyperlink}{rgb}{0.281,0.275,0.485}
\colorlet{thehyperlink}{theblue}
\colorlet{preciscolor}{sweet}
\colorlet{toccolor}{sweet}
%\newcommand*{\defaultcolor}{\color{black}}
%\newcommand*{\spotcolor}{\color{spot}}
%    \end{macrocode}
% 
%    \begin{macrocode}
\newcommand{\done}{\cellcolor{teal}done}  
\newcommand{\partialdone}{\cellcolor{yellow}done}
\newcommand{\hcyan}[1]{{\color{teal} #1}}
%    \end{macrocode}
%
% \section{Rules}
% We need to define a number of rules to use in typesetting styles.
% \begin{macro}{\thinrule}
% \begin{macro}{\mediumrule}
% \begin{macro}{\thickrule}
%	We will use later on different styles of rules to decorate chapter headings.
%	We define a few here to simplify code later on.
%
%    \begin{macrocode}
\DeclareRobustCommand\thickrule{%
    \leavevmode \leaders \hrule height 2pt \hfill \kern \z@}
\DeclareRobustCommand\thinrule{\vrule width\textwidth height0.4pt depth0pt\relax}%
%
\DeclareRobustCommand\mediumrule{\rule{\textwidth}{0.8pt}}
%    Adjusted to get toc parameters in
\DeclareRobustCommand\Rule{{\color{\tocchapternumberfill@cx}\rule[-4.1pt]{13cm}{0.4pt}}}
\DeclareRobustCommand\bottomline{\medskip
   \noindent\rule{\linewidth}{0.4pt}\medskip}
\DeclareRobustCommand\topline{\par\medskip
   \noindent\rule{\linewidth}{0.4pt}\medskip} 
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%  Some chapter and sectioning heads include rules, we define them here for convenience.
%
%    \begin{macrocode}
\cxset{chapter rule color/.store in={\chapter@rule@color}}%
\cxset{chapter rule color=spot!50}
\DeclareRobustCommand\tikzrule{%
  \tikz [color=\chapter@rule@color, very thick, inner sep=0pt, outer sep=0pt]%
        \draw(0,0)--(\the\linewidth,0);
}%
%  The trim left is required to align the rule exactly
%    \begin{macrocode}           
%#1  options #2 width  #3 height           
\newcommand\drawrule[3][]{%
    \offinterlineskip
          \tikz [ name=s,trim left,
                   anchor=base,
                   draw=black, 
                 % double distance=.2pt,
                  line width=#3,
                  %very thick,
                  inner sep=0pt, 
                  outer sep=0pt,#1]   \draw(0,0)--(#2,0);
}
 \def\drawdoublerule#1#2{%
    \drawrule{#1}{#2}%
    \vskip2.5pt
    \drawrule{#1}{#2}%
 }
%    \end{macrocode}
%
% \section{Filler Text}
%
%
% \begin{macro}{lipsum}
%
% 	In publishing and graphic design, lorem ipsum is placeholder text (filler text) 
% 	commonly used to demonstrate the graphics elements of a document or visual 
% 	presentation, such as font, typography, and layout, by removing the distraction 
% 	of meaningful content. The lorem ipsum text is typically a section of a Latin text 
% 	by Cicero with words altered, added and removed that make it nonsensical in meaning 
% 	and not proper Latin. Other packages exist such as |kantlipsum| and |blindtext|, 
% 	however, both result in somewhat legible texts, which defeats the purpose of 
% 	providing texts that the reader is not going to read. the extensions |lipsumx| 
% 	aim at providing a gap between the three packages. It provides extensions
% 	for full document testing.
%
%    \begin{macrocode}
\newif\ifLIPSUM
\RequirePackage{lipsum}
\RequirePackage{kantlipsum}
\RequirePackage{blindtext}
%    \end{macrocode}
% \end{macro}
%
% 
% \begin{macro}{\lorem} 
% 
%	We declare a short macro \cs{lorem} to be used for testing, as well as 
%	testing captions and the like.
% 
%    \begin{macrocode}
\DeclareDocumentCommand\lorem{ o }{Fusce adipiscing justo nec ante. Nullam in enim.
 Pellentesque felis orci, sagittis ac, malesuada et, facilisis in,
 ligula. Nunc non magna sit amet mi aliquam dictum. In mi. Curabitur
 sollicitudin justo sed quam et quadd. \par}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fox} A classic one liner containing all the letters
%	 of the alphabet, used as a testing code.
%    \begin{macrocode}
\newcommand{\fox}{``The quick brown fox jumps over the lazy dog''} 
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\frogking}
%    \begin{macrocode}
\newcommand\frogking{%
\leavevmode
\hskip1em In olden times when wishing
still helped one, there lived a
king whose daughters were all
beautiful, but the youngest was so
beautiful that the sun itself,
which has seen so much, was
astonished whenever it shone in
her face. Close by the king's
castle lay a great dark forest,
and under an old lime-tree in the
forest was a well, and when
the day was very warm, the
king's child went out into the 
forest and sat down by the side
of the cool fountain, and when she was bored she
took a golden ball, and threw it up on a high and caught it, and this
ball was her favorite plaything. \par}%
%    \end{macrocode}
%\end{macro}
%
%    \begin{macrocode}
\newcommand\onepar{In olden times when wishing
still helped one, there lived a
king whose daughters were all
beautiful, but the youngest was so
beautiful that the sun itself,
which has seen so much, was
astonished whenever it shone in
her face. Close by the king's
castle lay a great dark forest,
and under an old lime-tree in the
forest was a well, and when
the day was very warm, the
king's child went out into the 
forest and sat down by the side
of the cool fountain, and when she was bored she
took a golden ball, and threw it up on a high and caught it, and this
ball was her favorite plaything.}%

\newcommand\alicei{%	
  The King and Queen of Hearts were seated on their throne
  when they arrived, with a great crowd assembled about them
  ---all sorts of little birds and beasts, as well as the
  whole pack of cards: the Knave was standing before them,
  in chains, with a soldier on each side to guard him; and
  near the King was the White Rabbit, with a trumpet in one
  hand, and a scroll of parchment in the other.  In the very
  middle of the court was a table, with a large dish of
  tarts upon it: they looked so good, that it made Alice
  quite hungry to look at them---``I wish they'd get the
  trial done,'' she thought, ``and hand round the
  refreshments!''.  But there seemed to be no chance of this,
  so she began looking at everything about her to pass away
  the time.}%

\newcommand\aliceii{%
  Alice had never been in a court of justice before, but she
  had read about them in books, and she was quite pleased to
  find that she knew the name of nearly everything there.
  ``That's the judge,'' she said to herself, ``because of his
  great wig.''.
  
  The judge, by the way, was the King, and as he wore his
  crown over the wig, (look at the frontispiece if you want
  to see how he did it,) he did not look at all comfortable,
  and it was certainly not becoming.
}

 \newcommand\aliceiii{``And that's the jury-box,'' thought Alice, ``and those
  twelve creatures,'' (she was obliged to say ``creatures,''
  you see, because some of them were animals, and some were
  birds) ``I suppose they are the jurors.''.  She said this
  last word two or three times over to herself being rather
  proud of it: for she thought, and rightly too, that very
  few little girls of her age knew the meaning of it at all.
  However, ``jurymen'' would have done just as well.}

 \newcommand\aliceiv{The twelve jurors were all writing very busily on slates.
  ``What are they doing?'' Alice whispered to the Gryphon.
  ``They can't have anything to put down yet, before the
  trial's begun.''.}
  
\newcommand\alicev{``They're putting down their names,'' the Gryphon
  whispered in reply, ``for fear they should forget them
  before the end of the trial.''.}
  
\newcommand\alicevi{``Stupid things!'' Alice began in a loud indignant voice,
  but she stopped herself hastily, for the White Rabbit
  cried out, ``Silence in the court!''; and the King put on
  his spectacles and looked anxiously round, to make out who
  was talking.\par}

% ALPHABETS FOR TESTING FONTS
\def\ALPHABET {A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}
\def\alphabet {a b c d e f g h i j k l m n o p q r s t u v w x y z}
\newcommand{\punctuation}{! ? . / , : }
%    \end{macrocode}
%
% \section{Tables}
% 
% \subsection{booktabs and helper macros}
% \begin{macro}{\inc}
% \begin{macro}{\resetinc}
%
% 	It is unlikely that a publication, would not have a table
% 	somewhere, to make life easier we load Simon Fear's |booktabs| \citep{booktabs}. The manual is a must
% read if you want to typeset typographically attractive tables.\footnote{Notice I haven't said
% typographically correct, there is no such thing.} We don't need to set any keys for the
% package.
%	The counter |inc| is used to increment serial numbers in tables and
%	\cs{resetinc} resets this counter to zero.
%
%    \begin{macrocode}
\RequirePackage{booktabs}
\newcounter{step}
\newcommand\resetinc{\setcounter{step}{0}}
\newcommand\inc{\stepcounter{step}\thestep}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
%
%
% \begin{macro}{tabularx}
% This package by David Carlisle's enables the typesetting of fixed width 
% tables and can stretch
% specific columns. The package loads the |array| package, but we save it from some
% trouble by pre-loading it first, so we can capture its loading. The package has two keys
% |infoshow| and |debugshow| which we don't bother at this stage to load.
% 
%    \begin{macrocode}
\RequirePackage{tabularx}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{array}
% \begin{macro}{delarray}
% The addition to array.sty added in delarray.sty is a system of implicit |\left|
%|\right| pairs. If you want an array surrounded by parentheses, you can enter:
%|\begin{array}({cc}) . .|
% 
%    \begin{macrocode}
% \RequirePackage{delarray} gives problems
\RequirePackage{array}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{dcolumn}
%  The |dcolumn| package also by David Carlisle is loaded next. This package 
%  defines a system for defining columns of entries in an |array|
%  or tabular which are to be aligned on a `decimal point'. It also loads the |array|
%  package, which we have already loaded.
% 
%    \begin{macrocode}
\RequirePackage{dcolumn}
\RequirePackage{rccol}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{longtable}
% \makeatletter
%  The |longtable| package, needs no introduction. It has some
%  peculiar settings and sometimes a couple of runs before it settles
%  down. The package has four keys |errorshow|, |pausing|, |set| and |final| looks 
%   as if they deprecated, at this stage we make onlty a mental note of it.
%  The package cannot be used within |multicolumn| environments and will
%  emit an error. 
% 
% 
%    \begin{macrocode}
	 \RequirePackage{longtable}
%    \end{macrocode}
% The following environment was copied verbatim from the Comprehensive
% Symbols. I have been trying to understand it ever since.
%
%    \begin{macrocode}
\let\origLT@array=\LT@array
\let\origLT@start=\LT@start

\newenvironment{longsymtable}[2][true]{%
  \expandafter\global\expandafter\let
  \expandafter\ifshowsymtable\csname if#1\endcsname
  \ifshowsymtable
    \mbox{}%
    \Needspace*{1\baselineskip}%
    \mbox{}%
    \begin{center}%
    \phantomsection
    \refstepcounter{table}%
    \let\refstepcounter=\@gobble
    \let\LT@array=\origLT@array
    \let\LT@start=\origLT@start
%
    \addcontentsline{toc}{subsection}{%
     \protect\numberline{\tablename~\thetable:}{#2}}%
    \@makecaption{\fnum@table}{#2}%
    \gdef\lt@indexed{}%
    \let\next=\relax
  \else
    % The following was taken verbatim from verbatim.sty.
    \let\do\@makeother\dospecials\catcode`\^^M\active
    \let\verbatim@startline\relax
    \let\verbatim@addtoline\@gobble
    \let\verbatim@processline\relax
    \let\verbatim@finish\relax
    \let\next=\verbatim@
  \fi
  \next
}{%
  \ifshowsymtable
    \end{center}
    \let\@elt=\index\lt@indexed  % Close our index ranges.
    \gdef\lt@indexed{}%
    \vskip 8ex minus 2ex
  \fi
}


% Define \index-like commands for use with longsymtable that
% automatically apply to the entire table, not just the start of it.

\newcommand{\ltindex}[1]{%
  \index{#1|(}%
  \@cons{\lt@indexed}{{#1|)}}%
}
\newcommand{\ltidxboth}[2]{\mbox{}\ltindex{#1 #2}\ltindex{#2>#1}}

\let\LT@array=\origLT@array
\let\LT@start=\origLT@start
%    \end{macrocode}
% \end{macro}   
%
% \begin{macro}{multirow}
% 
% 
% The \pkg{multirow} by Piet van Oostrum and its two companion packages
% \pkgname{bigdelim} and \pkgname{bigstrut} can be used to define multirow cells. They are difficult
% to get right and in most instances one can redesign the tables better without
% resorting to multi-rows. It has a strange interaction with the \pkgname{colortbl}
% and a hack around its usage which we will load next.
% 
%    \begin{macrocode}
% If we have type1cm.sty, use it.
% 
\IfStyFileExists*{type1cm}
  {\usepackage{type1cm}}
  {}
\RequirePackage{colortbl}
% If we have multirow.sty, use it.
\newif\ifhavemultirow
\IfStyFileExists*{multirow}
  {\havemultirowtrue\RequirePackage{multirow}}
  {}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{threeparttable}
% The package \pkgname{threeparttable} by Donald Arsenau facilitates tables with titles (captions) and notes. The
% package comes with a number of options |para|, |flushleft|, online and normal. We also load Lars Madsen's 
% \pkgname{threeparttablex} that extends the package to work with \pkgname{longtable}.
%
%   \label{threeparttable}
%    \begin{macrocode}
\RequirePackage{threeparttable}
\RequirePackage{threeparttablex}
%    \end{macrocode} 
% \end{macro}
%
%  {\begin{center}
%
%  \begin{threeparttable}[b]
%    \caption{...}
%  \begin{tabular}{ll} 
%   \toprule
%    one cell 42\tnote{1}&\\
%    another cell \tnote[2]&\\
%  \bottomrule
%  \end{tabular}
%  \begin{tablenotes}
%    \item [1] the first note ...
%    \item [2] the second note
%  \end{tablenotes}
%  \end{threeparttable}
%  \end{center}}
%
% \subsection{arydshln}
%
%This package by Hiroshi Nakashima  gives \latexâ€™s \pkg{array} and \pkg{tabular} environments the capability to draw horizontal/vertical dash-lines.
%\begin{macro}{arydshln}
% I do not have a normal use for it, personally but I have included it here for correct ordering i3n case there is a need for it. According to the package documentation, it has to be loaded after \pkg{array}, \pkg{longtable}, \pkg{colortab}, \pkg{colortbl}. Also according to the hyperref documentation it has to be loaded after hyperref as well. 
%\end{macro}
%
%^^A \begin{center}
%^^A\begin{tabular}{|l::c:r|}\hline
%^^A A&B&C\\\hdashline
%^^A %AAA&BBB&CCC\\\cdashline{1-2}
%^^A %\multicolumn{2}{|l:}{AB}&C\\\hdashline\hdashline
%^^A %\end{tabular}
%^^A % \end{center}
%  
% \section{Landscape Pages}
%
% A common request from authors is to rotate text, tables and or
% figures and to typeset the content using a landscape page.
%
% \begin{macro}{pdflscape}
% \begin{macro}{lscape}
% The package \pkgname{pdflscape} by Heiko Oberdiek  adds PDF support 
% to the environment |landscape| 
% of  package |lscape| by setting the PDF page attribute /Rotate. 
% It has to be loaded after \pkgname{lscape} so we let it load it itself.
%
%    \begin{macrocode}
\RequirePackage{pdflscape}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%  
% \chapter{Maths Implementation}
%
% 	Although we cognizant that there are documents that do not use math
% 	and perhaps others that our selection of packages is inadequate, we
% 	offer a bundle of what we think will cover most of the cases. One
% 	issue with maths is that we are limited with TeX's built-in math
% 	alphabet limitations. We aim to satisfy the most common requirements.
% 
% \begin{macro}{empheq}
% \begin{macro}{mathtools} 
%	We start with \pkgname{mathtools}, as it loads the
% 	|amsmath| package and can also pass options to it. The package was developed 
% 	by Lars Madsen and is maintained by Will Robertson and Joseph Wright. It
% 	appears to be very popular with a lot of scholars in the sciences and
% 	mathematical fields and hence I decided to  include it here.
% 
%  We provide egreg's hack to extend the math alphabets for XeTeX
%  These hacks only work for XeTeX and LuaTeX.
%    \begin{macrocode}
\ifxetex
  \def\new@mathgroup{\alloc@8\mathgroup\mathchardef\@cclvi}
  \patchcmd{\document@select@group}{\sixt@@n}{\@cclvi}{}{}
  \patchcmd{\select@group}{\sixt@@n}{\@cclvi}{}{}
\fi
\ifluatex
  \def\new@mathgroup{\alloc@8\mathgroup\mathchardef\@cclvi}
  \patchcmd{\document@select@group}{\sixt@@n}{\@cclvi}{}{}
  \patchcmd{\select@group}{\sixt@@n}{\@cclvi}{}{}
\fi
%    \end{macrocode}
%
%
%    \begin{macrocode}
\newif\ifAMS
%\newcommand\AMS{\AmS\index{AMS=\AmS}}
\AMStrue
%    \end{macrocode}
%\IfStyFileExists{amssymb}
%  {\AMStrue
%   \savesymbol{angle} \savesymbol{rightleftharpoons}
%   \savesymbol{leftharpoondown} \savesymbol{rightharpoonup}
%   \savesymbol{iint} \savesymbol{iiint}
%   \savesymbol{iiiint} \savesymbol{idotsint}
%   \let\orig@ifstar=\@ifstar
%   \let\overleftrightarrow \undefined%CHECK
%   \let\underleftarrow\undefined
%    \let\underrightarrow\undefined 
%    \let\underleftrightarrow\undefined 
%   \RequirePackage{amsmath}
%   \RequirePackage{amssymb}
%   \let\@ifstar=\orig@ifstar
%   \restoresymbol{AMS}{angle} \restoresymbol{AMS}{rightleftharpoons}
%   \restoresymbol{AMS}{lefthapoondown} \restoresymbol{AMS}{rightharpoonup}
%   \restoresymbol{AMS}{iint} \restoresymbol{AMS}{iiint}
%   \restoresymbol{AMS}{iiiint} \restoresymbol{AMS}{idotsint}
%  }
%  {
%    % The following was modified from amsmath.sty.
%    \newcommand{\AmSfont}{%
%      \usefont{OMS}{cmsy}{m}{n}}
%    \providecommand{\AmS}{{\protect\AmSfont
%      A\kern-.1667em\lower.5ex\hbox{M}\kern-.125emS}}
%  }
%    
%
% 
% Macros to try and find available fonts for XeTeX sample docs. This is
% copied verbatim from XeTeX documentation bundle.
%
% Usage:
%
% |\testFontIsAvailable{font-name}|
%   sets |\ifFontIsAvailable| according to whether or not it could be found
%
% |\FindAnInstalledFont{font-name/alternative/another/yet-another}{\cs}|
%   searches for an available font from among the names given,
%   and |\def|'s the control sequence |\cs| to the first one found
%   or to <No suitable font found> if none (which will subsequently
%   cause an error when used in a |\font| command). A word of warning this
%   can cause the system to compile the document very slowly.
%
%    \begin{macrocode}
%
\newif\ifFontIsAvailable
\def\testFontAvailability#1{%
  \count255=\interactionmode
  \batchmode
  \let\preload=\nullfont
  \font\preload="#1" at 10pt
  \ifx\preload\nullfont \FontIsAvailablefalse
  \else \FontIsAvailabletrue \fi
  \interactionmode=\count255
}

\def\FindAnInstalledFont#1#2{
  \expandafter\getFirstFontName#1/\end
  \let\next\gobbleTwo
  \ifx\trialFontName\empty
    \def#2{<No suitable font found>}%
  \else
    \testFontAvailability{\trialFontName}
    \ifFontIsAvailable
      \edef#2{\trialFontName}%
    \else
      \let\next\FindAnInstalledFont
    \fi
  \fi
  \expandafter\next\expandafter{\remainingNames}{#2}
}
\def\getFirstFontName#1/#2\end{\def\trialFontName{#1}\def\remainingNames{#2}}
\def\gobbleTwo#1#2{}
%
%    \end{macrocode}
% \begin{macro}{\ligatures}
%    \begin{macrocode}
\newcommand\ligatures[2][Old Standard-Regular]{%
  \bgroup
  \fontspec[Ligatures = Common]{#1}%
  \textit{#2}%
  \egroup
}
\renewcommand\U[1]{{\texttt{U+#1}}(\char"#1)\xspace}
%    \end{macrocode}
% \end{macro}

% 
%
%
% 
% \subsection{ymath}
%
% We load Yiannis Haralambous \pkgname{ymath}\ctan{ymath} package for its extensible wide accents. 
% not loaded? 
%    \begin{macrocode}
\newif\ifYH
\newcommand\YH{yhmath}
\IfStyFileExists{yhmath}
  {\YHtrue
   \let\origRequirePackage=\RequirePackage    % We don't want amsmath loaded.
   \def\RequirePackage##1{}
   \RequirePackage{yhmath}
   \let\RequirePackage=\origRequirePackage
  }
  {}
%    \end{macrocode}

%

%
% \section{The accents package}
%
% If we have the \pkgname{accents}\ctan{accents} package \citep{accents}, use it (for an example in the section
% on constructing new symbols). Please do note that you need to use the
% right command name if we have restored it. Do note that the package redeclares
%\index{accents (package commands)>\ttfamily\string\underaccent}%
%\index{accents (package commands)>\ttfamily\string\ring}%
%\index{accents (package commands)>\ttfamily\string\undertilde}%
%\index{accents (package commands)>\ttfamily\string\dddot}%
%\index{accents (package commands)>\ttfamily\string\ddddot}%
%    \begin{macrocode}
\newif\ifACCENTS
\IfStyFileExists{accents}
  {\ACCENTStrue
   \savesymbol{undertilde}
   \savesymbol{dddot}
   \savesymbol{ddddot}
   \RequirePackage{accents}
   \restoresymbol{ACCENTS}{undertilde}
   \restoresymbol{ACCENTS}{dddot}
   \restoresymbol{ACCENTS}{ddddot}
  }
  {}   
%    \end{macrocode}
%
% \subsection{mathrsfs}
%
%  The package \pkgname{mathrsfs} provides calligraphic style fonts.
%  ^^A\mathscr{A B C D E F G}
% \begin{macro}{\mathscr}
%    \begin{macrocode}
\IfStyFileExists{mathrsfs}
  {\newcommand{\mathscr}[1]{\mbox{\usefont{U}{rsfs}{m}{n}##1}}}
  {}
%    \end{macrocode}
% \end{macro}
%
% \section{txfonts}
% 
% pxfonts relies on txfonts (I think), so either package can be loaded.
% Note that txfonts/pxfonts redefine every LaTeX and AMS character,
% which is not what we want.  As a result, we have to rely on some
% serious trickery to prevent our old characters from getting redefined.
% If we are running with XeTeX this has to be before AMS and other packages
% and on top of fontspec. 
%    \begin{macrocode}
\def\TX{txfonts}
%    \end{macrocode}
% 
%
% \subsection{mathabx}
%
% Here's a real problem child: mathabx, which also redefines virtually
% every symbol provided by LaTeX2e and AMS.  We have to resort to our
% most devious trickery to get mathabx to load properly.
%
%    \begin{macrocode}
%
%\newif\ifABX
%\def\ABX{\pkgname{mathabx}}
%\let\origDeclareMathSymbol=\DeclareMathSymbol
%\let\origDeclareMathDelimiter=\DeclareMathDelimiter
%\let\origDeclareMathRadical=\DeclareMathRadical
%\let\origDeclareMathAccent=\DeclareMathAccent
%
%  % Redefine \DeclareMathSymbol to stick "ABX" in front of each symbol name.
%  \renewcommand{\DeclareMathSymbol}[4]{%
%    \let\mathabx@undefine=\@gobble  % Undefining symbols causes all sorts of problems for us.
%    \edef\newname{\expandafter\@gobble\string#1}
%    \ifx\newname\@empty
%    \else
%      \edef\newname{ABX\newname}
%      \expandafter\origDeclareMathSymbol\expandafter{%
%        \csname\newname\endcsname}{#2}{#3}{#4}%
%    \fi
%  }
%  % Do the same for \DeclareMathDelimiter.
%  \def\DeclareMathDelimiter#1{%
%    \edef\newname{\expandafter\@gobble\string#1}
%    \def\eatfour##1##2##3##4{}%
%    \def\eatfive##1##2##3##4##5{}%
%    \ifx\newname\@empty
%      \if\relax\noexpand#1%
%        \def\next{\eatfive}
%      \else
%        \def\next{\eatfour}
%      \fi
%    \else
%      \edef\newname{ABX\newname}
%      \def\next{%
%        \expandafter\origDeclareMathDelimiter\expandafter{%
%          \csname\newname\endcsname}}
%    \fi
%    \next
%  }
%  % Do the same for \DeclareMathAccent.
%  \renewcommand{\DeclareMathAccent}[4]{%
%    \edef\newname{\expandafter\@gobble\string#1}
%    \ifx\newname\@empty
%    \else
%      \edef\newname{ABX\newname}
%      \expandafter\origDeclareMathAccent\expandafter{%
%        \csname\newname\endcsname}{#2}{#3}{#4}%
%    \fi
%  }
%  % Redefine \DeclareMathRadical to do nothing.
%  \renewcommand{\DeclareMathRadical}[5]{}
%
%\let\proofmode=1
%\RequirePackage{mathabx}
%\IfStyFileExists{mathabx}
%  {\ABXtrue
%   \savesymbol{not} \savesymbol{widering}\savesymbol{Moon}
%   \savesymbol{notowner} \savesymbol{iint} \savesymbol{iiint}
%   \savesymbol{oint} \savesymbol{oiint} \savesymbol{bigboxperp}
%   \savesymbol{bigoperp} \savesymbol{boxedcirc} \savesymbol{boxeddash}
%   \savesymbol{boxeedast} \savesymbol{boxperp} \savesymbol{boy}
%   \savesymbol{Cap} \savesymbol{centerdot} \savesymbol{circledast}
%   \savesymbol{circledcirc} \savesymbol{circleddash} \savesymbol{Cup}
%   \savesymbol{curvearrowtopleft} \savesymbol{curvearrowtopleftright}
%   \savesymbol{curvearrowtopright} \savesymbol{doteqdot}
%   \savesymbol{geqslant} \savesymbol{gets} \savesymbol{girl}
%   \savesymbol{Join} \savesymbol{land} \savesymbol{leqslant}
%   \savesymbol{looparrowupleft} \savesymbol{looparrowupright}
%   \savesymbol{lor} \savesymbol{lsemantic}
%   \savesymbol{mayaleftdelimiter} \savesymbol{mayarightdelimiter}
%   \savesymbol{ndivides} \savesymbol{nequiv} \savesymbol{ngeqslant}
%   \savesymbol{ni} \savesymbol{nleqslant} \savesymbol{notni}
%   \savesymbol{notowns} \savesymbol{notsign} \savesymbol{operp}
%   \savesymbol{rsemantic} \savesymbol{sqCap} \savesymbol{sqCup}
%   \savesymbol{to} \savesymbol{ulsh} \savesymbol{ursh}
%   \savesymbol{overbrace} \savesymbol{underbrace}
%   \savesymbol{overgroup} \savesymbol{undergroup}
%   \savesymbol{dddot} \savesymbol{ddddot}
%
%   \RequirePackage{mathabx}
%
%   \restoresymbol{ABX}{not} \restoresymbol{ABX}{widering}
%   \restoresymbol{ABX}{Moon} \restoresymbol{ABX}{notowner}
%   \restoresymbol{ABX}{iint} \restoresymbol{ABX}{iiint}
%   \restoresymbol{ABX}{oint} \restoresymbol{ABX}{oiint}
%   \restoresymbol{ABX}{bigboxperp} \restoresymbol{ABX}{bigoperp}
%   \restoresymbol{ABX}{boxedcirc} \restoresymbol{ABX}{boxeddash}
%   \restoresymbol{ABX}{boxeedast} \restoresymbol{ABX}{boxperp}
%   \restoresymbol{ABX}{boy} \restoresymbol{ABX}{Cap}
%   \restoresymbol{ABX}{centerdot} \restoresymbol{ABX}{circledast}
%   \restoresymbol{ABX}{circledcirc} \restoresymbol{ABX}{circleddash}
%   \restoresymbol{ABX}{Cup} \restoresymbol{ABX}{curvearrowtopleft}
%   \restoresymbol{ABX}{curvearrowtopleftright}
%   \restoresymbol{ABX}{curvearrowtopright}
%   \restoresymbol{ABX}{doteqdot} \restoresymbol{ABX}{geqslant}
%   \restoresymbol{ABX}{gets} \restoresymbol{ABX}{girl}
%   \restoresymbol{ABX}{Join} \restoresymbol{ABX}{land}
%   \restoresymbol{ABX}{leqslant} \restoresymbol{ABX}{looparrowupleft}
%   \restoresymbol{ABX}{looparrowupright} \restoresymbol{ABX}{lor}
%   \restoresymbol{ABX}{lsemantic}
%   \restoresymbol{ABX}{mayaleftdelimiter}
%   \restoresymbol{ABX}{mayarightdelimiter}
%   \restoresymbol{ABX}{ndivides} \restoresymbol{ABX}{nequiv}
%   \restoresymbol{ABX}{ngeqslant} \restoresymbol{ABX}{ni}
%   \restoresymbol{ABX}{nleqslant} \restoresymbol{ABX}{notni}
%   \restoresymbol{ABX}{notowns} \restoresymbol{ABX}{notsign}
%   \restoresymbol{ABX}{operp} \restoresymbol{ABX}{rsemantic}
%   \restoresymbol{ABX}{sqCap} \restoresymbol{ABX}{sqCup}
%   \restoresymbol{ABX}{to} \restoresymbol{ABX}{ulsh}
%   \restoresymbol{ABX}{ursh} \restoresymbol{ABX}{overbrace}
%   \restoresymbol{ABX}{underbrace} \restoresymbol{ABX}{overgroup}
%   \restoresymbol{ABX}{undergroup}
%   \restoresymbol{ABX}{dddot} \restoresymbol{ABX}{ddddot}
%  }
%  {}
%\let\DeclareMathAccent=\origDeclareMathAccent
%\let\DeclareMathRadical=\origDeclareMathRadical
%\let\DeclareMathDelimiter=\origDeclareMathDelimiter
%\let\DeclareMathSymbol=\origDeclareMathSymbol
%\ifABX
%  % Define only those accents that are not defined elsewhere.
%  \DeclareMathAccent{\widecheck}     {0}{mathx}{"71}
%  \DeclareMathAccent{\widebar}       {0}{mathx}{"73}
%  \DeclareMathAccent{\widearrow}     {0}{mathx}{"74}
%  % Redefine all let-bound symbols.
%  \let\ABXcenterdot=\ABXsqbullet
%  \let\ABXcircledast=\ABXoasterisk
%  \let\ABXcircledcirc=\ABXocirc
%  % Ensure that \ABXwidering invokes \ABXwideparen, not \wideparen.
%  \def\ABXwidering#1{\ring{\ABXwideparen{#1}}}
%  % Redefine commands that are used by other commands.
%  \DeclareMathSymbol{\ABXnotsign}    {3}{matha}{"7F}
%  \DeclareMathSymbol{\ABXvarnotsign} {3}{mathb}{"7F}
%  \DeclareMathSymbol{\ABXnotowner}   {3}{matha}{"53}
%  
%    \def\ABXoverbrace{\overbrace@{\bracefill\ABXbraceld\ABXbracemd\ABXbracerd\ABXbracexd}}
%    \def\ABXunderbrace{\underbrace@{\bracefill\ABXbracelu\ABXbracemu\ABXbraceru\ABXbracexu}}
%    \def\ABXovergroup{\overbrace@{\bracefill\ABXbraceld{}\ABXbracerd\ABXbracexd}}
%    \def\ABXundergroup{\underbrace@{\bracefill\ABXbracelu{}\ABXbraceru\ABXbracexu}}
%  
%  % Define a command to select the mathb font.
%  \newcommand{\mathbfont}{\usefont{U}{mathb}{m}{n}}
%\fi    % ABX test
%%
%    \end{macrocode}
%
%   
%
% \section{mathtools}
%
% 
%    \begin{macrocode}
%
\newif\ifMTOOLS
\newcommand\MTOOLS{\pkgname{mathtools}}
% \RequirePackage{mathtools}
 \RequirePackage{suffix}
\IfStyFileExists{mathtools}
  {\MTOOLStrue
   \savesymbol{xleftrightarrow} \savesymbol{xLeftarrow}
   \savesymbol{xRightarrow} \savesymbol{xLeftrightarrow}
   \savesymbol{xrightharpoondown} \savesymbol{xrightharpoonup}
   \savesymbol{xleftharpoondown} \savesymbol{xleftharpoonup}
   \savesymbol{xleftrightharpoons} \savesymbol{xrightleftharpoons}
   \savesymbol{xhookleftarrow} \savesymbol{xhookrightarrow}
   \savesymbol{xmapsto} \savesymbol{underbracket}
   \savesymbol{overbracket} \savesymbol{lparen} \savesymbol{rparen}
   \savesymbol{dblcolon} \savesymbol{coloneqq} \savesymbol{Coloneqq}
   \savesymbol{coloneq} \savesymbol{Coloneq} \savesymbol{eqqcolon}
   \savesymbol{Eqqcolon} \savesymbol{eqcolon} \savesymbol{Eqcolon}
   \savesymbol{colonapprox} \savesymbol{Colonapprox}
   \savesymbol{colonsim} \savesymbol{Colonsim} \savesymbol{overbrace}
   \savesymbol{underbrace}

   % The mathtools package delays the definitions of some of its symbols
   % to the \begin{document}.  We redefine \AtBeginDocument to force
   % mathtools to define everything immediately.
   \let\origAtBeginDocument=\AtBeginDocument
   \def\AtBeginDocument##1{##1}
   \usepackage[donotfixamsmathbugs]{mathtools}
   \let\AtBeginDocument=\origAtBeginDocument

   \restoresymbol{MTOOLS}{xleftrightarrow}
   \restoresymbol{MTOOLS}{xLeftarrow}
   \restoresymbol{MTOOLS}{xRightarrow}
   \restoresymbol{MTOOLS}{xLeftrightarrow}
   \restoresymbol{MTOOLS}{xrightharpoondown}
   \restoresymbol{MTOOLS}{xrightharpoonup}
   \restoresymbol{MTOOLS}{xleftharpoondown}
   \restoresymbol{MTOOLS}{xleftharpoonup}
   \restoresymbol{MTOOLS}{xleftrightharpoons}
   \restoresymbol{MTOOLS}{xrightleftharpoons}
   \restoresymbol{MTOOLS}{xhookleftarrow}
   \restoresymbol{MTOOLS}{xhookrightarrow}
   \restoresymbol{MTOOLS}{xmapsto}
   \restoresymbol{MTOOLS}{underbracket}
   \restoresymbol{MTOOLS}{overbracket} \restoresymbol{MTOOLS}{lparen}
   \restoresymbol{MTOOLS}{rparen} \restoresymbol{MTOOLS}{dblcolon}
   \restoresymbol{MTOOLS}{coloneqq} \restoresymbol{MTOOLS}{Coloneqq}
   \restoresymbol{MTOOLS}{coloneq} \restoresymbol{MTOOLS}{Coloneq}
   \restoresymbol{MTOOLS}{eqqcolon} \restoresymbol{MTOOLS}{Eqqcolon}
   \restoresymbol{MTOOLS}{eqcolon} \restoresymbol{MTOOLS}{Eqcolon}
   \restoresymbol{MTOOLS}{colonapprox}
   \restoresymbol{MTOOLS}{Colonapprox}
   \restoresymbol{MTOOLS}{colonsim} \restoresymbol{MTOOLS}{Colonsim}
   \restoresymbol{MTOOLS}{overbrace} \restoresymbol{MTOOLS}{underbrace}

   % Some of the above are defined in terms of \dblcolon.  At the time
   % of this writing it doesn't seem like any other package uses the
   % name \dblcolon so it should be safe to retain its mathtools
   % definition.
   \let\dblcolon=\MTOOLSdblcolon
  }
  {}
%    \end{macrocode}
 \PassOptionsToPackage{leqno}{mathtools}
% \section{empheq}
%
%  This is not on ctan and I removed it
%    \begin{macrocode}
%^^A\RequirePackage[allowspaces]{empheq} %defines harpoon macros
%    \end{macrocode}
%
% \section{Fractions}
% We load two packages for fractions, but our preference is to use the
% \pkgname{xfrac}. We load \pkgname{nicefrac} in case anyone disagrees.
% 
% \subsection{The nicefrac and xfrac package}
% The package \pkgname{xfrac} produces better fractions. 
% The \pkgname{nicefrac} is an older package. I am told some people still use it.
%    \begin{macrocode}
\RequirePackage{nicefrac}
\RequirePackage{xfrac}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% Many of the tools shown in this manual can be turned on and off by 
% setting a switch to
% either true or false. In all cases it is done with the command 
% |\mathtoolsset|. A typical
%  use could be something like
% \begin{equation}
%  a=c+d
% \end{equation}
%
% This provides a useful way to hook into the package options
% using our setting interface.
%
%    \begin{macrocode}
\cxset{tag left bracket/.store in = \leftbracket@cx,
         tag right bracket/.store in = \rightbracket@cx,
         tag font-weight/.store in = \tagfontweight@cx,
         mathtool center colon/.store in=\centeredcolon@cx}
%
\cxset{tag left bracket =[,
         tag right bracket =],
         tag font-weight=\textbf,
         mathtool center colon=false} 

\newtagform{brackets}[\tagfontweight@cx]{\leftbracket@cx}%
           {\rightbracket@cx}
\mathtoolsset{centercolon=true,mathic}%italic correction in math
\numberwithin{equation}{section}
%    \end{macrocode}
%
% HAS ERRORS FIX ME
% 
% \begin{macro}{amssymb}
% \begin{macro}{amsthm}
% \begin{macro}{amsopn}
%    \begin{macrocode}
\RequirePackage{amssymb}[2002/01/22]
\RequirePackage{amsthm}[2002/01/22]
\RequirePackage{amsopn}
\RequirePackage{amscd}
% add more tabs for bmatrix
\setcounter{MaxMatrixCols}{20}
%    \end{macrocode}
%
% \subsection{dsfont}
%
% The \pkgname{dsfont} which is available in MikTeX as \pkgname{dstroke} can be useful
% for typesetting the mathematical symbols for the natural numbers
% \person{Olaf}{Kummer} \citep{dsfont}. 
% It breaks XeTeX and LuaTeX so we only load it for
% LaTeX.
% 
%    \begin{macrocode} 
\ifengine{}{}{% 
 \IfStyFileExists{dsfont}%
   {\newcommand{\mathds}[1]{\mbox{\usefont{U}{dsrom}{m}{n}##1}}
    \newcommand{\mathdsss}[1]{\mbox{\usefont{U}{dsss}{m}{n}##1}}}
   {}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% The package |stmaryrd| can be used for additional symbols. 
%    \begin{macrocode}
%		\RequirePackage{stmaryrd}
%    \end{macrocode}
% 
% The \pkgname{amscd} is probably not useful at all as people are
% moving to graphical programs such as TikZ for their commutative
% diagrams.
%  
% \begin{macro}{empheq} 
%    \begin{macrocode}
%        \RequirePackage{empheq}
%    \end{macrocode}
% \end{macro}
%
%This package\footnote{The package is part of the \texttt{mh}-bundle 
%of Morten H\o gholm (\href{http://www.ctan.org/tex-archive/macros/latex/contrib/mh/}{CTAN://macros/latex/contrib/mh/}).} 
%supports different frames for math environments of the 
% AmSmath
%package. It doesn't support  all the environments from %standard \LaTeX{} which 
% are not modified by \AmS{}math.
%
%With the optional argument of the empheq
%the preferred box type
%can be specified. A simple one is |fbox|.
%
%  ^^A\begin{empheq}[box=\fbox]{align}
%	^^Af(x)=\int_1^{\infty}\frac{1}{x^2}\,\mathrm{d}x=1
%  ^^A\end{empheq}

% \subsection{xpfeil}
%
%  The package \pkgname{extpfeil} loads \pkgname{stmaryd} with limited options
%  we temporarily make |\RequirePckage| a no-op to prevent
%   LaTeX from complaining.
% 
% Manually define every symbol in \pkgname{cmll} so we don't have to use any more
% math alphabets.

%    \begin{macrocode} 
% feyn provides yet another math font for which we have no room.
% Fortunately, it's relatively easy to define all of its symbols in
% terms of a text font.
\newif\ifFEYN
\newcommand\FEYN{\pkgname{feyn}}
\IfStyFileExists{feyn}
  {\FEYNtrue
   \let\origProvidesPackage=\ProvidesPackage
   \def\ProvidesPackage##1[##2]{\origProvidesPackage{##1}[##2]\endinput}
   \savesymbol{filename}
   \usepackage{feyn}
   \restoresymbol{FEYN}{filename}
   \let\ProvidesPackage=\origProvidesPackage
   \DeclareFontFamily{OMS}{textfeyn}{\skewchar\font'000}
   \DeclareFontShape{OMS}{textfeyn}{m}{n}{%
     <-10.5>feyntext10%
     <10.5-11.5>feyntext11%
     <11.5->feyntext12%
   }{}
   \DeclareRobustCommand{\feyn}[1]{{\usefont{OMS}{textfeyn}{m}{n}##1}}
   \DeclareRobustCommand{\wfermion}{\feyn{\char"64}}
   \DeclareRobustCommand{\hfermion}{\feyn{\char"6B}}
   \DeclareRobustCommand{\shfermion}{\feyn{\char"6C}}
   \DeclareRobustCommand{\whfermion}{\feyn{\char"6D}}
   \DeclareRobustCommand{\gvcropped}{\feyn{\char"07}}
   \DeclareRobustCommand{\bigbosonloop}{\feyn{\char"7B}}
   \DeclareRobustCommand{\smallbosonloop}{\feyn{\char"7C}}
   \DeclareRobustCommand{\bigbosonloopA}{\feyn{\char"5B}}
   \DeclareRobustCommand{\smallbosonloopA}{\feyn{\char"5C}}
   \DeclareRobustCommand{\bigbosonloopV}{\feyn{\char"1B}}
   \DeclareRobustCommand{\smallbosonloopV}{\feyn{\char"1C}}
  }
  {}
\newif\ifULSY
\newcommand\ULSY{\pkgname{ulsy}}
\IfStyFileExists{ulsy}
  {\ULSYtrue\usepackage{ulsy}}
  {}

%\newif\ifIGO
%\newcommand\IGO{\pkgname{igo}}
%\RequirePackage{igo}
%\IfStyFileExists{igo}
%  {\savesymbol{black}
%   \savesymbol{white}
%   \savesymbol{repeat}
%   % Don't let igo redefine all of the font-size commands.
%   \savesymbol{scriptsize}\newcommand{\scriptsize}{}
%   \savesymbol{tiny}\newcommand{\tiny}{}
%   \savesymbol{large}\newcommand{\large}{}
%   \savesymbol{Large}\newcommand{\Large}{}
%   \savesymbol{LARGE}\newcommand{\LARGE}{}
%   \savesymbol{huge}\newcommand{\huge}{}
%   \savesymbol{Huge}\newcommand{\Huge}{}
%   \IGOtrue\usepackage{igo}
%   \restoresymbol{IGO}{black}
%   \restoresymbol{IGO}{white}
%   \restoresymbol{IGO}{repeat}
%   \restoresymbol{IGO}{tiny}
%   \restoresymbol{IGO}{large}
%   \restoresymbol{IGO}{Large}
%   \restoresymbol{IGO}{LARGE}
%   \restoresymbol{IGO}{huge}
%   \restoresymbol{IGO}{Huge}
%   % Define a version of \whitestone and \blackstone that avoid
%   % bracketed arguments.
%   \DeclareRobustCommand{\igowhitestone}[1]{\whitestone[##1]}
%   \DeclareRobustCommand{\igoblackstone}[1]{\blackstone[##1]}
%  }
%  {}
%

\newif\ifCEQ
\newcommand\CEQ{\pkgname{colonequals}}
\IfStyFileExists{colonequals}
  {\savesymbol{colonapprox}
   \savesymbol{colonsim}
   \CEQtrue
   \usepackage{colonequals}
   \restoresymbol{CEQ}{colonapprox}
   \restoresymbol{CEQ}{colonsim}
  }
  {}
%    \end{macrocode}
%
% \section{Linear Logic Symbols cmll}
% 
% The \pkgname{cmll} font defines a handful of symbols useful in linear logic that were not defined in other fonts and packages. The package needs to be loaded
% after txtfonts. We rename some of 
%
%   \CMLLbigparr 
%   \CMLLbigwith
%
%    \begin{macrocode}
\newif\ifCMLL
\newcommand\CMLL{\pkgname{cmll}}
\IfStyFileExists{cmll}
  {\CMLLtrue
   \newcommand*{\textCMLL}[1]{{\usefont{U}{cmllr}{m}{n}##1}}
   \DeclareRobustCommand{\CMLLparr}{\textCMLL{\char0}}
   \DeclareRobustCommand{\CMLLshpos}{\textCMLL{\char1}}
   \DeclareRobustCommand{\CMLLshneg}{\textCMLL{\char2}}
   \DeclareRobustCommand{\CMLLshift}{\textCMLL{\char3}}
   \DeclareRobustCommand{\CMLLcoh}{\textCMLL{\char4}}
   \DeclareRobustCommand{\CMLLscoh}{\textCMLL{\char5}}
   \DeclareRobustCommand{\CMLLincoh}{\textCMLL{\char6}}
   \DeclareRobustCommand{\CMLLsincoh}{\textCMLL{\char7}}
   \DeclareRobustCommand{\CMLLbigwith}{\raisebox{2ex}{\textCMLL{\char8}}}
   \DeclareRobustCommand{\CMLLbigparr}{\raisebox{2ex}{\textCMLL{\char10}}}
  }
  {}
%% Stmaryd package
 \newif\ifST
 \newcommand\ST{\pkgname{stmaryrd}}
 \IfStyFileExists{stmaryrd}
  {\STtrue
   \savesymbol{lightning}
   \savesymbol{bigtriangleup} \savesymbol{bigtriangledown}
  % \RequirePackage{stmaryrd}
   \restoresymbol{ST}{lightning}
   \restoresymbol{ST}{bigtriangleup} \restoresymbol{ST}{bigtriangledown}
  }
  {} 
\newif\ifXPFEIL
\newcommand\XPFEIL{\pkgname{extpfeil}}
\IfStyFileExists{extpfeil}
  {\XPFEILtrue
   % extpfeil tries to do a \RequirePackage of stmaryrd with
   % conflicting options from what we used to load stmaryd.  We
   % therefore temporarily make \RequirePackage a no-op to prevent LaTeX
   % from complaining.
   \let\origRequirePackage=\RequirePackage
   \renewcommand*{\RequirePackage}[2][]{}
   \savesymbol{xlongequal}
   \savesymbol{xmapsto}
   \RequirePackage{extpfeil}
   \restoresymbol{XPFEIL}{xlongequal}
   \restoresymbol{XPFEIL}{xmapsto}
   \let\RequirePackage=\origRequirePackage
  }
  {}
%    \end{macrocode}
%   
% \section{euscript} 
%  
%  For calligraphic math fonts we load the package \pkgname{euscript}. 
%
%  The expected normal use of the Euler Script alphabet is as a substitute
%  for the Computer Modern calligraphic alphabet found in |cmsy|. Therefore we
%  change the meaning of \cmd{\mathcal}. The package uses the Euler script alphabet found in |cmy|
%  and changes the meaning of \cmd{\mathcal} \seedocs{euscript}
%
% |\[ \mathcal{A} = \EuScript{A} \neq \CMcal{A} \] |
% 
%    \begin{macrocode}
\iffalse
\newif\ifEU
\IfStyFileExists{euscript}
  {\EUtrue\RequirePackage[mathcal]{euscript}
   \renewcommand{\mathcal}[1]{\mbox{\usefont{U}{eus}{m}{n}##1}}
  }
  {\let\CMcal\mathcal}
\fi
%    \end{macrocode}
%
% \section{Blackboard fonts}
% \subsection{The bm and bbm fonts}
% \begin{macro}{bm}
% \begin{macro}{bbm}
% These two packages provide bold math fonts. If we have the bm package, use it (to show how to typeset bold math).
% ^^A\mathbbmtt{\ALPHABET} 
% ^^AThe characters can be also be used for subscripts and superscripts.
% ^^A$M_{\mathbbm{i}}$. The package is the work of \person{Torsten}{Hilbrich}
%
%    \begin{macrocode}

\newif\ifBM
\IfStyFileExists{bm}
  {\BMtrue
   \RequirePackage{bm}
  }
  {}  
\IfStyFileExists{bbm}
  {\newcommand{\mathbbm}[1]{\mbox{\usefont{U}{bbm}{m}{n}##1}}
   \newcommand{\mathbbmss}[1]{\mbox{\usefont{U}{bbmss}{m}{n}##1}}
   \newcommand{\mathbbmtt}[1]{\mbox{\usefont{U}{bbmtt}{m}{n}##1}}}
  {}
%    \end{macrocode}
%
%    \begin{macrocode}
\IfStyFileExists{bbold}
  {\newcommand{\BBmathbb}[1]{\mbox{\usefont{U}{bbold}{m}{n}##1}}
   % We have to manually define all of the symbols we care about.
   \newcommand{\BBsym}[1]{\ensuremath{\BBmathbb{\char##1}}}
   \newcommand{\Langle}{\BBsym{`<}}
   \newcommand{\Lbrack}{\BBsym{`[}}
   \newcommand{\Lparen}{\BBsym{`(}}
   \newcommand{\bbalpha}{\BBsym{"0B}}
   \newcommand{\bbbeta}{\BBsym{"0C}}
   \newcommand{\bbgamma}{\BBsym{"0D}}
   \newcommand{\Rparen}{\BBsym{`)}}
   \newcommand{\Rbrack}{\BBsym{`]}}
   \newcommand{\Rangle}{\BBsym{"3E}}
  }
  {}
%  The font calligra provides a calligraphic font. Calligra can be found on the CTAN
%  in the directory tex-archive/fonts/calligra. This package provides means to
%  use this font in \latexe \citep{calligra}.\idxfont{Calligra}
%  idxfont{Calligra (font)>\string\textcalligra}
%
\IfStyFileExists{calligra}
  {\savesymbol{filename}
   \RequirePackage{calligra}
   \restoresymbol{CAL}{filename}
  }
  {}
%    \end{macrocode}
%
%
% \section{Chancery}
%    \begin{macrocode}
\IfStyFileExists{chancery}
  {\newcommand{\mathpzc}[1]{\mbox{\usefont{OT1}{pzc}{m}{it}##1}}}
  {}
%    \end{macrocode}
%
% \section{mbboard}
%
%  
%    \begin{macrocode}
\IfStyFileExists{mbboard}
  {\newcommand{\MBBmathbb}[1]{\mbox{\usefont{OT1}{mbb}{m}{n}##1}}}
  {}
\ifx\MBBmathbb\undefined
\else
  % Define only the symbols we actually use.
  \newcommand{\bbnabla}{\MBBmathbb{\char"9A}}
  \newcommand{\bbdollar}{\MBBmathbb{\char"24}}
  \newcommand{\bbeuro}{\MBBmathbb{\char"FB}}
  \newcommand{\bbpe}{\MBBmathbb{\char"D4}}
  \newcommand{\bbqof}{\MBBmathbb{\char"D7}}
  \newcommand{\bbyod}{\MBBmathbb{\char"C9}}
  \newcommand{\bbfinalnun}{\MBBmathbb{\char"CF}}

  % The following was copied from mbboard.sty.
  \DeclareFontFamily{OT1}{mbb}{\hyphenchar\font45}
  \DeclareFontShape{OT1}{mbb}{m}{n}{
        <5> <6> <7> <8> <9> <10> gen * mbb
        <10.95> mbb10 <12> <14.4> mbb12 <17.28> <20.74> <24.88> mbb17
        }{}
\fi

% \mathfrak is defined by a number of packages, to check for it by name.
\ifx\mathfrak\undefined
\else
  \renewcommand{\mathfrak}[1]{\mbox{\fontencoding{U}\fontfamily{euf}\selectfont#1}}
\fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{upgreek} 
%
% This package by Walter Schmidt provides fonts
% and commands for an upright Greek alphabet. It makes the upright
% Greek characters from the `Euler'  or `Adobe Symbol' typefaces available as 
% math symbols. It defaults to the Euler option. The package offers three
% options |Euler|, |Symbol| and |Symbolsmallscale|. This is in a bundle
% called |was|, so there are problems downloading it automatically via MikTeX.
% CHECK
% 
%    \begin{macrocode}
\newif\ifUPGR
    \RequirePackage[Symbol]{upgreek}
%    \end{macrocode}
% \end{macro}
%
% \[
%  \begin{array}{lll}
%   \upalpha  &\upbeta    &\upgamma\\ 
%   \updelta  &\upepsilon &\upzeta\\
%   \upeta    &\uptheta   &\upiota \\
%   \upkappa  &\uplambda   &\upmu\\
%   \upnu     &\upxi      &\uppi\\
%   \uprho    &\upsigma  &\uptau\\
%   \upupsilon &\upphi   &\upchi\\
%   \uppsi     &\upomega  &\upvarepsilon\\
%   \upvartheta &\upvarpi  &\\
%  \end{array}
% \]
%
% 
% 
%  \section{Special Symbols}
%
%  The next section of the package, deals exclusively for packages that
%  handle symbols. The best guide to such symbols is 
%  \textit{The Comprehensive LaTeX Symbols Guide}. One needs to distinguish
%  a number of different types of symbols required for a manual and it is
%  a difficult exercise to make a selection. Another issue with symbols
%  is that there is a bit of overlap between the various fonts and commands
%  as to be expected.
%
%  \subsection{ASCII}
%
%  The \pkgname{ascii} will typeset a document in typewriter
%  font. We only need some of its commands to print
%  the ASCI table from 1-32. Can you imagine conflicting with 
%  siunix!!!
%    \begin{macrocode}
\let\oldSI\SI
\let\SI\undefined
\newif\ifASCII
\newcommand\ASCII{\pkgname{ascii}}
\IfStyFileExists{ascii}
	  {\ASCIItrue
	   \savesymbol{HT}
	   \RequirePackage{ascii}
	   \restoresymbol{ascii}{HT}
	   \let\SI\undefined
	  }
	  {}
\let\SI\oldSI	  
%    \end{macrocode}
%
%  \subsection{The china2e package}
%
%  The \pkgname{china2e} is a fairly old package, but can provide some
%  useful commands. It also provides helpful Chinese lunar symbols, although
%  now with specialized Chinese packages, these is fairly redundant for any
%  major use.
%
%  Of interest is some useful maths commands. \cmd{\Natural} \cmd{\NATURAL}
%  {\huge\color{thered}\Fire} \seedocs{china}.
% 
%    \begin{macrocode}
\newif\ifCHINA
\newcommand\CHINA{%
  \Chinasym
  \index{china2e=\textsf{china2e} (package)}%
  \index{packages>china2e=\textsf{china2e}}}
%  
\IfStyFileExists{china2e}
  {\CHINAtrue
   \savesymbol{Info}
   \savesymbol{Earth}
   \savesymbol{Telephone}
   \savesymbol{Fire}
   \savesymbol{vdots}
   \let\origDeclareSymbolFont=\DeclareSymbolFont
   \let\origDeclareMathSymbol=\DeclareMathSymbol
   \renewcommand{\DeclareSymbolFont}[5]{}
   \renewcommand{\DeclareMathSymbol}[4]{%
     \DeclareRobustCommand{##1}{{\uchr##4}}}
   \usepackage{china2e}
   \let\DeclareSymbolFont=\origDeclareSymbolFont
   \let\DeclareMathSymbol=\origDeclareMathSymbol
   \restoresymbol{china}{Info}
   \restoresymbol{china}{Earth}
   \restoresymbol{china}{Telephone}
   \restoresymbol{china}{Fire}
   \restoresymbol{CHINA}{vdots}
  }
  {}
%    \end{macrocode}
%
%  \subsection{harpoon}
%  This package is quite old 1994 by Tobias Kuipers.
%  \overleftharp{This is some text}, 
%  \overrightharp {Other text}. I do not know if any ever uses it.
%
%    \begin{macrocode}
\newif\ifHARP
\newcommand\HARP{\pkgname{harpoon}}
\IfStyFileExists{harpoon}
  {\HARPtrue\usepackage{harpoon}}
  {}

%    \end{macrocode}
%
% \section{texcomp and mathcomp}
%
% We use the \pkg{texcomp} package for special symbols, such as |\checkmark|
%  \( \mho \Diamond \leadsto \rhd \diamond \Diamond \). The sort of the standard package
% latexsym is not loaded as it duplicates functionality of the if one makes use of the packages |amsfonts| or |amssymb|.
%
% \begin{macro}{textcomp} 
% \begin{macro}{mathcomp} The package |textcomp| is part of the \LaTeXe
% distribution. The description of the package
% on ctan can give the erroneous idea that it is obsolete; on the contrary 
% is part of the original distribution.textcomp is not obsolete, it's just not distributed as extra package any more since it's distributed with the basic LaTeX distribution. The \pkg{mathcomp} package defines macros for using some of these text... symbols with math and the abbreviation tc...
%
%  The symbols are used by calling them by their name. E.g. \ifxetex\else\textleaf\fi:
%  \verb|\textleaf|.
%  
%  In mathematics the package \verb|mathcomp| works. Then the prefix
%  \verb|text| is replaced by \verb|tc|, for \emph{t}ext\emph{c}omp:
%  |tcohm|  
% 
% The |mathcomp| package takes one option to describe the
% font to be used. We use |rmdfault| as the option to default to
% the \cs{rmdefault} font.
% 
%    \begin{macrocode}
%  Redefine the LaTeX commands that are replaced by textcomp.
%  This was swiped right out of ltoutenc.dtx, but with "\text..."
%  changed to "\ltext...". This also conflicts with fontspec
%  better to handle the errors 
\DeclareTextCommandDefault{\ltextcopyright}{\textcircled{c}}
\DeclareTextCommandDefault{\ltextregistered}{\textcircled{\scshape r}}
\DeclareTextCommandDefault{\ltexttrademark}{\textsuperscript{TM}}
\DeclareTextCommandDefault{\ltextordfeminine}{\textsuperscript{a}}
\DeclareTextCommandDefault{\ltextordmasculine}{\textsuperscript{o}}
%
\DeclareTextSymbol{\textcentoldstyle}{TS1}{'213}
\DeclareTextSymbolDefault{\textcentoldstyle}{TS1}
\DeclareTextSymbol{\textdollaroldstyle}{TS1}{'212}
\DeclareTextSymbolDefault{\textdollaroldstyle}{TS1}
\DeclareTextSymbol{\textguarani}{TS1}{'220}
\DeclareTextSymbolDefault{\textguarani}{TS1}
% Not many fonts support these code-points yet.
% So leave these undefined at present.  from fontspec

\def\UTFDeclarations{%
  \DeclareUTFcharacter[\UTFencname]{x3008}{\textlangle}
  \DeclareUTFcharacter[\UTFencname]{x3009}{\textrangle}
  \DeclareUTFcharacter[\UTFencname]{x301A}{\textlbrackdbl}
  \DeclareUTFcharacter[\UTFencname]{x301B}{\textrbrackdbl}

% old-style numbers

  \DeclareUTFcharacter[\UTFencname]{xFF10}{\textzerooldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF11}{\textoneoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF12}{\texttwooldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF13}{\textthreeoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF14}{\textfouroldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF15}{\textfiveoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF16}{\textsixoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF17}{\textsevenoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF18}{\texteightoldstyle}
  \DeclareUTFcharacter[\UTFencname]{xFF19}{\textnineoldstyle}

% For circled letters and small numbers
%

  \DeclareEncodedCompositeCharacter{\UTFencname}{\textcircled}{20DD}{25EF}
  \DeclareUTFcomposite[\UTFencname]{x2460}{\textcircled}{1}
  \DeclareUTFcomposite[\UTFencname]{x2461}{\textcircled}{2}
  \DeclareUTFcomposite[\UTFencname]{x2462}{\textcircled}{3}
  \DeclareUTFcomposite[\UTFencname]{x2463}{\textcircled}{4}
  \DeclareUTFcomposite[\UTFencname]{x2464}{\textcircled}{5}
  \DeclareUTFcomposite[\UTFencname]{x2465}{\textcircled}{6}
  \DeclareUTFcomposite[\UTFencname]{x2466}{\textcircled}{7}
  \DeclareUTFcomposite[\UTFencname]{x2467}{\textcircled}{8}
  \DeclareUTFcomposite[\UTFencname]{x2468}{\textcircled}{9}
  \DeclareUTFcomposite[\UTFencname]{x2469}{\textcircled}{10}
  \DeclareUTFcomposite[\UTFencname]{x246A}{\textcircled}{11}
  \DeclareUTFcomposite[\UTFencname]{x246B}{\textcircled}{12}
  \DeclareUTFcomposite[\UTFencname]{x246C}{\textcircled}{13}
  \DeclareUTFcomposite[\UTFencname]{x246D}{\textcircled}{14}
  \DeclareUTFcomposite[\UTFencname]{x246E}{\textcircled}{15}
  \DeclareUTFcomposite[\UTFencname]{x246F}{\textcircled}{16}
  \DeclareUTFcomposite[\UTFencname]{x2470}{\textcircled}{17}
  \DeclareUTFcomposite[\UTFencname]{x2471}{\textcircled}{18}
  \DeclareUTFcomposite[\UTFencname]{x2472}{\textcircled}{19}
  \DeclareUTFcomposite[\UTFencname]{x2473}{\textcircled}{20}
  \DeclareUTFcomposite[\UTFencname]{x24B6}{\textcircled}{A}
  \DeclareUTFcomposite[\UTFencname]{x24B7}{\textcircled}{B}
  \DeclareUTFcomposite[\UTFencname]{x24B8}{\textcircled}{C}
  \DeclareUTFcomposite[\UTFencname]{x24B9}{\textcircled}{D}
  \DeclareUTFcomposite[\UTFencname]{x24BA}{\textcircled}{E}
  \DeclareUTFcomposite[\UTFencname]{x24BB}{\textcircled}{F}
  \DeclareUTFcomposite[\UTFencname]{x24BC}{\textcircled}{G}
  \DeclareUTFcomposite[\UTFencname]{x24BD}{\textcircled}{H}
  \DeclareUTFcomposite[\UTFencname]{x24BE}{\textcircled}{I}
  \DeclareUTFcomposite[\UTFencname]{x24BF}{\textcircled}{J}
  \DeclareUTFcomposite[\UTFencname]{x24C0}{\textcircled}{K}
  \DeclareUTFcomposite[\UTFencname]{x24C1}{\textcircled}{L}
  \DeclareUTFcomposite[\UTFencname]{x24C2}{\textcircled}{M}
  \DeclareUTFcomposite[\UTFencname]{x24C3}{\textcircled}{N}
  \DeclareUTFcomposite[\UTFencname]{x24C4}{\textcircled}{O}
  \DeclareUTFcomposite[\UTFencname]{x24C5}{\textcircled}{P}
  \DeclareUTFcomposite[\UTFencname]{x24C6}{\textcircled}{Q}
  \DeclareUTFcomposite[\UTFencname]{x24C7}{\textcircled}{R}
  \DeclareUTFcomposite[\UTFencname]{x24C8}{\textcircled}{S}
  \DeclareUTFcomposite[\UTFencname]{x24C9}{\textcircled}{T}
  \DeclareUTFcomposite[\UTFencname]{x24CA}{\textcircled}{U}
  \DeclareUTFcomposite[\UTFencname]{x24CB}{\textcircled}{V}
  \DeclareUTFcomposite[\UTFencname]{x24CC}{\textcircled}{W}
  \DeclareUTFcomposite[\UTFencname]{x24CD}{\textcircled}{X}
  \DeclareUTFcomposite[\UTFencname]{x24CE}{\textcircled}{Y}
  \DeclareUTFcomposite[\UTFencname]{x24CF}{\textcircled}{Z}
  \DeclareUTFcomposite[\UTFencname]{x24D0}{\textcircled}{a}
  \DeclareUTFcomposite[\UTFencname]{x24D1}{\textcircled}{b}
  \DeclareUTFcomposite[\UTFencname]{x24D2}{\textcircled}{c}
  \DeclareUTFcomposite[\UTFencname]{x24D3}{\textcircled}{d}
  \DeclareUTFcomposite[\UTFencname]{x24D4}{\textcircled}{e}
  \DeclareUTFcomposite[\UTFencname]{x24D5}{\textcircled}{f}
  \DeclareUTFcomposite[\UTFencname]{x24D6}{\textcircled}{g}
  \DeclareUTFcomposite[\UTFencname]{x24D7}{\textcircled}{h}
  \DeclareUTFcomposite[\UTFencname]{x24D8}{\textcircled}{i}
  \DeclareUTFcomposite[\UTFencname]{x24D9}{\textcircled}{j}
  \DeclareUTFcomposite[\UTFencname]{x24DA}{\textcircled}{k}
  \DeclareUTFcomposite[\UTFencname]{x24DB}{\textcircled}{l}
  \DeclareUTFcomposite[\UTFencname]{x24DC}{\textcircled}{m}
  \DeclareUTFcomposite[\UTFencname]{x24DD}{\textcircled}{n}
  \DeclareUTFcomposite[\UTFencname]{x24DE}{\textcircled}{o}
  \DeclareUTFcomposite[\UTFencname]{x24DF}{\textcircled}{p}
  \DeclareUTFcomposite[\UTFencname]{x24E0}{\textcircled}{q}
  \DeclareUTFcomposite[\UTFencname]{x24E1}{\textcircled}{r}
  \DeclareUTFcomposite[\UTFencname]{x24E2}{\textcircled}{s}
  \DeclareUTFcomposite[\UTFencname]{x24E3}{\textcircled}{t}
  \DeclareUTFcomposite[\UTFencname]{x24E4}{\textcircled}{u}
  \DeclareUTFcomposite[\UTFencname]{x24E5}{\textcircled}{v}
  \DeclareUTFcomposite[\UTFencname]{x24E6}{\textcircled}{w}
  \DeclareUTFcomposite[\UTFencname]{x24E7}{\textcircled}{x}
  \DeclareUTFcomposite[\UTFencname]{x24E8}{\textcircled}{y}
  \DeclareUTFcomposite[\UTFencname]{x24E9}{\textcircled}{z}
  \DeclareUTFcomposite[\UTFencname]{x24EA}{\textcircled}{0}
  \DeclareUTFcharacter[\UTFencname]{x25EF}{\textbigcircle}
  \DeclareUTFcomposite[\UTFencname]{x3251}{\textcircled}{21}
  \DeclareUTFcomposite[\UTFencname]{x3252}{\textcircled}{22}
  \DeclareUTFcomposite[\UTFencname]{x3253}{\textcircled}{23}
  \DeclareUTFcomposite[\UTFencname]{x3254}{\textcircled}{24}
  \DeclareUTFcomposite[\UTFencname]{x3255}{\textcircled}{25}
  \DeclareUTFcomposite[\UTFencname]{x3256}{\textcircled}{26}
  \DeclareUTFcomposite[\UTFencname]{x3257}{\textcircled}{27}
  \DeclareUTFcomposite[\UTFencname]{x3258}{\textcircled}{28}
  \DeclareUTFcomposite[\UTFencname]{x3259}{\textcircled}{29}
  \DeclareUTFcomposite[\UTFencname]{x325A}{\textcircled}{30}
  \DeclareUTFcomposite[\UTFencname]{x325B}{\textcircled}{31}
  \DeclareUTFcomposite[\UTFencname]{x325C}{\textcircled}{32}
  \DeclareUTFcomposite[\UTFencname]{x325D}{\textcircled}{33}
  \DeclareUTFcomposite[\UTFencname]{x325E}{\textcircled}{34}
  \DeclareUTFcomposite[\UTFencname]{x325F}{\textcircled}{35}
  \DeclareUTFcomposite[\UTFencname]{x32B1}{\textcircled}{36}
  \DeclareUTFcomposite[\UTFencname]{x32B2}{\textcircled}{37}
  \DeclareUTFcomposite[\UTFencname]{x32B3}{\textcircled}{38}
  \DeclareUTFcomposite[\UTFencname]{x32B4}{\textcircled}{39}
  \DeclareUTFcomposite[\UTFencname]{x32B5}{\textcircled}{40}
  \DeclareUTFcomposite[\UTFencname]{x32B6}{\textcircled}{41}
  \DeclareUTFcomposite[\UTFencname]{x32B7}{\textcircled}{42}
  \DeclareUTFcomposite[\UTFencname]{x32B8}{\textcircled}{43}
  \DeclareUTFcomposite[\UTFencname]{x32B9}{\textcircled}{44}
  \DeclareUTFcomposite[\UTFencname]{x32BA}{\textcircled}{45}
  \DeclareUTFcomposite[\UTFencname]{x32BB}{\textcircled}{46}
  \DeclareUTFcomposite[\UTFencname]{x32BC}{\textcircled}{47}
  \DeclareUTFcomposite[\UTFencname]{x32BD}{\textcircled}{48}
  \DeclareUTFcomposite[\UTFencname]{x32BE}{\textcircled}{49}
  \DeclareUTFcomposite[\UTFencname]{x32BF}{\textcircled}{50}
}
\ifengine{\UTFDeclarations}{\UTFDeclarations}{}
%
%
\ifxetex\else\ifluatex\else
  \RequirePackage{textcomp}
  \PassOptionsToPackage{mathcomp}{rmdefault}
  \RequirePackage{mathcomp}
  \fi
\fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{exscale}
%
% 
% \index{Packages>exscale}
%
%This package implements scaling of the math extension font |cmex|. If this package is used the site needs 
% scaled versions of the font |cmex10| in the sizes 10.95pt, 12pt, 14.4pt, 17.28pt, 20.74pt, and 24.88pt (corresponding 
% to standard magsteps using |\magstephalf|, and |\magstep1| through |\magstep5|). 
% Additionally |cmex| variants for the sizes |7pt| to |9pt| are necessary. These fonts are part of the AMS font packÂ­age.
%
%    \begin{macrocode}
\ifxetex
    \else
     \ifluatex
     \else
       \RequirePackage{exscale}
       \RequirePackage{relsize}
     \fi
\fi
%    \end{macrocode}
% \end{macro}
%
% An example to scale math using the \pkg{exscale} package. Perhaps for
% using slides etc.
% ^^A\begin{minipage}[c]{1.0\textwidth}%
%^^A \centering\large\[
%^^A\int_{-1}^{+1}\frac{f(x)}{\sqrt{1-x^{2}}}\,\mathrm{d}x\approx\frac{\pi}{n}%
%^^A\sum_{i=1}^{n}f\left(\cos\left(\frac{2i-1}{2n}\right)\right)\]
%^^A\end{minipage}%
%
% \section{textcomp}
%
% \begin{macro}{\tabitem} The \pkgname{textcomp} 
%  provides a nice helper macro for typesetting symbols in normal, bold
%  and italics. I must think of a more semantic name than |tabitem|.
%
%    \begin{macrocode}
\newcommand{\tabitem}[2]{%
  \texttt{\symbol{`\\}#1} & \@nameuse{#1} 
   & \bfseries\@nameuse{#1}& \itshape\@nameuse{#1}
   \ifthenelse{\equal{#2}{}}
    {}
    {& \texttt{\symbol{`\\}#2} & \@nameuse{#2} 
     & \bfseries\@nameuse{#2}
     & \itshape\@nameuse{#2} \\}
}
%    \end{macrocode}
% \end{macro}
%

%\setlength{\LTleft}{0pt}%
%\setlength{\LTright}{0pt}
%\noindent
%\begin{longtable}{%
%    @{}ll@{}l@{}l@{\extracolsep{\fill}}l!{\extracolsep{0pt}}l@{}l@{}l@{}}
%  \multicolumn{4}{c}{\textbf{Symbol}} & 
%  \multicolumn{4}{c}{\textbf{Symbol}} \\ 
%  \midrule
%\endhead
%
%%  \tabitem{textcapitalcompwordmark}{textascendercompwordmark}
%  \tabitem{textquotestraightbase}{textquotestraightdblbase}
%  \tabitem{texttwelveudash}{textthreequartersemdash}
%  \tabitem{textleftarrow}{textrightarrow}
%  \tabitem{textblank}{textdollar}
%  \tabitem{textquotesingle}{textasteriskcentered}
%  \tabitem{textdblhyphen}{textfractionsolidus}
%  \tabitem{textzerooldstyle}{textoneoldstyle}
%  \tabitem{texttwooldstyle}{textthreeoldstyle}
%  \tabitem{textfouroldstyle}{textfiveoldstyle}
%  \tabitem{textsixoldstyle}{textsevenoldstyle}
%  \tabitem{texteightoldstyle}{textnineoldstyle}
%  \tabitem{textlangle}{textminus}
%  \tabitem{textrangle}{textmho}
%  \tabitem{textbigcircle}{textohm}
%  \tabitem{textlbrackdbl}{textrbrackdbl}
%  \tabitem{textuparrow}{textdownarrow}
%  \tabitem{textasciigrave}{textborn}
%  \tabitem{textdivorced}{textdied}
%  \tabitem{textleaf}{textmarried}
%  \tabitem{textmusicalnote}{texttildelow}
%  \tabitem{textdblhyphenchar}{textasciibreve}
%  \tabitem{textasciicaron}{textgravedbl}
%  \tabitem{textacutedbl}{textdagger}
%  \tabitem{textdaggerdbl}{textbardbl}
%  \tabitem{textperthousand}{textbullet}
%  \tabitem{textcelsius}{textdollaroldstyle}
%  \tabitem{textcentoldstyle}{textflorin}
%  \tabitem{textcolonmonetary}{textwon}
%  \tabitem{textnaira}{textguarani}
%  \tabitem{textpeso}{textlira}
%  \tabitem{textrecipe}{textinterrobang}
%  \tabitem{textinterrobangdown}{textdong}
%  \tabitem{texttrademark}{textpertenthousand}
%  \tabitem{textpilcrow}{textbaht}
%  \tabitem{textnumero}{textdiscount}
%  \tabitem{textestimated}{textopenbullet}
%  \tabitem{textservicemark}{textlquill}
%  \tabitem{textrquill}{textcent}
%  \tabitem{textsterling}{textcurrency}
%  \tabitem{textyen}{textbrokenbar}
%  \tabitem{textsection}{textasciidieresis}
%  \tabitem{textcopyright}{textordfeminine}
%  \tabitem{textcopyleft}{textlnot}
%  \tabitem{textcircledP}{textregistered}
%  \tabitem{textasciimacron}{textdegree}
%  \tabitem{textpm}{texttwosuperior}
%  \tabitem{textthreesuperior}{textasciiacute}
%  \tabitem{textmu}{textparagraph}
%  \tabitem{textperiodcentered}{textreferencemark}
%  \tabitem{textonesuperior}{textordmasculine}
%  \tabitem{textsurd}{textonequarter}
%  \tabitem{textonehalf}{textthreequarters}
%  \tabitem{texteuro}{texttimes}
%  \tabitem{textdiv}{}
%
%
%\end{longtable}
%
% \begin{macro}{wasysym} \url{http://tex.stackexchange.com/questions/80053/wasysym-symbols-render-to-something-different}
%    \begin{macrocode}
\newif\ifWASY
\newcommand\WASY{\pkgname{wasysym}}
\IfStyFileExists{wasysym}
  {\WASYtrue
   \savesymbol{lightning}
   \savesymbol{Box}
   \savesymbol{Diamond}
   \savesymbol{clock}
   \RequirePackage{wasysym}
   \restoresymbol{WASY}{lightning}
   \restoresymbol{WASY}{Box}
   \restoresymbol{WASY}{Diamond}
   \restoresymbol{WASY}{clock}
  }
  {}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{pifont}
% Using symbol fonts is supported by means of the 
% \Lpack{pifont} package, providing commands for using the Zapf Dingbats font,
% as well as an interface to other families.\footnote{%
% This section was adopted, with minor changes, 
% from \cite{Mittelbach2004}}.
% 
%    \begin{macrocode}
\newif\ifPI
\newcommand\PI{\pkgname{pifont}}
\IfStyFileExists{pifont}
  {\PItrue\RequirePackage{pifont}}
  {}  
%    \end{macrocode}
% \end{macro}
% 
% 
%\begin{table}[bt!]
% \bgroup
% \let\oldding\ding
% \def\ding#1{{\color{teal}\oldding{#1}}}
% 
%  \caption{The characters in the postscript font Zapf Dingbats} 
%  \label{tab:dingbats}
%  \centering
%  
%{\footnotesize
%\begin{tabular}{|rr|rr|rr|rr|rr|rr|rr|rr|}
%\hline
%32 &  \ding{32} & 33 &  \ding{33} & 34 &  \ding{34} & 35 &  \ding{35} & 36 &  \ding{36} & 37 &  \ding{37} & 38 &  \ding{38} & 39 &  \ding{39}  \\ \hline
%40 &  \ding{40} & 41 &  \ding{41} & 42 &  \ding{42} & 43 &  \ding{43} & 44 &  \ding{44} & 45 &  \ding{45} & 46 &  \ding{46} & 47 &  \ding{47}  \\ \hline
%48 &  \ding{48} & 49 &  \ding{49} & 50 &  \ding{50} & 51 &  \ding{51} & 52 &  \ding{52} & 53 &  \ding{53} & 54 &  \ding{54} & 55 &  \ding{55}  \\ \hline
%56 &  \ding{56} & 57 &  \ding{57} & 58 &  \ding{58} & 59 &  \ding{59} & 60 &  \ding{60} & 61 &  \ding{61} & 62 &  \ding{62} & 63 &  \ding{63}  \\ \hline
%64 &  \ding{64} & 65 &  \ding{65} & 66 &  \ding{66} & 67 &  \ding{67} & 68 &  \ding{68} & 69 &  \ding{69} & 70 &  \ding{70} & 71 &  \ding{71}  \\ \hline
%72 &  \ding{72} & 73 &  \ding{73} & 74 &  \ding{74} & 75 &  \ding{75} & 76 &  \ding{76} & 77 &  \ding{77} & 78 &  \ding{78} & 79 &  \ding{79}  \\ \hline
%80 &  \ding{80} & 81 &  \ding{81} & 82 &  \ding{82} & 83 &  \ding{83} & 84 &  \ding{84} & 85 &  \ding{85} & 86 &  \ding{86} & 87 &  \ding{87}  \\ \hline
%88 &  \ding{88} & 89 &  \ding{89} & 90 &  \ding{90} & 91 &  \ding{91} & 92 &  \ding{92} & 93 &  \ding{93} & 94 &  \ding{94} & 95 &  \ding{95}  \\ \hline
%96 &  \ding{96} & 97 &  \ding{97} & 98 &  \ding{98} & 99 &  \ding{99} & 100 &  \ding{100} & 101 &  \ding{101} & 102 &  \ding{102} & 103 &  \ding{103}  \\ \hline
%104 &  \ding{104} & 105 &  \ding{105} & 106 &  \ding{106} & 107 &  \ding{107} & 108 &  \ding{108} & 109 &  \ding{109} & 110 &  \ding{110} & 111 &  \ding{111}  \\ \hline
%112 &  \ding{112} & 113 &  \ding{113} & 114 &  \ding{114} & 115 &  \ding{115} & 116 &  \ding{116} & 117 &  \ding{117} & 118 &  \ding{118} & 119 &  \ding{119}  \\ \hline
%120 &  \ding{120} & 121 &  \ding{121} & 122 &  \ding{122} & 123 &  \ding{123} & 124 &  \ding{124} & 125 &  \ding{125} & 126 &  \ding{126} &     &              \\ \hline
%    &             & 161 &  \ding{161} & 162 &  \ding{162} & 163 &  \ding{163} & 164 &  \ding{164} & 165 &  \ding{165} & 166 &  \ding{166} & 167 &  \ding{167}  \\ \hline
%168 &  \ding{168} & 169 &  \ding{169} & 170 &  \ding{170} & 171 &  \ding{171} & 172 &  \ding{172} & 173 &  \ding{173} & 174 &  \ding{174} & 175 &  \ding{175}  \\ \hline
%176 &  \ding{176} & 177 &  \ding{177} & 178 &  \ding{178} & 179 &  \ding{179} & 180 &  \ding{180} & 181 &  \ding{181} & 182 &  \ding{182} & 183 &  \ding{183}  \\ \hline
%184 &  \ding{184} & 185 &  \ding{185} & 186 &  \ding{186} & 187 &  \ding{187} & 188 &  \ding{188} & 189 &  \ding{189} & 190 &  \ding{190} & 191 &  \ding{191}  \\ \hline
%192 &  \ding{192} & 193 &  \ding{193} & 194 &  \ding{194} & 195 &  \ding{195} & 196 &  \ding{196} & 197 &  \ding{197} & 198 &  \ding{198} & 199 &  \ding{199}  \\ \hline
%200 &  \ding{200} & 201 &  \ding{201} & 202 &  \ding{202} & 203 &  \ding{203} & 204 &  \ding{204} & 205 &  \ding{205} & 206 &  \ding{206} & 207 &  \ding{207}  \\ \hline
%208 &  \ding{208} & 209 &  \ding{209} & 210 &  \ding{210} & 211 &  \ding{211} & 212 &  \ding{212} & 213 &  \ding{213} & 214 &  \ding{214} & 215 &  \ding{215}  \\ \hline
%216 &  \ding{216} & 217 &  \ding{217} & 218 &  \ding{218} & 219 &  \ding{219} & 220 &  \ding{220} & 221 &  \ding{221} & 222 &  \ding{222} & 223 &  \ding{223}  \\ \hline
%224 &  \ding{224} & 225 &  \ding{225} & 226 &  \ding{226} & 227 &  \ding{227} & 228 &  \ding{228} & 229 &  \ding{229} & 230 &  \ding{230} & 231 &  \ding{231}  \\ \hline
%232 &  \ding{232} & 233 &  \ding{233} & 234 &  \ding{234} & 235 &  \ding{235} & 236 &  \ding{236} & 237 &  \ding{237} & 238 &  \ding{238} & 239 &  \ding{239}  \\ \hline
%    &             & 241 &  \ding{241} & 242 &  \ding{242} & 243 &  \ding{243} & 244 &  \ding{244} & 245 &  \ding{245} & 246 &  \ding{246} & 247 &  \ding{247}  \\ \hline
%248 &  \ding{248} & 249 &  \ding{249} & 250 &  \ding{250} & 251 &  \ding{251} & 252 &  \ding{252} & 253 &  \ding{253} & 254 &  \ding{254} &     &              \\ \hline
%\end{tabular}
% \let\ding\oldding
%\egroup
%\par}
% \label{tbl:dingbats}
% \end{table}
%
%
%    
% \begin{macro}{marvosym}
%
% The package \ctan{marvosym} underwent a major rewrite for the 2000/05/01 version, adding
% a large number of new symbols.  If it looks like we have only the
% older version, pretend we don't have it at all. The tables illustrating the available symbols have been extracted from \citep{marvosym}.
%
%    \begin{macrocode}  
\newif\ifMARV
\newcommand\MARV{\pkgname{marvosym}}
\IfStyFileExists*{marvosym}
  {\savesymbol{CheckedBox}
   \RequirePackage{marvosym}[2000/05/01]% Major rewrite at this version.
   \global\MARVtrue
   \@ifundefined{Denarius} % \Denarius is a newer symbol.
     {\global\MARVfalse}
     {}
   \@ifundefined{MVRightarrow}% \Mvrightarrow is an even newer symbol.
     {\global\MARVfalse}
     {}
  }
  {}
%    \end{macrocode}
% \end{macro}
% 
%


%
%
% \begin{macro}{bbding} The package provides an easy-to-use interface to the \texttt{bbding} symbol
%   set developed by \emph{Karel Horak}.  The naming conventions is made
%   close to \emph{Zapf-Dingbat} as it can be found in \texttt{Wordperfect
%   6.0}, however, sometimes shortening the names.
%
%    \begin{macrocode}  
\newif\ifDING
\newcommand\DING{\pkgname{bbding}}
\IfStyFileExists{bbding}
  {\DINGtrue
   \savesymbol{Cross} \savesymbol{Square}
   \RequirePackage{bbding}
   \restoresymbol{ding}{Cross} \restoresymbol{ding}{Square}
  }
  {}     

\newcount\c@lumnsleft
\newcount\t@talcolumns
\newdimen\c@lumnwidth
\newenvironment{commandsInColumns}[1]{%
  \t@talcolumns=#1\advance\t@talcolumns-1\c@lumnsleft=\t@talcolumns%
  \c@lumnwidth=-2em\multiply\c@lumnwidth by \t@talcolumns%
  \advance\c@lumnwidth by\hsize \divide\c@lumnwidth by #1%
  \vskip\z@     % Ensures vertical mode
  \catcode`\^^M=12%
  \hbox\bgroup%
  \st@rtenv%
}
{\ifnum\c@lumnsleft=\t@talcolumns \egroup
 \else \egroup \fi}
%
{\catcode`\^^M=12%
 \gdef\st@rtenv{\@ifnextchar^^M{\dr@pnext\doNextComm@nd}{\doNextComm@nd}}%
 \gdef\setComm@nd#1#2^^M{%
   \hbox to \c@lumnwidth%
     {\hbox to .5cm{#1\hss}\hbox{\expandafter\setn@me\string#1.}\hss}%
   \advance\c@lumnsleft-1%
   \ifnum\c@lumnsleft>0%
     \hskip2em%
   \else%
     \egroup%
     \hbox\bgroup%
     \c@lumnsleft\t@talcolumns%
   \fi%
   \doNextComm@nd%
  }}
\def\dr@pnext#1#2{#1}
\def\doNextComm@nd{\@ifnextchar\end{}{\setComm@nd}}%
\def\setn@me#1#2.{\CSname{#2}}
%
%
\newcommand{\CSname}[1]{\texttt{\protect\bslash#1}}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\newif\ifEUSYM\EUSYMfalse
\newcommand\EUSYM{\pkgname{eurosym}}
\IfStyFileExists{eurosym}
  {\EUSYMtrue
   \savesymbol{EUR}
   \usepackage{eurosym}
   \restoresymbol{MARV}{EUR}
  }
  {}
%
\newif\ifESV\ESVfalse
\newcommand\ESV{\pkgname{esvect}}
%\IfStyFileExists{esvect}
%  {\ESVtrue
%   \usepackage{esvect}
%   \DeclareMathSymbol{\fldra}{\mathrel}{esvector}{'021}
%   \DeclareMathSymbol{\fldrb}{\mathrel}{esvector}{'022}
%   \DeclareMathSymbol{\fldrc}{\mathrel}{esvector}{'023}
%   \DeclareMathSymbol{\fldrd}{\mathrel}{esvector}{'024}
%   \DeclareMathSymbol{\fldre}{\mathrel}{esvector}{'025}
%   \DeclareMathSymbol{\fldrf}{\mathrel}{esvector}{'026}
%   \DeclareMathSymbol{\fldrg}{\mathrel}{esvector}{'027}
%   \DeclareMathSymbol{\fldrh}{\mathrel}{esvector}{'030}
%  }
%  {}
%    \end{macrocode}
%
%
% \begin{figure}[tbp] \small 
% \begin{commandsInColumns}{2}
%   \ScissorRight
%   \ScissorRightBrokenBottom
%   \ScissorRightBrokenTop
%   \ScissorHollowRight
%   \ScissorLeft
%   \ScissorLeftBrokenBottom
%   \ScissorLeftBrokenTop
%   \ScissorHollowLeft
% \end{commandsInColumns}
% \caption{Scissors from the \texttt{bbding} package.}
% \end{figure}
%
% \begin{figure} \small 
% \begin{commandsInColumns}{3}
%   \HandRight
%   \HandRightUp
%   \HandCuffRight
%   \HandCuffRightUp
%   \HandLeft
%   \HandLeftUp
%   \HandCuffLeft
%   \HandCuffLeftUp
%   \HandPencilLeft
% \end{commandsInColumns}
% \caption{Hands}
% \end{figure}
%
% \begin{figure} \small 
% \begin{commandsInColumns}{3}
%   \PencilRight
%   \PencilRightUp
%   \PencilRightDown
%   \PencilLeft
%   \PencilLeftUp
%   \PencilLeftDown
%   \NibRight
%   \NibSolidRight
%   \NibLeft
%   \NibSolidLeft
% \end{commandsInColumns}
% \caption{Writing tools}
% \end{figure}
%
% \begin{figure} \small 
% \begin{commandsInColumns}{3}
%   \XSolid
%   \XSolidBold
%   \XSolidBrush
%   \Plus
%   \PlusOutline
%   \PlusCenterOpen
%   \PlusThinCenterOpen
%   \Cross
%   \CrossOpenShadow
%   \CrossOutline
%   \CrossBoldOutline
%   \CrossClowerTips
%   \CrossMaltese
% \end{commandsInColumns}
% \caption{Crosses, plusses and the like}
% \end{figure}
%
% \begin{figure} \small 
% \begin{commandsInColumns}{3}
%   \DavidStar
%   \DavidStarSolid
%   \JackStar
%   \JackStarBold
%   \FourStar
%   \FourStarOpen
%   \FiveStar
%   \FiveStarLines
%   \FiveStarOpen
%   \FiveStarOpenCircled
%   \FiveStarCenterOpen
%   \FiveStarOpenDotted
%   \FiveStarOutline
%   \FiveStarOutlineHeavy
%   \FiveStarConvex
%   \FiveStarShadow
%   \SixStar
%   \EightStar
%   \EightStarBold
%   \EightStarTaper
%   \EightStarConvex
%   \TwelweStar
%   \SixteenStarLight
%   \Asterisk
%   \AsteriskBold
%   \AsteriskCenterOpen
%   \AsteriskThin
%   \AsteriskThinCenterOpen
%   \AsteriskRoundedEnds
%   \FourAsterisk
%   \EightAsterisk
% \end{commandsInColumns}
% \caption{All kind of stars}
% \end{figure}
%
% \begin{figure} \small 
% \begin{commandsInColumns}{2}
%   \FiveFlowerOpen
%   \FiveFlowerPetal
%   \SixFlowerOpenCenter
%   \SixFlowerRemovedOpenPetal
%   \SixFlowerAlternate
%   \SixFlowerAltPetal
%   \SixFlowerPetalDotted
%   \SixFlowerPetalRemoved
%   \EightFlowerPetalRemoved
%   \EightFlowerPetal
%   \FourClowerOpen
%   \FourClowerSolid
%   \Sparkle
%   \SparkleBold
%   \SnowflakeChevron
%   \SnowflakeChevronBold
%   \Snowflake
% \end{commandsInColumns}
% \caption{Flowers, snowflakes and the like}
% \end{figure}
%
% \begin{figure} \small 
% \begin{commandsInColumns}{2}
%   \CircleSolid
%   \CircleShadow
%   \HalfCircleRight
%   \HalfCircleLeft
%   \Ellipse
%   \EllipseSolid
%   \EllipseShadow
%   \Square
%   \SquareSolid
%   \SquareShadowBottomRight
%   \SquareShadowTopRight
%   \SquareShadowTopLeft
%   \SquareCastShadowBottomRight
%   \SquareCastShadowTopRight
%   \SquareCastShadowTopLeft
%   \TriangleUp
%   \TriangleDown
%   \DiamondSolid
%   \OrnamentDiamondSolid
%   \RectangleThin
%   \Rectangle
%   \RectangleBold
% \end{commandsInColumns}
% \caption{Geometrical Shapes}
% \end{figure}
%
% \begin{figure} \small 
% \begin{commandsInColumns}{3}
%   \Phone
%   \PhoneHandset
%   \Tape
%   \Plane
%   \Envelope
%   \Peace
%   \Checkmark
%   \CheckmarkBold
%   \SunshineOpenCircled
%   \ArrowBoldRightStrobe
%   \ArrowBoldUpRight
%   \ArrowBoldDownRight
%   \ArrowBoldRightShort
%   \ArrowBoldRightCircled
% \end{commandsInColumns}
% \caption{Miscellaneous}
% \end{figure}
% 
% \subsection{Chemistry}

%    \begin{macrocode}
  \RequirePackage{mhchem}
  \RequirePackage{chemfig}
%    \end{macrocode}

% \subsection{The \texttt{manfnt} package.}
% 
% The \TeX{} and metafont manuals use some special symbols not found in
% the normal CM-fonts. The \pkgname{manfnt} provides additional symbols.
% Most of these symbols will be of little use for
% the average author, but some, like the ``Dangerous Bend'' sign may be
% approriate for some textbooks. As the author states, these symbols tend
% to detract the user; I have included them for the sake of the dangerbend
% symbol. The package is currently maintained by Axel Kielhorn.
%
%    \begin{macrocode}
\newif\ifMAN
\newcommand\MAN{\pkgname{manfnt}}
\IfStyFileExists{manfnt}
  {\MANtrue\RequirePackage{manfnt}}
  {}   
%    \end{macrocode}
%
% \begin{figure} \small 
%   \begin{commandsInColumns}{3}
%     \dbend
%     \lhdbend
%     \reversedvideodbend
%   \end{commandsInColumns}
% \caption{Double bend warning signs from the manfnt package.}
% \end{figure}
%
%
% I am not too sure if I should leave the package here for the long
% term or remove it, perhaps make a "bundle" for LaTeX authors. This package I normally use for the fire symbol for hot issues for my Team.
%
% \subsection{ifsym}
% \begin{macro}{ifsym}
%    \begin{macrocode}
\newif\ifIFS
\newcommand\IFS{\pkgname{ifsym}}
\IfStyFileExists{ifsym}
  {\IFStrue
   \savesymbol{Letter} \savesymbol{Square} \savesymbol{Cross} \savesymbol{Sun}
   \savesymbol{TriangleUp} \savesymbol{TriangleDown} \savesymbol{Circle}
   \savesymbol{Lightning}
   \RequirePackage[alpine,clock,electronic,geometry,misc,weather]{ifsym}[2000/04/18]
   \restoresymbol{ifs}{Letter} \restoresymbol{ifs}{Square}
   \restoresymbol{ifs}{Cross} \restoresymbol{ifs}{Sun}
   \restoresymbol{ifs}{TriangleUp} \restoresymbol{ifs}{TriangleDown}
   \restoresymbol{ifs}{Circle} \restoresymbol{ifs}{Lightning}
   \DeclareRobustCommand{\allCubes}{%
     \Cube{1}~%
     \Cube{2}~%
     \Cube{3}~%
     \Cube{4}~%
     \Cube{5}~%
     \Cube{6}%
   }
  }
  {}  
  
%    \end{macrocode}
% \end{macro}
% The |ifsym| package can produce some fancy symbols such as \Cube{1},\Cube{6} etc. a cross \Cross
% a \TriangleUp      {\color{red}\TriangleDown}. The documentation is in postscript?  \PulseHigh \showclock{0}{45} \ifsLightning \lhdbend
%
% \subsection{Weather Symbols}
% \begin{figure}[h] \small 
% \begin{commandsInColumns}{3}
% \Sun
% \HalfSun
% \NoSun
% \Fog
% \ThinFog
% \Rain
% \WeakRain
% \Hail
% \Sleet
% \Snow
% \Lightning
% \Cloud
% \RainCloud
% \WeakRainCloud
% \SunCloud
% \SnowCloud
% \FilledCloud
% \FilledRainCloud
% \FilledWeakRainCloud
% \FilledSunCloud
% \FilledSnowCloud
%\end{commandsInColumns}
% \allCubes
% \caption{ifsym Weather symbols}
% \end{figure}
%
% \begin{figure}[h] \small 
% \begin{commandsInColumns}{3}
% \Telephone
% \SectioningDiamond
% \FilledSectioningDiamond
% \PaperPortrait
% \PaperLandscape
% \Irritant
% \Fire
% \Radiation
% \StrokeOne
% \StrokeTwo
% \StrokeThree
% \StrokeFour
% \StrokeFive
%\end{commandsInColumns}
% {\Huge\color{yellow!60}\Radiation}
% \caption{ifsym misc symbols}
% \end{figure}
%
% \begin{figure}[h] \small 
% \begin{commandsInColumns}{3}
%\Taschenuhr
%\VarTaschenuhr
%\StopWatchStart
%\StopWatchEnd
%\Interval
%\Wecker
%\VarClock
%\end{commandsInColumns}
% 
% \caption{ifsym clock option symbols symbols}
% \end{figure}
%
% \subsection{The \texttt{undertilde} package}      
%    \begin{macrocode}    
\newif\ifUTILD
\newcommand\UTILD{\pkgname{undertilde}}
\IfStyFileExists{undertilde}
  {\UTILDtrue\RequirePackage{undertilde}}
  {}
%    \end{macrocode}
%
%

%    

% 

% 
% \section{Saving files on the fly filecontents}
% We use the \pkg{filecontents} package, to open and write files on disk on the fly.
% See the sample manual as to how to use.
%    \begin{macrocode}latex
\RequirePackage{phdfilecontents}
%    \end{macrocode}   
%    
% \section{Utilities for programming}
% The below packages offer some good utilities that you may find useful, if you are
% going to program and develop additional macros.
% |\strictpagecheck| can be used effectively for a number of situations, where you need to 
% know if you are on an odd or even page.
%    \begin{macrocode}
\RequirePackage{changepage}    
\RequirePackage{keyval}
\usepackage{xkvview}
\RequirePackage{ifmtarg}
\RequirePackage{fp}
%    \end{macrocode}
%
% \subsection{ifthenx}
%
%    \begin{macrocode}
\RequirePackage{ifthenx}
\RequirePackage{xspace}
\RequirePackage{xstring}
% \RequirePackage{cool, coolstr} conflicts to be resolved.
\RequirePackage{multido}
\RequirePackage{etoolbox}
\RequirePackage{parselines}
% for testing in tutorials
%
\def\TRUE{ \meta{true code} }
\def\FALSE{ \meta{false code} }
\def\PASS{\par{\bfseries\textcolor{green!50!blue}{PASS}}\ ~}
\def\FAIL{\par{\bfseries\textcolor{red!70!black}{FAIL}}\ ~}
% upquote needs to be loaded before listings? Must test
% does not seem to matter actually...
%\RequirePackage{upquote}
% \RequirePackage{remreset}
\RequirePackage{calc}
%    \end{macrocode}
%
% \section{Picture packages}
%
% \LaTeXe provides the |picture| environment, which is by now mostly
% outdated. However it is still useful for placing text or other
% objects at absolute positions on a page. We load its successors,
% the package \pkg{pict2e} and the \pkg{picture} for maximum
% flexibility.
%
% We also load a new kid on the block xpicture
%    \begin{macrocode}
% Used in chapter for picture environment. |pict2e| must be used before.
\RequirePackage{pict2e}
\RequirePackage{picture}
%\RequirePackage{xpicture}
\RequirePackage{tikz}
\usetikzlibrary{%
  arrows,%
  calc,%
  fit,%
  patterns,%
  plotmarks,%
  shapes.geometric,%
  shapes.misc,%
  shapes.symbols,%
  shapes.arrows,%
  shapes.callouts,%
  shapes.multipart,%
  shapes.gates.logic.US,%
  shapes.gates.logic.IEC,%
  er,%
  automata,%
  backgrounds,%
  chains,%
  topaths,%
  trees,%
  petri,%
  mindmap,%
  matrix,%
  calendar,%
  folding,%
  fadings,%
  through,%
  positioning,%
  scopes,%
  decorations.fractals,%
  decorations.shapes,%
  decorations.text,%
  decorations.pathmorphing,%
  decorations.pathreplacing,%
  decorations.footprints,%
  decorations.markings,%
  shadows}

\usetikzlibrary{tikzmark}
\RequirePackage{pgfplots}
\pgfplotsset{compat=1.11}
\RequirePackage{pgfplotstable}
%    \end{macrocode}
%
%  The \pkgname{drawstack} can be used to draw stacks and other similar structures. Add it to
%  the list for computer science packags.
%
%    \begin{macrocode}
\RequirePackage{drawstack}
%    \end{macrocode}
%    
% \section{Code Typesetting}
%
% 	A lot of users use LaTeX for computer related code we include all 
%    the necessary code to use the |listings| package. We also provide 
%    some predefined environments for styling.
%
%  \section{Using Hyperref}
%
% 	The \pkgname{hyperref} by Sebastian Rahtz and Heiko Oberdiek \cite{hyperref} is indespensible
%    for producing electronic versions of documents. As it redefines many commands care
%    needs to be taken with certain packages.
%
%    \begin{macrocode}
% in document
\newcommand*{\BeforeHyperrefHook}{%
  \RequirePackage{float}%
  \RequirePackage{newfloat}}
 % \RequirePackage{verse}} TO FIX
\newcommand*{\AfterHyperrefHook}{%
  \RequirePackage{algorithm2e}%
  \RequirePackage{fancyhdr}

  \RequirePackage{datetime} %%scrtime
  \RequirePackage{scrtime}
  \RequirePackage{datenumber}
  \RequirePackage{natbib}
%  \bibliographystyle{cambridgeauthordate}
   \bibliographystyle{abbrvnat}
  \usepackage{bibentry} % needs checking
  %\bibpunct{(}{)}{;}{a}{,}{,}
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% 4. to bring natbib.sty into line with cambridge style
%    and make 'References' the default
%
\@ifpackageloaded{natbib}{%
    \providecommand\refname{References} % internationalize?
    \providecommand\bibname{Bibliography}

\ifAJW@multisty
  \def\NAT@sectionbib{on}% natbib will use \section* headings
\fi

\setlength\bibhang{1em}
\renewenvironment{thebibliography}[1]{%
% \bibsection\parindent \z@\bibpreamble\bibfont\list
  \bibsection\parindent \z@\bibpreamble\bibliosize\list
   {\@biblabel{\arabic{NAT@ctr}}}{\@bibsetup{##1}%changed
    \setcounter{NAT@ctr}{0}}%
    \ifNAT@openbib
      \renewcommand\newblock{\par}
    \else
      \renewcommand\newblock{\hskip .11em \@plus.33em \@minus.07em}%
    \fi
    \sloppy\clubpenalty4000\widowpenalty4000
    \sfcode`\.=1000\relax
    \let\citeN\cite \let\shortcite\cite
    \let\citeasnoun\cite
 }{\def\@noitemerr{%
  \PackageWarning{natbib}
     {Empty `thebibliography' environment}}%
  \endlist\vskip-\lastskip}


\ifAJW@multisty
  \renewcommand\bibsection{\section{\refname %FIX ME FOR PARAMETERS
    %\ifx\@mkboth\@gobbletwo\else\markright{\refname}\fi
    }}%
\else
  \renewcommand\bibsection{\chapter{\refname %FIX ME STAR CHAPTER
    %\@mkboth{\refname}{\refname}
    }}%
\fi}{}
}
%
%    \end{macrocode}
%
%  \section{The hyperref package}
%
%  The \pkgname{hyperref} is an excellent piece of software, but the redefining of a lot
%  of kernel commands needs special treatment, so we will provide hooks for packages
%  to be loaded before and after the hyperref package.
%  
%  We call it with no options, as we will set them a bit later.
%
% \begin{macro}{sethyperref}   
%    \begin{macrocode}
\def\sethyperref{%
  \BeforeHyperrefHook
  \RequirePackage{hyperref}
%% hyperdoc has a problem with tcolorboc documentation
%% macros.
%%\usepackage{hypdoc}
\hypersetup{
  bookmarks,
  raiselinks,
  pageanchor,
  hyperindex=true,
  colorlinks,
  allcolors=theblue, 
  linktocpage,
  hyperfootnotes=true,
  breaklinks=true,
  anchorcolor= theblue,
  filecolor=blue,
  hypertexnames=true, %useguessable names for links
  urlcolor= theblue,
  linkcolor= theblue,
  pdftitle={My Title},
  pdfauthor={Yiannis Lazarides},
  pdfsubject={The phd LaTeX package},
  pdfkeywords={LaTeX package management, document design},
  plainpages=true%do page number anchors as plain Arabic
 }
\AfterHyperrefHook
}
%    \end{macrocode}
% \end{macro}

% \section{Date and Time}
%
%    \begin{macrocode}
\ifluatex 
\newcommand\printtime[5][0]{%
   \luadirect{
      local m =require("i18n.datetime")
      m:printDayTime(#2, #3, #4, #5, #1)
    }%
 }%

\newcommand\datetimetodecimal[4]{%
   \luadirect{
      local m =require("i18n.datetime")
      m:dayTimeToDecimal(#1, #2, #3, #4)
    }%
 }%
   \newcommand\datetimetofractional[2][0]{%
   \luadirect{
      local m =require("i18n.datetime")
      m:dayTimeToFractional(#2,#1)
    }}
    
\fi
\ExplSyntaxOn
 \DeclareDocumentCommand\printtimeinterval{ m m g g }
 {
  #1\textsuperscript{d}%
  #2\textsuperscript{h}%
  \IfNoValueTF {#3} {} {#3\textsuperscript{m}}
  \IfNoValueTF {#4} {} {#4\textsuperscript{s}}
 }
 \let\PrintTimeInterval\printtimeinterval
 \ExplSyntaxOff
%\usepackage{dateiliste}
%    \end{macrocode}
%
% \section{tcolorbox}
% We load \pkgname{tcolorbox} with options theorems, skins, documentation etc
% for internal and external use.
%
% We also provide an interface, between the \pkgname{tcolorbox} documentation
% keys and our own.
% 
% The indexing keys are still to be sorted out with other sections of the
% documentation, but they seem to be working for the moment.
% 
%    \begin{macrocode}
\let\oldcs\cs
\RequirePackage[theorems, skins, documentation,
                breakable,listings]{tcolorbox}
                \tcbset{index format=pgf,
                        index actual={=},
                        index level = {>},
                        index quote = {!},
                        index german settings,
                        }
\let\cs\oldcs                
%    \end{macrocode}                
%
%\cxset {doc command color/.code = \tcbset{color command = #1}}
%\cxset {doc command color= thedoccommandcolor}

%    \begin{macrocode}
\lstdefinelanguage{extras}{morekeywords={%
      poemtitle, poemtoc, versewidth, 
      vin, poemlines,poemtitlefont, 
      ProvidesClass,IfFileExists,
      RequirePackage,ifthenelse,chapter,
      includegraphics, newarray,readarray,of
}}
\lstloadlanguages{[LaTeX]TeX, [primitive]TeX, extras}
%    \end{macrocode}
%
% Note the |gobble=1| option. We use this to make the colorboxes
% with code not to show the `\%` sign in this documentation.
% Ideally you should fork the code below and adapt it to 
% your own needs.
%
% Also note that this is the default that is to be used in
% \pkg{tcolorbox} commands.
% 
%    \begin{macrocode}

   
\newtcolorbox{scriptexample}[2][shavian]{colback=codebackground,
boxrule=0pt,toprule=0pt,colframe=white}

\newtcolorbox{commands}[2][shavian]{colback=codebackground,
boxrule=0pt,toprule=0pt,colframe=white}

\lstset{language={[LaTeX]TeX},
       escapeinside={{(*@}{@*)}}, 
       numbers=left, 
       gobble=0,
       stepnumber=1,numbersep=5pt, 
       numberstyle={\footnotesize\color{gray}},
       firstnumber=last,
       breaklines=false,
       framesep=5pt,
       basicstyle=\small\ttfamily,
       showstringspaces=false,
       stringstyle={\color{orange}\footnotesize},
       commentstyle=\color{black},
       rulecolor=\color{theshade},
       breakatwhitespace=true,
       showspaces=false, 
       xleftmargin=10pt,
       xrightmargin=10pt,
       aboveskip=3pt plus1pt minus1pt, 
       belowskip=7pt plus1pt minus1pt,  
       backgroundcolor=\color{theshade},
}
%    \end{macrocode}
%	
%	
% 	The environment |\begin{TeX}..\end{TeX}| provides a listings environment
% 	for typesetting, either TeX or LaTeX code.
% 	
%    \begin{macrocode}
\lstnewenvironment{teX}[1][]
  {\lstset{language=[LaTeX]TeX}\lstset{%
      breaklines=true,
      framesep=5pt,
      basicstyle=\verbatimfamily,
      showstringspaces=false,
      keywordstyle=\verbatimfamily,
      stringstyle={\color{gray!90}\footnotesize},
	  commentstyle={\color{gray!90}\footnotesize},
	  rulecolor=\color{theshade},
      breakatwhitespace=true,
	  xleftmargin=15pt,
	  xrightmargin=5pt,
	  aboveskip=\medskipamount,
	  belowskip=\medskipamount,
        backgroundcolor=\color{white}, #1
}}
{}


\lstnewenvironment{teXX}[1][]
  {\lstset{language=[LaTeX]TeX}\lstset{%
      breaklines=true,
      framesep=5pt,
      basicstyle=\small\ttfamily,
      showstringspaces=false,
      keywordstyle=\ttfamily\color{blue},
      stringstyle=\color{maroon},
	  commentstyle=\color{black},
	  rulecolor=\color{gray!10},
      breakatwhitespace=true,
	  xleftmargin=0pt,
	  xrightmargin=5pt,
	  aboveskip=\medskipamount,
	  belowskip=\medskipamount,
      backgroundcolor=\color{gray!10}, #1
}}
{}
%    \end{macrocode}

% \begin{macro}{\continuelinenumber} 
% \begin{macro}{\startnumberat} 
%  The macro \cs{continueLineNumber}, provides a command
%  to start the next block of code with the code numbers continuing.
%  This requires the |listings| which is already included.
%  
%    \begin{macrocode}
% Always I forget this so I created some aliases
\newcommand\continuelinenumber{\lstset{firstnumber=last}}
\newcommand\startlineat[1]{\lstset{firstnumber=#1}}
\let\numberlineat\startlineat
\let\startnumberat\numberlineat
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\newcommand\emphasis[2][black!80]{\lstset{emph={write, writeln,#2},escapeinside={(*@}{@*)},
   emphstyle={\verbatimfont\bfseries\textcolor{#1}}}}%changed to textbf
      
   
\lstnewenvironment{teXXX}[1][]
  {\lstset{language=[LaTeX]TeX}%
    \lstset{%
      emph={cs, use,new,seq,map,inline,eq,gincr,incr,IfNoValueF,if,If,exist,protect,nopar,gset,%
      set,undefine,define,add,gadd,remove,div,%
      round,truncate,max,min,mod,gzero,int,%
      zero,newcount,protected,msg,error,DeclareDocumentCommand},
      emphstyle=\verbatimfont\bfseries\color{black!80},
      firstnumber=last,
      stepnumber=1,
      escapeinside={{(*@}{@*)}},
      breaklines=false,
      framesep=5pt,
      basicstyle= \verbatimfont,
      showstringspaces=false,
      keywordstyle=\color{thegreen},
      stringstyle=\color{black!50},
      commentstyle=\color{black!50},
	  rulecolor=\color{gray!10},
      breakatwhitespace=true,
      showspaces=false,  % shows spacing symbol
	   %xleftmargin=0pt,
	   %xrightmargin=5pt,
	xleftmargin=15pt,
	xrightmargin=5pt,
	 %  aboveskip=0pt, % compact the code looks ugly in type
	  % belowskip=0pt,  % user responsible to insert any skips
	 aboveskip=\medskipamount,
	 belowskip=\medskipamount,
       backgroundcolor=,
       #1
}}
{}

\lstnewenvironment{phdverbatim}[1][]
  {\lstset{language=[LaTeX]TeX}%
    \lstset{%
      emph={cs, use,new,seq,map,inline,eq,gincr,incr,IfNoValueF,if,If,exist,protect,nopar,gset,%
      set,undefine,define,add,gadd,remove,div,%
      round,truncate,max,min,mod,gzero,int,%
      zero,newcount,protected,msg,error,DeclareDocumentCommand},
      emphstyle=\verbatimfont\bfseries\color{black!80},
      numbers=none,
     % stepnumber=1,
      escapeinside={{(*@}{@*)}},
      breaklines=false,
      framesep=5pt,
      basicstyle= \verbatimfont,
      showstringspaces=false,
      keywordstyle=\color{thegreen},
      stringstyle=\color{black!50},
      commentstyle=\color{black!50},
	  rulecolor=\color{gray!10},
      breakatwhitespace=true,
      showspaces=false,  % shows spacing symbol
	  xleftmargin=15pt,
	  xrightmargin=5pt,
	 %  aboveskip=0pt, % compact the code looks ugly in type
	  % belowskip=0pt,  % user responsible to insert any skips
	  aboveskip=\medskipamount,
	  belowskip=\medskipamount,
      backgroundcolor=,
       #1
}}
{}
%    \end{macrocode}
% 
%
%
%    \begin{macrocode}
\lstnewenvironment{lualisting}[1][]
{\lstset{language=[LaTeX]TeX,
  basicstyle           = \ttfamily,
  showstringspaces     = false,
  upquote              = true,
  keywordstyle         =\color{blue},
  commentstyle         =\color{black!50},
  stringstyle          =\color{black!80},
  backgroundcolor      =\color{white},
  xleftmargin          =15pt,
  xrightmargin         =5pt,
  aboveskip            =\medskipamount,
  belowskip	            =\medskipamount,
  #1}}
{}

%    \end{macrocode}
%    
%	

% 
% \subsection{algorithms}
% 
% This package must always be loaded after |hyperref|
%
%    \begin{macrocode} 
\newif\ifALGORITHM
\@ifpackageloaded{hyperref}{%
    %%\RequirePackage{algorithms}
 }
 {\typeout{Algorithm loaded}}
  \RequirePackage{algorithm2e} 
%    \end{macrocode}
%     
% \section{Common packages for structuring documents}
% The structuring commands, should ideally be loaded by the class. In case the class
% does not loaded them. We use the \pkg{multicol}, for multiple columns.
%    \begin{macrocode}
\RequirePackage{multicol}
%\RequirePackage[toc]{multitoc}
%    \end{macrocode} 
%    
% 
%

%
% \section{cancel}  
%  
% The \pkgname{ulem}  redefines emphasis so we rather
% use the cancel package.
% \cmd{\uline}\uline{important} underlined text like important
% \uuline{urgent} double-underlined text like urgent
% \uwave{boat} wavy underline like 
% boat
% \sout{wrong} line struck through word like wrong
% \xout{removed} marked over like removed
% \dashuline{dashing} dashed underline like dashing
% \dotuline{dotty} dotted underline like 
% dotty
% 
% Similar functionality is also offered by the \pkgname{soul}
%
%The following commands are defined for general use:\\[5pt]
%  \indent \begin{tabular}{l@{\quad}l}\hline\noalign{\vskip2pt}
%   |\uline{important}|  & underlined text like \uline{important}\\[1pt]
%   |\uuline{urgent}|    & double-underlined text like  \uuline{urgent}\\[1pt]
%   |\uwave{boat}|       & wavy underline like {\let\ULleaders\cleaders\uwave{boat}}\\[1pt]
%   |\sout{wrong}|       & line struck through word like \sout{wrong}\\[1pt]
%   |\xout{removed}|     & marked over like \xout{removed} \\[1pt]
%   |\dashuline{dashing}|& dashed underline like \dashuline{dashing}\\[1pt]
%   |\dotuline{dotty}|   & dotted underline like \dotuline{dotty}\\[3pt]\hline
%  \end{tabular}\\[6pt]
%   Other similar commands can be defined with relative ease by utilizing the
%   \cs{markoverwith} command provided by ulem.

%    \begin{macrocode}
\newif\ifULEM
\IfStyFileExists{ulem}
{\ULEMtrue\RequirePackage[normalem]{ulem}}
{}
%    \end{macrocode}
% 
%
%This is a nice package for canceling anything in mathmode with a slash, 
%backslash or a \verb+X+. To get
%a horizontal line we can define an additional macro called 
%with an optional argument
%for the line color (requires package \pkg{color}):
%
%$ 
%\slashed{D} \slashed{p} \slashed{k} \slashed{r} \slashed{A}
% \slashed{f}
%\slashed{U} \slashed{\partial}
% $
%    \begin{macrocode}
% If we have slashed.sty, use it.
\newif\ifhaveslashed
\IfStyFileExists*{slashed}
  {\haveslashedtrue\RequirePackage{slashed}}
  {}

\newif\ifhavecancel
\IfStyFileExists*{cancel}
  {\havecanceltrue\RequirePackage{cancel}}
  {}
%    \end{macrocode}
%
%
%It is no problem to redefine the cancel macros to get also colored lines. 
%    \begin{macrocode}
\newcommand\hcancel[2][red]{\setbox0=\hbox{#2}%
	\rlap{\raisebox{.45\ht0}{\textcolor{#1}{\rule{\wd0}{1pt}}}}#2}
%    \end{macrocode}
%A horizontal line for
%single characters is also decribed in section~\vref{sec:Accents}.
%
%\medskip
%\noindent
%\verb+\cancel+: $f(x)=\dfrac{\left(x^2+1\right)\cancel{(x-1)}}{\cancel{(x-1)}(x+1)}$\\[0.5cm]
%\verb+\bcancel+: $\bcancel{3}\qquad\bcancel{1234567}$\\[0.5cm]
%\verb+\xcancel+: $\xcancel{3}\qquad\xcancel{1234567}$\\[0.5cm]
%\verb+\hcancel+: $\hcancel{3}\qquad\hcancel[red]{1234567}$
%
%\bigskip
%\begin{verbatim}
% $f(x)=\dfrac{\left(x^2+1\right)\cancel{(x-1)}}{\cancel{(x-1)}(x+1)}$\\[0.5cm]
% $\bcancel{3}\qquad\bcancel{1234567}$\\[0.5cm]
% $\xcancel{3}\qquad\xcancel{1234567}$\\[0.5cm]
% $\hcancel{3}\qquad\hcancel[red]{1234567}$
%\end{verbatim}
% \section{staves}
%
% This is a peculiar package providing some old Icelandic runes.
% \runictext{\alphabet}
% \staveXXXV \staveVI \runictext{abcdef}
%    \begin{macrocode}
\newif\ifSTAVE
\newcommand\STAVE{\pkgname{staves}}
\IfStyFileExists{staves}
  {\STAVEtrue\usepackage{staves}}
  {}
%    \end{macrocode}

% No point wasting a math alphabet on shuffle.
%    \begin{macrocode}
\newif\ifSHUF
\newcommand\SHUF{\pkgname{shuffle}}
\IfStyFileExists{shuffle}
  {\let\origDeclareSymbolFont=\DeclareSymbolFont
   \let\origDeclareMathSymbol=\DeclareMathSymbol
   \renewcommand{\DeclareSymbolFont}[5]{}
   \renewcommand{\DeclareMathSymbol}[4]{%
     \DeclareRobustCommand{##1}{{\usefont{U}{shuffle}{m}{n}\char##4\relax}}
   }
   \SHUFtrue
   \RequirePackage{shuffle}
   \let\DeclareSymbolFont=\origDeclareSymbolFont
   \let\DeclareMathSymbol=\origDeclareMathSymbol
  }
  {}
%    \end{macrocode}



%    \begin{macrocode}
\RequirePackage{framed}
\RequirePackage{varioref}
\RequirePackage{setspace}
%    \end{macrocode}
%    \begin{macrocode}

\providecommand*\switch[2]{{\fontfamily{#1}\selectfont #2}}
%    \end{macrocode}  

%
% \section{Producing Math Symbols}
% 
% The centernot package  provides \cs{centernot} 
% that prints the symbol \cs{not} on the
% following argument. Unlike \cs{not} the symbol is horizontally centered. The \pkgname{amssymb} and \pkgname{mathbax} provide built-in symbols. The package
%can be used for building other symbols. 
% (\seedocs{centernot}).
%    \begin{macrocode}
\newif\ifhavecenternot
\IfStyFileExists*{centernot}%
  {\havecenternottrue\RequirePackage{centernot}}
  {}
%    \end{macrocode}
%

% and spacing commands 
% which can be handy,
%
% \section{spacing}
% \begin{macro}{\hspace} This is a \textit{hairspace}, here defined 
% as 1pt.
% \begin{macro}{\hquad} This is a half squad space
%    \begin{macrocode}
\newcommand{\hairsp}{\hspace{1pt}}% hair space
\newcommand{\hquad}{\hskip0.5em\relax}% half quad space
% Sometimes, we need a little more horizontal spacing, too (used for symbols).
\newcommand{\qqquad}{\qquad\quad}
\newcommand{\TODO}{\textcolor{red}{\bf TODO!}\xspace}
\newcommand{\ie}{\textit{i.\hairsp{}e}\xspace} %removed\@
\newcommand{\eg}{\textit{e.\hairsp{}g.}\xspace}
\newcommand{\BC}[1]{\textsc{#1 BC}} %European Union Style Guide FIX
\newcommand{\AD}[1]{\textsc{AD #1}} %European Union Style Guide FIX
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Standard phantom widths}
%
%    \begin{macrocode}
\newcommand\Zi{\phantom{0}} %Z conflicts with symbols 
\newcommand\ZZ{\phantom{00}}
\newcommand\ZZZ{\phantom{000}}
\newcommand\ZZZZ{\phantom{0000}}
\providecommand\newthought[1]{%
   \addvspace{1.0\baselineskip plus 0.5ex minus 0.2ex}%
   \noindent\textsc{#1}%
}
%    \end{macrocode}
%
%  \let\equation\gather             %% See tabu and hyperref docs
%  \let\endequation\endgather
%
%
% \section{Logos and other common elements}
%
% Here we define some of the most commonly used logos. Different
% authors preferences vary. Some like to type \cmd{\TeX}, others
% myself included prefer all lowercase typing, e.g., \cmd{\tex}
% and others uppercasing the commands. We provide as many variants
% as possible. There are two or three packages providing logos. In
% the end we provide our own.
%
%    \begin{macrocode}
\newcommand{\seedocs}[1]{%
  See the #1 documentation for more information%
}
%    \end{macrocode}
% 
% \subsection{hologo}
% If you intend to have any fancy logos in bookmarks then the
% \pkgname{hologo} can be used.
% The package starts a collection of logos with 
% support for bookmarks strings. \seedocs{hologo}.
%    \begin{macrocode}
\RequirePackage{hologo}
%    \end{macrocode}
%
% \subsection{metalogo}
% 
% The package \pkgname{metalogo} exposes the spacing parameters for 
% the various TEX logos to the end
% user (and suitably redefines the logos in a generalised way). It is intended to help
% XeLaTeX users, who use various typefaces, to easily optimise the logos for each
% typeface. Still, the package remains useful if any typeface is used, not necessarily
% loaded through XeTEX. It is known that, in Plain TEXâ€™s definition of \TeX, the
% lower right serif on the â€˜Eâ€™ protrudes through the â€˜Xâ€™ in cmr and cmr; this
% package can be used to fix this sort of unacceptable grotesque.
%
%    \begin{macrocode}
\RequirePackage{metalogo}
\newcommand\TEX      {\TeX\xspace}
\let\tex\TEX
\newcommand\LUA      {Lua\xspace}
\let\lua\LUA
\newcommand\PDFTEX   {pdf\TeX\xspace}
\let\pdftex\PDFTEX
\newcommand\LUATEX   {Lua\TeX\xspace}
\let\luatex\LUATEX
\newcommand\XETEX    {\XeTeX\xspace}
\let\xetex\XETEX
\newcommand\LATEX    {\LaTeX\xspace}
\let\latex\LATEX
\newcommand\pdfLaTeX {pdf\latex}
\newcommand\LUALATEX {Lua\LaTeX\xspace}
\let\lualatex\LUALATEX
\newcommand\CONTEXT  {Con\TeX t\xspace}
\let\context\CONTEXT
\newcommand\OpenType {\texttt{Open\kern-.25ex Type}\xspace}
\let\opentype\OpenType
\def\latexe{\LaTeX\xspace}
\def\bibtex{\texttt{bibTeX\xspace}}
\newcommand{\fontdefdtx}{fontdef.dtx\xspace}
\newcommand{\postscript}{PostScript\index{PostScript}\xspace}
\newcommand{\TC}{\pkgname{textcomp}}
%\newcommand\TX{\pkgname{txfonts}}
\newcommand\PX{\pkgname{pxfonts}}
\newcommand{\TeXbook}{%
  The \TeX{}book\index{TeXbook, The=\TeX{}book, The}~\cite{Knuth:ct-a}\xspace}
\newcommand{\ctt}{%
  \texttt{comp.text.tex}%
  \index{comp.text.tex=\texttt{comp.text.tex} (newsgroup)}\xspace}
\newcommand{\fntenc}[1][]{%
  \def\firstarg{#1}%
  font encoding%
  \ifx\firstarg\empty%
    \index{font encodings}%
  \else
    \index{font encodings>\firstarg}%
  \fi
}
\DeclareRobustCommand{\xelatexInternal}{%
  \mbox{X\lower0.5ex\hbox{\kern-0.15em\reflectbox{E}}\kern-0.1em\LaTeX}}
  \newcommand{\xelatex}{\xelatexInternal\index{XeLaTeX=\xelatexInternal}\xspace}
  
\DeclareRobustCommand\otr{OTR\xspace}
\let\alltex\LaTeX
\let\doccmd\cmd
%
\def\texbook{\TeX book\xspace}
\def\alltex{(All\kern-.075em)\kern-.075em\TeX\xspace}
\def\ams{American Mathematical Society\xspace}
\def\AmS{$\mathcal{A}$\kern-.1667em\lower.5ex\hbox
    {$\mathcal{M}$}\kern-.125em$\mathcal{S}$\xspace}
\def\amsmath{\AmS{}math\xspace}
\def\amslatex{\AmS-\LaTeX\xspace}
\def\amstex{\AmS-\TeX\xspace}
%
\def\docpkg#1{\texttt{#1}}
%    \end{macrocode}
%
% The package \pkgname{scalefnt} should not be used, with XeLaTeX or LuaTeX.
% It might have some uses with older schemes.
%    \begin{macrocode}
\ifengine{}{}{\RequirePackage{scalefnt}	}
%    \end{macrocode}
%
%
% \section{Miscellaneous Packages}
%
%
% We include here everything that does not fit into the other categories.
% 
%    \begin{macrocode} 
\RequirePackage{chngcntr}
\RequirePackage{multienum}
\RequirePackage{fourier-orns}
%    \end{macrocode}
%
% \subsection{eso-pic}
% Since we loading pgf, many of the things that eso-pic does can be taken over by |pgf|. I am not too sure
% if we should leave this in the long-term.
%
%    \begin{macrocode}
\RequirePackage{eso-pic}
%\RequirePackage{layouts}
%    \end{macrocode}
%
% The package \pkgname{aplhalph} provides alphabetical numbering. 
%
%   \begin{macrocode}
\RequirePackage{alphalph}
\RequirePackage{fmtcount}
% 
\RequirePackage{varwidth}
\RequirePackage{comment}
\RequirePackage{textcase}
\RequirePackage[autostyle=false]{csquotes}
\RequirePackage{alltt}[1997/06/16]
\RequirePackage{caption} % check
%\RequirePackage{currfile} affects FileInput problematic

%\RequirePackage{filemod}
\RequirePackage{afterpage}
\RequirePackage{environ}
\RequirePackage{mwe}
%    \end{macrocode}
%
% \begin{macro}{pdfpages}
% If you need to insert an existing, possibly multi-page, |PDF| file into your 
% LaTeX document, whether or not the included |PDF| was compiled with LaTeX or 
% another tool, consider using the \pkg{pdfpages} package. We load it with
% the option final.
% 
%    \begin{macrocode}
\RequirePackage[final]{pdfpages}
%    \end{macrocode}
% \end{macro}
%
% Include the pages you want using:
%
%    |\includepdf[pages=3-8]{sample.pdf}|
%
%    \begin{macrocode}
\newif\ifCCLIC
\newcommand\CCLIC{\pkgname{cclicenses}}
\IfStyFileExists{cclicenses}
  {\CCLICtrue
   \RequirePackage{cclicenses}
   % cclicenses doesn't get along with textcomp's remapping of
   % \textcircled to the TS1 font encoding.  Mapping it back doesn't
   % _seem_ to cause any problems.
   \DeclareTextAccentDefault{\textcircled}{OMS}
  }
  {}
%    \end{macrocode}
%  
% \subsection{Ornaments}      
% 
% The \pkgname{fourier} defines a lot of math symbols, but we care about only a few of
% them.  Hence, we load only the fourier-orns package and manually
% define everything else as text-mode symbols.
% 
%    \begin{macrocode} 
\ifxetex\else
\newif\ifFOUR
\newcommand\FOUR{\pkgname{fourier}}
\IfStyFileExists{fourier}
  {\FOURtrue
   \RequirePackage{fourier-orns}
   % Define single-glyph symbols.
   \DeclareFontEncoding{FMS}{}{}
   \DeclareFontSubstitution{FMS}{futm}{m}{n}
   \DeclareFontEncoding{FML}{}{}
   \DeclareFontSubstitution{FML}{futmi}{m}{it}
   \newcommand{\fourierdef}[6]{%
     \DeclareRobustCommand{##1}{{\usefont{##2}{##3}{##4}{##5}\char##6}}}
   \fourierdef{\parallelslant}{FMS}{futm}{m}{n}{134}
   \fourierdef{\nparallelslant}{FMS}{futm}{m}{n}{143}
   \fourierdef{\FOURrho}{FML}{futmi}{m}{it}{26}
   \fourierdef{\FOURvarrho}{FML}{futmi}{m}{it}{37}
   \fourierdef{\varvarrho}{FML}{futmi}{m}{it}{129}
   \fourierdef{\FOURpi}{FML}{futmi}{m}{it}{25}
   \fourierdef{\FOURvarpi}{FML}{futmi}{m}{it}{36}
   \fourierdef{\varvarpi}{FML}{futmi}{m}{it}{131}
   \fourierdef{\FOURpartial}{FML}{futmi}{m}{it}{64}
   \fourierdef{\varpartialdiff}{FML}{futmi}{m}{it}{130}
   \fourierdef{\FOURtexteuro}{TS1}{futx}{m}{n}{191}
   % Fake a math accent with text-mode commands.
   \DeclareRobustCommand{\FOURfakewidetopaccent}[5]{%
     \setbox0=\hbox{\ensuremath{##1}}%
     \setbox1=\hbox{\ensuremath{abc}}%
     \leavevmode
     \ifdim\wd0<\wd1
       \kern1pt
       \rlap{\raisebox{##2}{\makebox[\wd0]{\usefont{FMX}{futm}{m}{n}\char##3}}}%
       \kern-0.1em
       \box0
     \else
       \rlap{\raisebox{##4}{\makebox[\wd0]{\usefont{FMX}{futm}{m}{n}\char##5}}}%
       \box0
     \fi
   }

   % Manually define Fourier's extensible accents.  Note that we don't
   % bother trying to use Fourier's \mathring to construct the
   % \FOURwidering symbol.
   \DeclareFontEncoding{FMX}{}{}
   \DeclareFontSubstitution{FMX}{futm}{m}{n}
   \DeclareRobustCommand{\FOURwidearc}[1]{%
     \FOURfakewidetopaccent{##1}{0ex}{216}{0.5ex}{217}}
   \DeclareRobustCommand{\FOURwideOarc}[1]{%
     \FOURfakewidetopaccent{##1}{0ex}{228}{0.5ex}{229}}
   \DeclareRobustCommand{\FOURwideparen}[1]{%
     \FOURfakewidetopaccent{##1}{0ex}{148}{0.5ex}{150}}
   \DeclareRobustCommand{\FOURwidering}[1]{\overset{\smash{\vbox to .2ex{%
     \hbox{$\mathring{}$}}}}{\FOURwideparen{##1}}}

   % Manually define Fourier's variable-sized delimiters.
   \newcommand{\fouriercdef}[6]{%
     \DeclareRobustCommand{##1}{%
       \textvcenter{\usefont{##2}{##3}{##4}{##5}\char##6}}}
   \fouriercdef{\FOURtllbracket}{FMX}{futm}{m}{n}{133}
   \fouriercdef{\FOURdllbracket}{FMX}{futm}{m}{n}{139}
   \fouriercdef{\FOURtrrbracket}{FMX}{futm}{m}{n}{134}
   \fouriercdef{\FOURdrrbracket}{FMX}{futm}{m}{n}{140}
   \newcommand*{\FOURverticals}[1]{%
     \vbox{%
       \baselineskip=-\maxdimen
       \lineskiplimit=\maxdimen
       \lineskip=0pt%
       \usefont{FMX}{futm}{m}{n}%
       \ialign{####\cr##1}%
     }%
   }
   \DeclareRobustCommand{\FOURtVERT}{%
     \raisebox{0.5ex}{\textvcenter{\FOURverticals{\char147\cr\char147\cr}}}}
   \DeclareRobustCommand{\FOURdVERT}{%
     \raisebox{0.5ex}{\textvcenter{\FOURverticals{\char147\cr\char147\cr\char147\cr\char147\cr}}}}
  }
  {}
\fi
%    \end{macrocode} 
%
% \begin{macro}{dirtree}
% The \pkgname{dirtree} provides commands to draw directory-like charts.|forest| is a much better
% alternative.
%    \begin{macrocode}
\RequirePackage{dirtree}
%    \end{macrocode}
% \end{macro}
%    
% \section{Archaic Symbols}     
%
% These packages are included here, only because I have an interest in
% them in some documents I have. I understand that for the average user
% they might not be of interest. We conditionally load them based on
% a conditional and also to develop the concept of `bundles' which  I
% explain a bit later on.
%
% Uncial font
% 
% \subsection{Linear A}
%    \begin{macrocode}
\RequirePackage{uncial}
\newif\ifarchaic
  \archaictrue
\ifarchaic
%    \end{macrocode}


%    \begin{macrocode}  
\newif\ifLINA
\newcommand\LINA{\pkgname{lineara}}
\IfStyFileExists{lineara}
  {\LINAtrue\RequirePackage{lineara}}
  {}

\newif\ifLINB
\newcommand\LINB{\pkgname{linearb}}
\IfStyFileExists{linearb}
  {\LINBtrue\RequirePackage{linearb}}
  {}

\newif\ifCYPR
\newcommand\CYPR{\pkgname{cypriot}}
\IfStyFileExists{cypriot}
  {\CYPRtrue\RequirePackage{cypriot}}
  {}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\newif\ifSARAB
\newcommand\SARAB{\pkgname{sarabian}}
\IfStyFileExists{sarabian}
  {\SARABtrue\RequirePackage{sarabian}}
  {}
%    \end{macrocode}
%
% \subsection{Cuneiform}
%
% Cuneiform .
%    \begin{macrocode}
\newif\ifPRSN
\newcommand\PRSN{\pkgname{oldprsn}}
\IfStyFileExists{oldprsn}
  {\PRSNtrue\RequirePackage{oldprsn}}
  {}

\RequirePackage{hieroglf}
\newif\ifUGAR
\newcommand\UGAR{\pkgname{ugarite}}
\RequirePackage{ugarite}
\IfStyFileExists{ugarite}
  {\UGARtrue\RequirePackage{ugarite}}
  {}
%end archaic   
%    \end{macrocode}
%
% \section{Epi-Olmec}
%
% We load the \pkgname{epiolmec} for typesetting the Epi-Olmec script. This is described
% in the scripts chapters.
%
%    \begin{macrocode}
\newif\ifOLMEC
\newif\ifscriptolmec \scriptolmectrue
\cxset{olmec/.is if=scriptolmec}
\cxset{olmec=true}
% 
\ifscriptolmec
\RequirePackage{epiolmec}
\IfStyFileExists{epiolmec}
  {\OLMECtrue\RequirePackage{epiolmec}}
  {}
\fi
%    \end{macrocode}
%
% \section{Ancient Greek}
%
% \subsection{Philokalia}
%
% We load the \pkgname{philokalia} for typesetting ancient greek using the \idxfont{philokalia} font.
% The package loads the \pkgname{xlextra}, which we do not want. It is loaded by fontspec
% as required.
% If we are using luatex this will issue a warning and abort. Better to fake it for both.
% Also modifies lettrine package !aha this took long!
%    \begin{macrocode}

\newif\ifPHILOKALIA
\def\loadphilokalia{%
  \@namedef{ver@xltxtra.sty}{}% a fake for a "xlextra" package
  \RequirePackage{philokalia}
  \IfStyFileExists{philokalia}
    {\PHILOKALIAtrue\RequirePackage{philokalia}}
    {}
}%
%\ifengine{\loadphilokalia}{\loadphilokalia}{}
%\ifPHILOKALIA
%  \newfontfamily\plk{Philokalia-Regular}
%  \newfontfamily\PHtitl[Script=Greek,RawFeature=+titl;grek]{Philokalia-Regular}
%\fi
%    \end{macrocode}
%
%
%
% \section{Titles, authors, abstracts and the like}
%
% 	We want to have the option to make titles both as normally used in the |book| class
%	but also as used in articles i.e., not to emit a new page after it is invoked.
%	The definition is straight from the article class.
% \begin{macro}{\@maketitle}
%    This macro takes care of formatting the title information when we
%    have no separate title page.
%
%    We always start a new page, leave some white space and center the
%    information. The title is set in a |\LARGE| font, the author
%    names and the date in a |\large| font. CHECK THIS IF HERE
%    \begin{macrocode}
\def\@maketitle{%
  %\newpage
  \null
  \vskip 2em%
  \begin{center}%
  \let \footnote \thanks
    {\LARGE \@title \par}%
    \vskip 1.5em%
    {\large
      \lineskip .5em%
      \begin{tabular}[t]{c}%
        \@author
      \end{tabular}\par}%
    \vskip 1em%
    {\large \@date}%
  \end{center}%
  \par
  \vskip 1.5em}
\fi
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\maketitle}
%    The macro to generate titles is easily altered in order that it
%    can be used more than once (an article with many titles)\footnote{Definition is straight 	out of the |doc| package and I only added minor tweaks to only start a new page 
%	on demand.}.  In the
%    original, diverse macros were concealed after use with
%    |\relax|. We must cancel anything that may have been put
%    into |\@thanks|, etc., otherwise {\em all\/} titles will
%    carry forward any earlier such setting!
%                 \cs{@makefnmark} and \cs{@makefntext}.
%    \begin{macrocode}
\def\nonewpage{}
\def\maketitle{\par
      \begingroup \def \thefootnote {\fnsymbol {footnote}}%
      \setcounter {footnote}\z@
      \def\@makefnmark{\hbox to\z@{$\m@th^{\@thefnmark}$\hss}}%
      \long\def\@makefntext##1{\parindent 1em\noindent
            \hbox to1.8em{\hss$\m@th^{\@thefnmark}$}##1}%
      \if@twocolumn \twocolumn [\@maketitle ]%
      \else \nonewpage \global \@topnum \z@ \@maketitle \fi
%    \end{macrocode}
%    For special formatting requirements (such as in TUGboat), we use
%    pagestyle |titlepage| for this; this is later defined to be
%    |plain|, unless already defined, as, for example, by
%    |ltugboat.sty|.
%    \begin{macrocode}
       \thispagestyle{titlepage}\@thanks \endgroup
%    \end{macrocode}
%    If the driver file documents many files, we don't want parts of a
%    title of one to propagate to the next, so we have to cancel
%    these, however before we save in another macro for later
%    usage in headers, if required. :
%    \begin{macrocode}
      \setcounter {footnote}\z@
      \gdef\@date{\today}\gdef\@thanks{}%
      \let\doctitle@cx\@title
      \let\docauthor@cx\@author
%
      \gdef\@author{}\gdef\@title{}%
}
%    \end{macrocode}
% \end{macro}
%
%	As you can see from below, it can now work anywhere. 
% \maketitle
% 
%  Test |\@author| and test |\doctitle@cx| |\docauthor@cx|,
% 
%
% \begin{macro}{\ps@titlepage}
%	 When a number of articles are concatenated into a
%    journal, for example, it is not usual for the title pages of such
%    documents to be formatted differently.  Therefore, a class
%    such as \textsf{ltugboat} can define this macro in advance.
%    However, if no such definition exists, we use pagestyle
%    \texttt{plain} for title pages.Again the definition is 
%	from the \pkg{doc} package.
%    \begin{macrocode}
\@ifundefined{ps@titlepage}
    {\let\ps@titlepage=\ps@plain}{}
%    \end{macrocode}
% \end{macro}
%
% \section{Defining Abstracts, summaries, precis, keywords etc}
%
% \subsection{Abstract}
%
% \begin{environment}{abstract}
%
%	This is an interesting environment provided in the standard
%	classes only for articles. However too many publications 
%	require such abstracts in other sections as well so we redefine
%	it here to make it more extensive.
%	
%    When we are producing a separate titlepage we also put the
%    abstract on a page of its own. It will be centred vertically on
%    the page.
%
%    Note that this environment is not defined for books.
%         to avoid page break after abstract heading.
%    \begin{macrocode}
\def\abstractname{Abstract}
\@ifundefined{abstract}{%
  \newenvironment{abstract}{%
      \titlepage
      \null\vfil
      \@beginparpenalty\@lowpenalty
      \begin{center}%
        \bfseries \abstractname
        \@endparpenalty\@M
      \end{center}}%
     {\par\vfil\null}
%    \end{macrocode}
%
%    When we are not making a separate titlepage --the default for the
%    article document class-- we have to check if we are in twocolumn
%    mode. In that case the abstract is as a |\section*|, otherwise
%    the quotation environment is used to typeset the abstract.
%    \begin{macrocode}
}{}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{chapterabstract} This is an identical environment to that
%	provided for abstract and can be used anywhere in the document. 
%    \begin{macrocode}
\def\chapterabstractname{Summary}

\newenvironment{chapterabstract}{%
   \center
     {\bfseries \chapterabstractname\vspace{-.5em}\vspace{\z@}}
   \endcenter\quotation
}{\endquotation}
%    \end{macrocode}
% \end{environment}
%
% \begin{chapterabstract}
%   \lorem
% \end{chapterabstract}
%
% \begin{macro}{chapter abstractname}  We define a key for the summary or
% 	or abstract at the top of a chapter. In most cases it is just called a summary.
%     One can use the \cs{chapterabstractname} to change it to another language.
%    \begin{macrocode} 
\cxset{chapter abstractname/.store in =\chapterabstractname}
\cxset{chapter abstractname= SUMMARY}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\precis} Precis is a command to be used for summaries. The same summary 
% can also be used for the toc. 
%    \begin{macrocode}
\newcommand\precis[1]{%
     \precis@cx{#1}%
     \precistoc@cx{#1}%
     \addvspace{20pt} % check this should be settable
}
%
\def\precis@cx#1{%
\bgroup
\small
\centering
\parbox{.8\textwidth}{#1}
\par\medskip\egroup}

\def\precistoc@cx#1{%
  \addtocontents{toc}{%
    \protect\bgroup
    \protect\parindent0pt
    \protect\color{preciscolor}#1\par
    \protect\medskip%
 \egroup}
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\addtocimage@cx}
%    \begin{macrocode}
\long\def\addtocimage@cx#1#2#3{%
\tikz[remember picture,overlay] {%
\node[anchor=east,xshift=#1,yshift=#2] at (0,0) {\includegraphics[width=.15\linewidth]{#3}};}%
}
\def\addtocimage#1#2#3{%
 \addtocontents{toc}{\protect\addtocimage@cx{#1}{#2}{#3}}%
}
%    \end{macrocode}
% \end{macro}

%
% \begin{chapterabstract}
%   \lorem
% \end{chapterabstract}
%
% \subsection{Limitations of the Lamport's approach and some alternatives}
%
%	When Lamport \textit{et al.} incorporated quotations as a means to
%	defining the \texttt{abstract} commands there was a need to conserve 
%	memory and computing type. Utilizing these commands as I have shown 
%	is a bit of a kludge and perhaps not semantically correct. Some
%	books have quotations and quotes that do not exactly fit to such styling
%	so changing the layout of a quotation can potentially break oher
%	parts. We discuss these issues further in the chapter 
%	\textit{The Special Environments Quotation and Quote} on
%	 \pageref{quotations} and we illustrate it 
%    with \fref{frightquotation}.
%
% \section{Quotations}
% 
%    \begin{macrocode}
\cxset{
  quotation above/.store in=\quotationabove@cx,
  quotation left margin/.store in=\quotationleftmargin@cx,
  quotation right margin/.store in=\quotationrightmargin@cx,
  quotation parsep/.store in=\quotationparsep@cx,
  quotation font-size/.store in=\quotationfontsize@cx,
  quotation parindent/.store in=\quotationparindent@cx,
  quotation font-name/.store in=\quotationfontname@cx,
 }
%    \end{macrocode}
%
% \begin{macro}{\setquotation} Macro to create the quotation
%	environment. We need to think of a better way here. Saved
%   old environment.
%    \begin{macrocode}
\let\latexquotation\quotation
\let\endlatexquotation\endquotation
\def\setquotation#1{%
\cxset{#1}
\renewenvironment{quotation}
               {\par\addvspace{\quotationabove@cx}
                \list{}{\listparindent\quotationparindent@cx%
                        \leftmargin=\quotationleftmargin@cx%
                        \itemindent    \listparindent
                        \rightmargin \quotationrightmargin@cx
                        \parsep=\quotationparsep@cx%
                        \quotationfontname@cx\quotationfontsize@cx}%
                \item\relax\hskip-\listparindent}
               {\endlist}
}
%    \end{macrocode}
% \end{macro}
%CHANGE FOR SETFONT
%    \begin{macrocode}
\setquotation{%
  quotation above=20pt, 
  quotation left margin=50pt,
  quotation right margin=0pt,
  quotation parsep=0pt,
  quotation font-size=\normalsize,
  quotation parindent=12pt,
  quotation font-name=, 
}
%    \end{macrocode}
%
% \begin{quotation}
% \lipsum[1]
% \end{quotation}
%
% \begin{macro}{\setquote}
%    \begin{macrocode}
\cxset{
  quote above/.store in=\quoteabove@cx,
  quote left margin/.store in=\quoteleftmargin@cx,
  quote right margin/.store in=\quoterightmargin@cx,
  quote parsep/.store in=\quoteparsep@cx,
  quote font-size/.store in=\quotefontsize@cx,
  quote parindent/.store in=\quoteparindent@cx,
  quote font-name/.store in=\quotefontname@cx,
 }
\let\latexquote\quote
\let\endlatexquote\endquote
\def\setquote#1{%
  \cxset{#1}
  \renewenvironment{quote}
               {\par\addvspace{\quoteabove@cx}
                \list{}{\listparindent\quoteparindent@cx%
                        \leftmargin=\quoteleftmargin@cx%
                        \itemindent  \listparindent
                        \rightmargin\leftmargin
                        \parsep=\quoteparsep@cx%
                        \quotefontsize@cx\quotefontname@cx}%
                \item\relax\hskip-\listparindent}
               {\endlist}
  }

% Some default values
\setquotation{%
  quotation above=36pt,
  quotation left margin=50pt,
  quotation parsep=0pt,
  quotation font-size=\small,
  quotation parindent=12pt,
}
\setquote{%
  quote above=0pt,
  quote left margin=20pt,
  quote parsep=0pt,
  quote font-size=\small,
  quote parindent=12pt,
  quote font-name=,
}
%    \end{macrocode}
% \end{macro}
%
% \section{Miscellaneous macros}  
%
% \subsection{Margin notes and margin emphasis}
% 
% \parindent1em 
% 
%   \marge{Margin boxes} Marginal notes are commonly found in
% 	many publications, Tufte goes to the extreme and requires
%	all footnotes and citations to be as `sidenotes'. We provide
%	a number of commands, if nothing else to illustrate 
%	techniques for defining them.
%
%
% \begin{macro}{\MarginBox}
%    \begin{macrocode}
\newcommand{\marginbox@cx}[2][]{%
  \mbox{}\marginpar{\centering\scriptsize \color{teal}#2}%
  \ifthenelse{\not\equal{#1}{}}{\phantomsection\label{#1}}{}%
}
\newcommand{\marge}[2][]{%
  \bigskip\par\marginbox@cx[#1]{#2}%
}
%    \end{macrocode}
% \end{macro}

% 
% \subsection{Paragraph setting commands}
%
%    \begin{macrocode}
%
\providecommand*{\linenottooshort}[1][4em]{%
  \@tempdima=\hsize
 \advance\@tempdima-#1
 \leftskip0pt
 \rightskip\leftskip
\parfillskip\@tempdima\@minus\@tempdima
}
\providecommand*{\lastlineparrule}{%
  \hrule height 0.5ex depth \@tempdimb\relax}

\providecommand*{\lastlinerulefill}{%
  \let\\\@centercr
  \@tempdimb=-0.5ex \advance\@tempdimb 0.4pt
  \unskip\nobreak\space
  \leaders\lastlineparrule\hskip\@flushglue
  \vadjust{}{\parfillskip\z@\@@par}}
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand{\hangleft}[1]{\makebox[0pt][r]{#1}}

\DeclareRobustCommand\ctan[1]{%
  \textcolor{green}{%
      \href{http://www.ctan.org/pkg/#1} {#1}%
  \footnote{\protect\url{http://www.ctan.org/pkg/#1}}}
  \index{Packages>#1}%
}
%
%
%    \end{macrocode}
%
% \begin{macro}{\keyval}
%	The macro \cs{keyval} typesets, key value lists and their options.
%	\medskip
%
%    \keyval{test}{\marg{option1|option2|option2|option4}}{ As per this example.}
%    \keyval{test}{\marg{option1|option2|option2|option4}}{ As per this example.}
%
%	We first measure the width of the option and not use it (want to make it a bit
%	flexible at a later stage. We also ensure that the catcode of \verb+|+ is set properly
%	in case anyone is using short verbatim commands, as we do in this document.
%
%    \begin{macrocode}
\newlength\temp@cx
\def\keyval{%
  \bgroup
  \catcode`|=11
  \@keyval}
%
\def\@keyval#1#2#3{%
  \settowidth\temp@cx{#1}%
  \parindent-30pt
  \hangindent30pt
  \par\leavevmode%
{\color{teal}\bfseries #1}\thinspace=\thinspace#2% 
\hspace*{.5em}#3%
\par\addvspace{1.5pt}%
\egroup
}
%
%    \end{macrocode}
% \end{macro}
%
% \section{Documentation Macros}

% This section defines commands for printing documentation
% such as this one. It draws inspiration and plagiarizes pgf,
% doc,symbols and many other packages for which I am grateful.
% First some macros for indexing commands.
% 
%    \begin{macrocode}
% Define a table environment that's similar to symtable except that it
% floats and it doesn't write an entry into the Table of Contents.  This
% is used for tables that contain something other than symbol lists.
\def\oarg#1{%
  \colOpt{{\ttfamily[}\meta{#1}{\ttfamily]}}}%
%  
\def\DescribeMacro{\leavevmode\@bsphack
   \begingroup\MakePrivateLetters\Describe@Macro}
\def\Describe@Macro#1{\endgroup
              {\raggedleft\PrintDescribeMacro{#1}}%
              \SpecialUsageIndex{#1}\@esphack\ignorespaces}


\def\DescribeEnv{\leavevmode\@bsphack\begingroup\MakePrivateLetters
  \Describe@Env}
\def\Describe@Env#1{\endgroup
              {\raggedleft\PrintDescribeEnv{#1}}{}%
              \SpecialEnvIndex{#1}\@esphack\ignorespaces}
\setlength\marginparpush{0pt}  



\newlength{\atemp}
 \def\PrintDescribeMacro#1{%
  \settowidth\atemp{\string #1} 
  \strut\MacroFont\color{thered}\normalsize\string#1}

\def\Describe#1{%
   \settowidth\atemp{\string #1}% 
  \par\penalty-500\vskip3ex\noindent
  \DescribeMacro{#1}\args}
\def\DescribeOther{\vskip-4ex\Describe}

\def\args#1{%
  \def\bbl@tempa{#1}%
  \ifx\bbl@tempa\@empty\else#1\vskip1ex\fi\ignorespaces}


\newenvironment{nonsymtable}[1]{%
  \begin{table}[htbp]
  \centering
  \caption{#1}\medskip
}{%
  \end{table}
}
%    \end{macrocode}
%
% \section{The package needspace}
%
% The \pkgname{needspace} is currently mainatained by Wills Robertson and was originally developed by 
% Peter Wilson \citeyearpar{needspace}.
% It provides the commands \CMDI{\needspace}\marg{length} and \CMDI{\Needspace}\marg{length}, that
% will reserve an addition amount of space on the page as specified by the parameter \emph{length}. 
% 
%    \begin{macrocode}
\IfStyFileExists*{needspace}
  {\RequirePackage{needspace}}
  {\newcommand{\Needspace}[2]{\par \penalty-100\begingroup
     \setlength{\dimen@}{##2}%
     \dimen@ii\pagegoal \advance\dimen@ii-\pagetotal
     \ifdim \dimen@>\dimen@ii
       \break
     \fi\endgroup}
  }




% Index "X Y" and "Y, X".  The "begin" and "end" variants are for page ranges.

\newcommand{\cmdI}[2][]{%
  \def\first@arg{#1}%
  \ifx\first@arg\@empty
    \texttt{\verbatimfont\string#2}\indexcommand[#2]{#2}%
  \else
    \texttt{\verbatimfont\string#2}\indexcommand[#1]{#2}%
  \fi
}


\newcommand{\cmdX}[1]{\cmdI[$\string#1$]{#1}}
\newcommand{\cmdW}[1]{\cmdI[$\string\blackacc{\string#1}$]{#1}}
\newcommand{\cmdIp}[1]{\texttt{\string#1}\indexpunct[$#1$]{#1}}
%    \end{macrocode}

% \begin{macro}{\CMDI}\oarg[symbol command]\marg{command}
% This macro \#1 symbol to be typeset next to
% \#2 in the index |\gothic (symbol)|
%    \begin{macrocode}
\DeclareRobustCommand\CMDI[1]{%
\bgroup%
\smallskip 
\noindent\texttt{\verbatimfont\string#1}%
\indexcommand{#1}%
\egroup%
}

\DeclareRobustCommand\luacmd[1]{%
  \bgroup
    \smallskip
    \noindent\color{black}\textbf{\string#1}%
    \indexcommand{#1}
 \egroup%
}

\DeclareRobustCommand\luafunction[1]{%
  \bgroup
    \smallskip
    \noindent\color{black}\textbf{\verbatimfont#1}%
    \indexcommand{#1}
 \egroup%
}

%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\newcommand{\utfviii}{\mbox{UTF-8}\index{UTF-8}\xspace}
\newcommand{\idxboth}[2]{\mbox{}\index{#1 #2}\index{#2>#1}}
\newcommand{\idxbothbegin}[2]{\mbox{}\index{#1 #2|(}\index{#2>#1|(}}
\newcommand{\idxbothend}[2]{\mbox{}\index{#1 #2|)}\index{#2>#1|)}}
% Index TeXbook symbols and the CTAN repository.
\newcommand{\idxTBsyms}{%
  \index{symbols>TeXbook=\TeX{}book}%
  \index{TeXbook, The=\TeX{}book, The>symbols from}%
}

% Index logical styles.
\newcommand{\pkgname}[1]{%
  \href{http://ctan.org/pkg/#1}{#1}%
  \index{#1=\textsf{#1} (package)}%
  \index{packages>#1=\textsf{#1}}}
\let\pkg\pkgname

\newcommand*{\Lpack}[1]{\textsf {#1}}  
%\let\package\Lpack

\newcommand{\optname}[2]{%
  \textsf{#2}%
  \index{#2=\textsf{#2} (\textsf{#1} package option)}%
  \index{package options>#2=\textsf{#2} (\textsf{#1})}}
%    \end{macrocode}
%
% \begin{macro}{\docfilename}\marg{filename}
% This macro and all similar macros starting from doc
% typeset their argument and also add the argument to the 
% index.
%
%    \begin{macrocode}
\newcommand{\docfilename}[1]{%
  \texttt{#1}
  \index{#1=\texttt{#1} (file)}}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\newcommand{\docfileextension}[1]{%
  \texttt{#1}%
  \index{#1=\texttt{#1} (file extension)}}
   \index{#1=\texttt{#1}}
\newcommand{\PSfont}[1]{%
  #1%
  \index{#1 (font)}%
  \index{fonts>#1}%
}
%    \end{macrocode}
% 
%    \begin{macrocode}
\DeclareRobustCommand{\person}[2]{#1\index{#2, #1} #2}
\newcommand{\idxCTAN}{%
  \index{Comprehensive TeX Archive Network=Comprehensive \string\TeX{} Archive Network}}
% Typeset a string in various encodings.
\newcommand{\encone}[1]{{\fontencoding{T1}\selectfont#1}}
\newcommand{\encfour}[1]{{\fontencoding{T4}\selectfont#1}}
\newcommand{\encfive}[1]{{\fontencoding{T5}\selectfont#1}}
\newcommand{\encgreek}[1]{{\fontencoding{LGR}\selectfont#1}}

% Various punctuation marks confuse makeindex when used directly.
\let\magicrbrack=]
\let\magicequal=\=
\DeclareRobustCommand{\magicequalname}{\texttt{\string\=}}
\DeclareRobustCommand{\magicvertname}{\texttt{|}}
\DeclareRobustCommand{\magicVertname}{\texttt{\string\|}}

% Vertically center a text-mode symbol.
\newsavebox{\tvcbox}
\newcommand*{\textvcenter}[1]{%
  \savebox{\tvcbox}{#1}%
  \raisebox{0.5\dp\tvcbox}{\raisebox{-0.5\ht\tvcbox}{\usebox{\tvcbox}}}%
}
% Many tables have notes beneath them.  Define an environment in which to
% display such a note, with an optional, superscripted math symbol
% preceding it.
\newenvironment{tablenote}[1][]{
  \makebox[1em]{\ensuremath{^{#1}}}%
  \begin{minipage}[t]{0.75\textwidth}%
  \setlength{\parskip}{2ex}
}{%
  \end{minipage}%
}

% Define various messages we reuse repeatedly.
\newcommand{\twosymbolmessage}{%
  \begin{tablenote}
    Where two symbols are present, the left one is the ``faked'' symbol
    that \latexe provides by default, and the right one is the ``true''
    symbol that \TC\ makes available.
  \end{tablenote}
}

\newcommand{\notpredefinedmessage}{%
  \begin{tablenote}[*]
    Not predefined in \latexe.  Use one of the packages
    \pkgname{latexsym}, \pkgname{amsfonts}, \pkgname{amssymb},
    \pkgname{txfonts}, \pkgname{pxfonts}, or \pkgname{wasysym}.
  \end{tablenote}
}

\newcommand{\notpredefinedmessageABX}{%
  \begin{tablenote}[*]
    Not predefined in \latexe.  Use one of the packages
    \pkgname{latexsym}, \pkgname{amsfonts}, \pkgname{amssymb},
    \pkgname{mathabx}, \pkgname{txfonts}, \pkgname{pxfonts}, or
    \pkgname{wasysym}.
  \end{tablenote}
}

\newcommand{\usetextmathmessage}[1][]{%
  \begin{tablenote}[#1]
    It's generally preferable to use the corresponding symbol from
    \vref{math-text} because the symbols in that table work
    properly in both text mode and math mode.
  \end{tablenote}
}



\newcommand{\usefontcmdmessage}[2]{%
  These symbols must appear either within the argument to \cmd{#1} or
  following the \cmd{#2} font-selection command within a scope%
}
% Define an environment in which to write a single table of symbols.  The
% environment looks a lot like a table, but it doesn't float, and it gets
% an entry in the table of contents as opposed to the list of tables.
%
% The first argument is a conditional.  The table will appear only if
% the value of the conditional is true.  The second argument is the
% table's caption.

\def\fnum@table{\tablename~\thetable}

\newenvironment{symtable}[2][true]{%
  \expandafter\global\expandafter\let%
    \expandafter\ifshowsymtable\csname if#1\endcsname
  \ifshowsymtable
    \noindent%
    \begin{minipage}[t]{\linewidth}    % Prevent page breaks
    \begin{center}
    \refstepcounter{table}%
    \phantomsection
    \addcontentsline{toc}{subsection}{%
      \protect\numberline{\tablename~\thetable:}{#2}}%
    \@makecaption{\fnum@table}{#2}\medskip
    \let\next=\relax
  \else
    % The following was taken verbatim from verbatim.sty.
    \let\do\@makeother\dospecials\catcode`\^^M\active
    \let\verbatim@startline\relax
    \let\verbatim@addtoline\@gobble
    \let\verbatim@processline\relax
    \let\verbatim@finish\relax
    \let\next=\verbatim@
  \fi
  \next
}{%
  \ifshowsymtable
    \end{center}
    \end{minipage}
    \vskip 8ex minus 2ex
  \fi
}
%    \end{macrocode}
% \section{Scripts and Languages }

% |\g_phd_scripts_clist| holds a list of all the scripts that have been loaded.
% Managing the user interface is problematic, we will have users that require
% only one script and users that might want all of them.
% There is also the issue between the blurring of alphabets, langages and scripts
% Since we will always specify a pan-unicode font, which we will make available
% with the |phd| package. We map all scripts to this font first.
%
%  Declare two global lists to hold all the scripts available.
% The |\script_prop| holds info for each script loaded
%
%    \begin{macrocode}
\ExplSyntaxOn
\clist_new:N \g_phd_scripts_clist
\clist_new:N \g_phd_noto_clist
\prop_new:N \script_prop
%\input{notolist.txt.tex}
%    \end{macrocode}
%
% The noto list holds all the available noto fonts as of June 2015. It typesets a list in a 
% two column environment.
%
% \begin{macro}{\notofontlist}
%    \begin{macrocode}
\cs_set:Npn \notofontlist 
  {
    \begin{multicols}{2}
      \clist_map_inline:Nn \g_phd_noto_clist
        {
          ##1\par 
		  }
    \end{multicols}  
  }
%    \end{macrocode}	
% \end{macro}
% 
%    \begin{macrocode}	
\prop_put:Nnn \script_prop {name}{Armenian}
\prop_put:Nnn \script_prop {fonts}{NonoArmenian-Regular.ttf, Others}
\prop_get:NnN \script_prop {fonts}\l_tempa_tl
\prop_put:Nnn \script_prop {group}{Europe}
\prop_get:NnN \script_prop {group} \l_tempa_tl
%    \end{macrocode}
%
% \begin{docCommand}{SetPanUnicodeFont}{\marg{font name}}
%  Sets the pan-unicode font. This font is to be used as a default for all the scripts
%  The user can override it with another font.
% \end{docCommand}
%
%    \begin{macrocode}
\NewDocumentCommand\SetPanUnicodeFont { m }
  {
     \gdef\panunicodefontface{#1}
     \newfontfamily\panunicode[Scale=MatchUppercase]{#1}
  }
\SetPanUnicodeFont{code2000.ttf}    
%    \end{macrocode}

%    \begin{macrocode}
\cs_gset:Npn \makepanfontfamily#1{
%  \newfontfamily\cs:w #1fontfamily\cs_end: { #2 }
  \cs_gset_eq:cN {#1fontfamily}\panunicode
  \cs_gset_eq:cc {#1} {#1fontfamily}
}

\cs_gset:Npn \add_a_script:n #1
 {
   \clist_gput_left:Nn \g_phd_scripts_clist {#1 }
   \createscriptenvironment {#1}
   \createtextscript {#1}
 }   
 
 % add a script
\NewDocumentCommand\addascript { m } 
  {
    \add_a_script:n {#1}
  }
  
% Mock an environment 
\gdef\createscriptenvironment #1{
   \exp_after:wN\gdef\csname #1script\endcsname{\group_begin:
      \csname #1fontfamily\endcsname}
   \exp_after:wN\gdef\cs:w end#1script\cs_end:{\group_end: }
}  
\ExplSyntaxOff
%    \end{macrocode}
%  
% \begin{docCommand}{createtextscript}{ \marg{script name}}
% This creates a command of the form |\text|\meta{script name} i.e., for tibetan
% it will produce |\texttibetan|
% \end{docCommand}
%    \begin{macrocode}
\ExplSyntaxOn
\cs_gset:Npn \createtextscript #1{
   \long\exp_after:wN\gdef\csname text#1\endcsname ##1
   {
      \group_begin: 
      \cs:w #1fontfamily\cs_end:
        ##1
     \group_end:
   }
}  
%
%
\cs_gset:Npn \makefontfamily#1#2 {
\if_meaning:w\panunicodefontface#2
  \else:
  \exp_after:wN
  \newfontfamily\cs:w #1fontfamily\cs_end: { #2 }
  \cs_gset_eq:cc {#1} {#1fontfamily}
\fi:  
}
\ExplSyntaxOff
\NewDocumentCommand\AddScript { m } {
    \cxset{script/.code=\addascript{##1}}
    \cxset{#1 font/.code=\makefontfamily{#1}{##1}}
    \cxset{script=#1}
    \cxset{#1 font=\panunicodefontface}
}
\cxset{add script/.code = \AddScript{#1}}

\ExplSyntaxOn
\clist_gset:Nn \g_phd_scripts_clist {
      armenian,
      %hebrew,
     % arabic,
      syriac,
      thaana,
      devanagari,
      bamum,
      bengali,
      brahmi,
      coptic,
      gurmukhi,
      gujarati,
      oriya,
      tamil,
      telugu,
      kannada,
      malayalam,
      thai,
      lao,
      lisu,
      myanmar,
      georgian,
      ethiopic,
      cherokee,
      ogham,
      runic,
      buhid,
      bopomofo,
      tibetan, 
      cypriot, 
      telugu, 
      phoenician, 
      cham,
      vai,
      rejang,
      glagolitic,
      saurashtra,
         sinhala,
      sylhetinagari,
      tifinagh,
      kayahli,
     mongolian,
     oldturkic,
     cjk,
}

\clist_map_inline:Nn\g_phd_scripts_clist 
  {
    \AddScript{#1}
    \makepanfontfamily {#1}
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% A small utility macro to typeset unicode tables
% examples can be see in the chapters for scripts.
%puts the unicode label (removes last char and adds x)
%
% \begin{macro}{\putunicode@label}\marg{unformatted string} 
% This macro receives a number in hexadecimal, removes the last
% 0 and replaces it with an x. It then prepends a U+ to fomat it
% as a Unicode number e.g. U+0100x
%    \begin{macrocode}
\newcounter{glyph@count}%counts glyphs
\def\textU#1{{\unicodenumberfam #1}}
\def\putunicode@label#1#2;{%
\def\reformat@unicode@string##1{%
   \textU{U+}%
  \let\z\empty%
  \expandafter\@tfor\expandafter\i\expandafter:\expandafter=#2;\do{%
  \if\i;%
    \textU{x}%
  \else%
    \textU{\z}%
  \fi%
  \edef\z{\i}%
 }%
}%
  \makebox[5em]{\reformat@unicode@string{#2}\hfill}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\putchar@cx}
%    \begin{macrocode}
\def\putchar@cx#1{%
\stepcounter{glyph@count}
\let\oldactive@prefix\active@prefix
\let\active@prefix\relax
   \iffontchar\font\n
     \char\the\n$_{\pgfmathparse{Hex(\the\r@cx)}\text{\pgfmathresult}}$%
      %
   \else
    {\arial\graybox}
   \fi
\let\active@prefix\oldactive@prefix
 }

\def\urow@cx#1{%
    \n=#1% 
    \r@cx=0%
    \expandafter\putunicode@label#1;%
    \loop%
        \ifnum\n<\numexpr#1+16\relax%
        \makebox[2.1em]{\expandafter\putchar@cx{#1}}%
        \advance\r@cx by1%  
        \ifnum\r@cx>16\r@cx=1\relax\else\fi
        \advance\n by1%
    \repeat
    \par
}

\def\typeseturows@cx#1{%
\@for\next:=#1\do{%
  \urow@cx\next\vskip3pt}%
}

\newcount\r@cx%
\newcount\n%
\newcommand\unicodetable[2]{%
\bgroup
  \par
  \leavevmode%
   \r@cx=0%
   {\hbox to 5em{\ignorespaces}}%
   \loop%
    \ifnum\r@cx<16\ignorespaces 
    \makebox[2.1em]{\pgfmathparse{Hex(\the\r@cx)}\pgfmathresult}%
    \advance\r@cx by\@ne%  
   \repeat
   \vskip3pt\par
   \@nameuse{#1}%
   \typeseturows@cx{#2}%
\egroup
}
%%%%%%%%%%%%%%%%%%%%%% REVISIT THIS
\DeclareRobustCommand\unicodenumber[1]{{\smallcps #1\xspace}}

\def\putdescription#1:{%
  \parindent0pt 
  \begin{minipage}[t]{4cm}
  \bgroup\aegean
  \hangindent20pt
  #1\par
  \egroup
  \end{minipage} 
}


\long\def\parsefields #1:#2\@@{%
    \ifx\par#1
    \else 
        {\small\aegean U+#1}%
         %%\iffontchar\font"#1 %
          \makebox[2.1em]{\color{blue}\symbol{"#1}}% 
          \expandafter\putdescription#2\vskip3pt
        %%\else
          %%{\aegean \makebox[2.1em]{} Unallocated\par}%
        %%\fi
    \fi  
  }%
% Check if it can be saved
\newread\tempstream

% begin{macro}{\printunicodeblock}\marg{}\oarg{} The macro
% prints a unicode table from a file of definitions. This is
% printed in a two column environment by default. 
% #1 filename and path
% #2 font command
\DeclareDocumentCommand{\printunicodeblock}{O{2} m m }{%
  \bgroup
  \leavevmode\parindent0pt\par
  \begin{multicols}{#1}%
  #3
  \openin\@inputcheck=#2
  \loop\unless\ifeof\@inputcheck
    \read\@inputcheck to\fileline %
    \expandafter\parsefields \fileline:\@@ 
  \repeat
  \end{multicols}%
  \immediate\closein\@inputcheck
  \egroup
}
\let\PrintUnicodeBlock\printunicodeblock
%    \end{macrocode}
% \end{macro}

%\subsection{Indexing macros}
%

%    \begin{macrocode}


 
 \ExplSyntaxOn
 \DeclareDocumentCommand\indexmany {o m }
 {
   \clist_gset:Nn \indexmany: {#2} 
   \IfValueTF {#1}
    { 
      \clist_map_inline:Nn\indexmany: 
        {
          \index{#1>##1}\index{##1}
        }
    }
    { 
     \clist_map_inline:Nn\indexmany: 
      {
        \index{##1}
      } 
    }
 }
 \ExplSyntaxOff

%    \end{macrocode}
% We define a related macro for indexing accents.  In a previous version
% of this file, \indexaccent additionally included "see also accents" in
% the index.  This became distracting so I made \indexaccent a synonym
% for \indexcommand for the time being.  Because punctuation marks can
% be problematic for makeindex, we define an \indexpunct macro that
% sorts its argument under the comparatively innocuous "\_".
%
%    \begin{macrocode}
\begingroup
 \catcode`\|=0
 \catcode`\\=12
 |gdef|sanitize#1#2!!!{%
   |ifx#1\%
     #2%
   |else
     #1#2%
   |fi
}
|endgroup
%    \end{macrocode}
%
% \begin{macro}{\indexcommand}\oarg{}\marg{command} 
%
% Index a symbol, which may or may not begin with a backslash.  (Is
% there a better way to do this?)  Also, if symbol is given as an
% optional argument is given, typeset that symbol in the index, as well
%
%    \begin{macrocode}
  \newcommand{\indexcommand}[2][]{%
    \edef\sanitized{\expandafter\sanitize\string#2!!!}%
    \def\first@arg{#1}%
    \ifx\first@arg\@empty
      \expandafter\index\expandafter{\sanitized=\string\verb+\string#2+}%
    \else
      \expandafter\index\expandafter{\sanitized=\string\verb+\string#2+ (#1)}%
    \fi
  }
%    \end{macrocode}
% 
%    \begin{macrocode}
  \let\indexaccent=\indexcommand
  \def\CLSLpipe{|}%
%    \end{macrocode}
%   \end{macro}

% \begin{macro}{\indexpunct}
%    \begin{macrocode}
%  
  \newcommand{\indexpunct}[2][]{%
    \def\first@arg{#1}%
    \def\second@arg{#2}%
    \ifx\first@arg\@empty
      \ifx\second@arg\CLSLpipe
        \index{_=\magicvertname}%
      \else
        \index{_=\string\verb+\string#2+}%
      \fi
    \else
      \ifx\second@arg\CLSLpipe
        \index{_=\magicvertname{} (#1)}%
      \else
        \index{_=\string\verb+\string#2+ (#1)}%
      \fi
    \fi
  }
%    \end{macrocode}
%    \begin{macrocode}
\DeclareRobustCommand{\idxfont}[1]{\index{#1 (font)}\texttt{#1}\xspace}%
\DeclareRobustCommand{\idxlanguage}[1]{\index{#1 (script)}\index{scripts>#1}\texttt{#1}\xspace}%
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
% Define a counter to keep track of how many symbols are listed.
% Output this counter to the log file at the end of each run.
% Define \prevtotalsymbols to be the total number of symbols from
% the previous run.
%
% \subsection{mathdots}

\newif\ifMDOTS
\newcommand\MDOTS{\pkgname{mathdots}}
\IfStyFileExists{mathdots}
  {\MDOTStrue
   \savesymbol{ddots}
   \savesymbol{vdots}
   \savesymbol{iddots}
   \savesymbol{dddot}
   \savesymbol{ddddot}
   \usepackage{mathdots}
   \restoresymbol{MDOTS}{ddots}
   \restoresymbol{MDOTS}{vdots}
   \restoresymbol{MDOTS}{iddots}
   \restoresymbol{MDOTS}{dddot}
   \restoresymbol{MDOTS}{ddddot}
  }
  {}

%\usepackage{longdiv}
\newcommand\FC{\pkgname{fc}}
\newcommand\VIET{\pkgname{vietnam}}
%\newcommand\ABX{\pkgname{mathabx}}
%    \end{macrocode}
%
% \begin{macro}{graybox}
% \begin{macro}{\incsyms}
%    \begin{macrocode}
\newcounter{totalsymbols}
\newcommand{\incsyms}{\addtocounter{totalsymbols}{1}}

\newcommand*{\graybox}{\textcolor{thegray!60}{\rule[-\adp]{\awd}{\aht}}}
 
% Define \blackacc to display an accented box, given an accent command.
% Define \blackacchack to display an accented "a" and then black out
% the "a".
\newlength\awd
\newlength\aht
\newlength\adp
\settowidth{\awd}{\normalfont m}
\settoheight{\aht}{\normalfont I}
\settodepth{\adp}{\normalfont m}
\advance\adp by 0.06pt    % In Computer Modern, "a" extends slightly below its bounding box.
\advance\aht by \adp
\gdef\blackacchack#1{#1a\llap{\graybox}}
\gdef\blackacc#1{#1{\graybox}}
\gdef\blackacctwo#1{#1{\graybox}{\graybox}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% Symbol+verbatim for various types of symbols
%    \begin{macrocode}
\def\E#1{%
  \begingroup
    \lccode`|=`\\
    \def\EStruename{ES#1T}
    \lowercase{\incsyms\index{#1=\string\verb+\string|#1+ (\string|\EStruename)}}
  \endgroup
  \csname ES#1T\endcsname & \csname ES#1D\endcsname &
  \ttfamily\expandafter\string\csname#1\endcsname
}

\def\K@opt@arg[#1]#2{\incsyms\indexcommand[#1]{#2}#1 &\ttfamily\string#2}
  \def\K@no@opt@arg#1{\incsyms\indexcommand[#1]{#1}#1 &\ttfamily\string#1}

\def\K{\@ifnextchar[{\K@opt@arg}{\K@no@opt@arg}}

\def\Kp#1{\incsyms\indexpunct[$#1$]{#1}#1 &\ttfamily\string#1}

\def\KED[#1][#2][#3]#4{\incsyms\indexcommand[#1]{#2}#3 &\ttfamily\string#4}
\def\Kfeyn#1{\incsyms\indexcommand[\string\feyn{#1}]{\feyn{#1}}\feyn{#1} &\ttfamily\string\feyn\string{\string#1\string}}

\def\Kp#1{\incsyms\indexpunct[$#1$]{#1}#1 &\ttfamily\string#1}

\def\Kpig#1{\incsyms\index{pigpenfont #1=\string\verb+{\string\pigpenfont\space#1}+\space(\string\CLSLpig{#1})}\CLSLpig{#1} &\ttfamily\string{\string\pigpenfont\space\string#1\string}}
\def\Ks#1{\incsyms\indexcommand[\string\encone{\string#1}]{#1}{\encone{#1}} &\ttfamily\string#1$^*$}
%    \end{macrocode}

% \begin{macro}{Kt}
%
% This macro is also from the comprehensive and takes
% the symbol command as its only argument. It provides
% |T1| encoding and also adds the command to the index.
%    \begin{macrocode}   
\newcommand\Kt[1]{%
        \incsyms\indexcommand[\string\encone{\string#1}]{#1}{%
        \encone{#1}} &\ttfamily\string#1}%
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\def\Kv#1{\incsyms\indexcommand[\string\encfive{\string#1}]{#1}{\encfive{#1}} &\ttfamily\string#1}

\def\Kgr@opt@arg[#1]#2{\incsyms\indexcommand[\string\encgreek{\string#1}]{#2}{\encgreek{#1}} &\ttfamily\string#2}
  \def\Kgr@no@opt@arg#1{\incsyms\indexcommand[\string\encgreek{\string#1}]{#1}{\encgreek{#1}} &\ttfamily\string#1}
  \def\Kgr{\@ifnextchar[{\Kgr@opt@arg}{\Kgr@no@opt@arg}}

\def\KN[#1][#2]#3{\incsyms\indexcommand[\string#1]{#3} #1 & #2 & \ttfamily\string#3}
\def\KNbig[#1][#2]#3{\incsyms\indexcommand[\string#2]{#3} #1 & #2 & \ttfamily\string#3}
\def\Knoidx#1{\incsyms#1 &\ttfamily\string#1}
%% N
 \def\N@opt@arg[#1]#2{\incsyms\indexcommand[$\string#1$]{#2}$#1$ & $\Big#1$ &\ttfamily\string#2}
  \def\N@no@opt@arg#1{\incsyms\indexcommand[$\string#1$]{#1}$#1$ & $\Big#1$ &\ttfamily\string#1}
  \def\N{\@ifnextchar[{\N@opt@arg}{\N@no@opt@arg}}
  \def\Nn[#1]#2{%
    \incsyms\indexcommand[$\string\nathdouble\string#1$]{#2}%
    $\nathdouble#1$ & $\nathdouble{\Big#1}$ & \ttfamily\string#2}
  \def\Nnt#1[#2]#3{%
    \incsyms\indexcommand{\triple}%
    $\nathtriple#2$ & $\nathtriple{\Big#2}$ &
    \ttfamily\expandafter\string\csname#1triple\endcsname\string#3}
  \def\Np@opt@args[#1]{\@ifnextchar[{\Np@two@opt@args[#1]}{\Np@one@opt@arg[#1]}}
  \def\Np@two@opt@args[#1][#2]#3{\incsyms\index{_=\string#2{} ($\string#1$)}$#1$ & $\Big#1$ &\ttfamily\string#3}
  \def\Np@one@opt@arg[#1]#2{\incsyms\indexpunct[$\string#1$]{#2}$#1$ & $\Big#1$ &\ttfamily\string#2}
  \def\Np@no@opt@args#1{\incsyms\indexpunct[$\string#1$]{#1}$#1$ & $\Big#1$ &\ttfamily\string#1}
  \def\Np{\@ifnextchar[{\Np@opt@args}{\Np@no@opt@args}}
  \def\Nbig[#1]#2{\incsyms\indexcommand[$\string\Big\string#1$]{#2}$#1$ & $\Big#1$ &\ttfamily\string#2}
%% Q commands
 \def\Q@opt@arg[#1]#2{\incsyms\indexaccent[\string\blackacchack{\string#1}]{#2}#1{A}#1{a} &
           \ttfamily\string#2\string{A\string}\string#2\string{a\string}}
  \def\Q@no@opt@arg#1{\incsyms\indexaccent[\string\blackacchack{\string#1}]{#1}#1{A}#1{a} &
           \ttfamily\string#1\string{A\string}\string#1\string{a\string}}
  \def\Q{\@ifnextchar[{\Q@opt@arg}{\Q@no@opt@arg}}

\def\Qc#1{\incsyms\indexaccent[\string\blackacc{\string#1}]{#1}#1{A}#1{a} &
         \ttfamily\string#1\string{A\string}\string#1\string{a\string}}
\def\Qe[#1][#2]#3{%
  \incsyms\incsyms\index{_=\string#2{} (\string\blackacchack{\string#1})}%
  #3{A}#3{a} &
  \ttfamily\string#3\string{A\string}\string#3\string{a\string}}
\def\Qt#1{\incsyms\indexaccent[\string\encone{\string\blackacc{\string#1}}]{#1}{\encone{#1{A}#1{a}}} &
          \ttfamily\string#1\string{A\string}\string#1\string{a\string}}

\def\Qpc#1#2{\incsyms\indexcommand{#2}{\raisebox{1pt}{\tiny[#1]}} &
             \ttfamily\string#2\string{A\string}\string#2\string{a\string}}
\def\Qpfc[#1]#2{\incsyms\indexaccent[\string\encfour{\string\blackacchack{\string#1}}]{#2}\encfour{#1{A}#1{a}} &
           \ttfamily\string#2\string{A\string}\string#2\string{a\string}}
%% TODO
\newif\ifFC\FCfalse
\ifFC
  \def\Qiv#1#2{\incsyms\indexaccent[\string\encfour{\string\blackacchack{\string#1}}]{#1}\encfour{#1{A}#1{a}} &
               \ttfamily\string#1\string{A\string}\string#1\string{a\string}$^#2$}
  \def\QivBAR#1{\incsyms\index{_=\string\magicVertname{}
                (\string\encfour{\string\blackacchack{\string\FCbar}})}
                \encfour{\FCbar{A}\FCbar{a}} &
                \ttfamily\string\|\string{A\string}\string\|\string{a\string}$^#1$}
\else
  \def\Qiv#1#2{\Qpc{T4}{#1}$^#2$}
  \def\QivBAR#1{\Qpc{T4}{\|}$^#1$}
\fi
\newif\ifVIET\VIETfalse
\ifVIET
  \def\Qv#1#2{\incsyms\indexaccent[\string\encfive{\string\blackacchack{\string#1}}]{#1}{\encfive{#1{A}#1{a}}} &
              \ttfamily\string#1\string{A\string}\string#1\string{a\string}$^#2$}
\else
  \def\Qv#1#2{\Qpc{T5}{#1}$^#2$}\def\Qv#1#2{Err}%TODO
\fi
%% R Commands
  % We use \cmd{displaystyle} so that variable-sized symbols will be big.
  \def\R@opt@arg[#1]#2{\incsyms\indexcommand[$\string#1$]{#2}$#1$ & $\displaystyle#1$ &\ttfamily\string#2}
  \def\R@no@opt@arg#1{\incsyms\indexcommand[$\string#1$]{#1}$#1$ & $\displaystyle#1$ &\ttfamily\string#1}
  \def\R{\@ifnextchar[{\R@opt@arg}{\R@no@opt@arg}}
%% T commands
\def\Tp#1{\incsyms\indexcommand{\ding}\ding{#1} &\ttfamily\string\ding\string{#1\string}}
\def\Tm#1{\incsyms\indexcommand{\maya}$\mayadigit{#1}$ &\ttfamily\string\maya\string{#1\string}}
\def\Tmoon#1{\incsyms\indexcommand{\MoonPha}\MoonPha{#1} &\ttfamily\string\MoonPha\string{#1\string}}

%% This command typesets its argument and also puts

\newcommand{\V}[2][]{%
   \incsyms#1 & 
   \indexcommand[#2]{#2}% necessary to put symbol \text
   #2%  
   &\ttfamily\string#2}

% new attempt (needs work)
\newcommand{\docV}[2][]{%
  % \incsyms#1 & 
  % \indexcommand[#2]{#2}% necessary to put symbol \text
   &\csname#2\endcsname%  
   &\tcbset{color command=blue}
      \docAuxCommand {#2}}
   
\newcommand{\Vp}[2][]{\incsyms#1 & \indexpunct[$#2$]{#2}#2 &\ttfamily\string#2}

%W
\def\W@opt@arg[#1]#2#3{%
    \incsyms\indexaccent[$\string\blackacc{\string#1}$]{#2}%
    $#1{#3}$ &\ttfamily\string#2\string{#3\string}}
  \def\W@no@opt@arg#1#2{%
    \incsyms\indexaccent[$\string\blackacc{\string#1}$]{#1}%
    $#1{#2}$ &\ttfamily\string#1\string{#2\string}}
  \def\W{\@ifnextchar[{\W@opt@arg}{\W@no@opt@arg}}

\def\Wf#1#2{\incsyms\indexcommand{#1}$#1{#2}$ &\ttfamily\string#1\string{#2\string}}
\def\Ww#1#2#3{\incsyms\indexcommand{#2}$#1{#3}$ &\ttfamily\string#2\string{#3\string}}
\def\Wul#1#2#3{%
  \incsyms\indexaccent[$\string\blackacctwo{\string#1}$]{#1}%
  $#1{#2}{#3}$ &\ttfamily\string#1\string{#2\string}\string{#3\string}}

\def\X@opt@arg[#1]#2{\incsyms\indexcommand[$\string#1$]{#2}$#1$ &\ttfamily\string#2}
  \def\X@no@opt@arg#1{\incsyms\indexcommand[$\string#1$]{#1}$#1$ &\ttfamily\string#1}
  
\def\X{\@ifnextchar[{\X@opt@arg}{\X@no@opt@arg}}

\def\Y#1{\incsyms\indexcommand[$\string\big\string#1$]{#1}$\big#1$ & $\Bigg#1$ &\ttfamily\string#1}
\def\Z#1{\incsyms\indexcommand[$\string#1$]{#1}\ttfamily\string#1}
%    \end{macrocode}
%
%
% \begin{macro}{\docfile}
% NEED TO CHECK IF THIS IS NECESSARY
%    \begin{macrocode}
\def\docfile#1{\protect\texttt{\textbackslash #1}\index{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\bibsample}
%  Typesets a sample of bib
%    \begin{macrocode}
\newenvironment{bibsample}
  {\trivlist\samepage
   \setlength{\itemsep}{0pt}}
  {\endtrivlist}
%% doccommands
\newcommand*{\marglistfont}{\itshape}
\newcommand*{\margoptionfont}{\ttfamily}
\newcommand*{\margnotefont}{}

\newcommand*{\optionlistfont}{\bfseries}

\newcommand*{\ltxsyntaxfont}{\ttfamily}

\newcommand*{\ltxsyntaxlabelfont}{\bfseries}

\newcommand*{\changelogfont}{\normalfont}

\newcommand*{\changeloglabelfont}{\bfseries}

%% needed for listings????
\newcommand*{\verbatimfont}{\ttfamily}%


\let\displayverbfont\ttfamily

\renewcommand*{\verbatim@font}{\verbatimfamily}

\def\cmd#1{\cs{\expandafter\cmd@to@cs\string#1}}%

\def\cmd@to@cs#1#2{\char\number`#2\relax}

\newrobustcmd*{\env}[1]{\mbox{\verbatimfont\bfseries\textcolor{thegreen}{#1}}}

\newrobustcmd*{\len}[1]{\mbox{\verbatimfont\textbackslash#1}}

\newrobustcmd*{\cnt}[1]{\mbox{\verbatimfont#1}}

\newlength{\marglistsep}

\newlength{\marglistwidth}
\setlength{\marglistwidth}{(\oddsidemargin+1in)*85/100}%
\deflength{\marglistsep}{10pt}
%% This needs thorough checking as to restore previous definitions
%% of parsep we want parsep to be a bit higher than standard enumerated lists.


\global\newlength\oldparsep
\newenvironment*{marglist}
  {\setlength\oldparsep{\parsep}\list{}{%
     \parsep 3.5\p@ \@plus0\p@ \@minus\p@
     \setlength{\labelwidth}{\marglistwidth}%
     \setlength{\labelsep}{\marglistsep}%
     \setlength{\leftmargin}{0pt}%
     \renewcommand*{\makelabel}[1]{\hss\marglistfont##1}}}
  {\endlist\setlength\parsep{\oldparsep}}

% tt 
\newenvironment*{margoptionslist}
  {\setlength\oldparsep{\parsep}\list{}{%
     \parsep 3.5\p@ \@plus0\p@ \@minus\p@
     \setlength{\labelwidth}{\marglistwidth}%
     \setlength{\labelsep}{\marglistsep}%
     \setlength{\leftmargin}{0pt}%
     \renewcommand*{\makelabel}[1]{\hss\margoptionfont\detokenize{##1}}}}
  {\endlist\setlength\parsep{\oldparsep}}
  
  

\newenvironment*{keymarglist}
  {\marglist
   \setlength{\itemsep}{0pt}%
   \raggedright}
  {\endmarglist}
% color definitions
\def\colDef#1{\textcolor{themacro}{#1}}
% color for options
\def\colOpt#1{\textcolor{theblue}{#1}}
\newcommand{\option}[1]{\colOpt{#1}}
%    \end{macrocode}
% \end{macro}
%
% \section{Documentation Symbols for PGF type docs}
%
% Copyright 2006 by Till Tantau
%
% These type of documentation macros. 
%
%    \begin{macrocode}
\newenvironment{pgfmanualentry}{\list{}{\leftmargin=2em\itemindent-\leftmargin
 \def\makelabel##1{\hss##1}}}{\endlist}%%
%    \end{macrocode}
%
% \begin{pgfmanualentry}
%  \item pgfversion
%  \item test
% \end{pgfmanualentry}
%    \begin{macrocode}
\newcommand\pgfmanualentryheadline[1]{\itemsep=0pt\parskip=0pt\item\strut{#1}\par\topsep=0pt}
%    \end{macrocode}
%
%
% \begin{macro}{\pgfmanualbody} Just a helper macro to insert a 
% \cs{parskip}.
%    \begin{macrocode}
\newcommand\pgfmanualbody{\parskip3pt}
%    \end{macrocode}
% \end{macro}
%
% 
%    \begin{macrocode}
\newenvironment{pgflayout}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{\texttt{\string\pgfpagesuselayout\char`\{\declare{#1}\char`\}}\oarg{options}}
    \index{#1@\protect\texttt{#1} layout}%
    \index{Page layouts!#1@\protect\texttt{#1}}%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}
%
%    \end{macrocode}
%
% \begin{environment}{command}
%  command environment
% The command strips the backslash and  handles the at for 
% indexing.
% \end{environment}
%    \begin{macrocode}
\newenvironment{command}[1]{
  \begin{pgfmanualentry}
    \extractcommand#1\@@
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}
%% MW: START MATH MACROS
\def\mvar#1{{\rmfamily\textit{#1}}}
\def\extractmathfunctionname#1{\extractmathfunctionname@#1(,)\tmpa\tmpb}
\def\extractmathfunctionname@#1(#2)#3\tmpb{\def\mathname{#1}}

\def\extractmathoperatorname{\begingroup\def\mvar##1{}\def\ {}\extractmathoperatorname@}
\def\extractmathoperatorname@#1{\xdef\mathname{#1}\endgroup}
\def\vskipspecial#1{\vskip#1\vskip0em}

\newenvironment{math-function}[1]{
	\begin{pgfmanualentry}
		\extractmathfunctionname{#1}
		\pgfmanualentryheadline{\texttt{#1}}%
		\index{\mathname @\protect\texttt{\mathname} math function}%
		\index{Math functions!\mathname @\protect\texttt{\mathname}}
		\pgfmanualbody
}
{
	\end{pgfmanualentry}\vskipspecial{-3em}
}
\newenvironment{math-operator}[1]{	
	\begin{pgfmanualentry}
		\extractmathoperatorname{#1}
		\pgfmanualentryheadline{\texttt{#1}}%
		\index{\mathname @\protect\texttt{\mathname} math operator}%
		\index{Math operators!\mathname @\protect\texttt{\mathname}}
    	\pgfmanualbody
}
{%
	\end{pgfmanualentry}\vskipspecial{-3em}
}
\newenvironment{math-constant}[1]{
	\begin{pgfmanualentry}
		\pgfmanualentryheadline{\texttt{#1}}%
		\index{#1@\protect\texttt{#1} math constant}%
		\index{Math constants!#1@\protect\texttt{#1}}
		\pgfmanualbody
}
{
	\end{pgfmanualentry}\vskipspecial{-3em}
}
\def\calcname{\textsc{calc}}
%% MW: END MATH MACROS
\def\extractcommand#1#2\@@{%
  \pgfmanualentryheadline{\declare{\texttt{\bfseries\string#1}}#2}%
  \removeats{#1}%
  %%\index{\strippedat @\protect\myprintocmmand{\strippedat}}
}

\@ifundefined{environment}{
\newenvironment{environment}[1]{
  \begin{pgfmanualentry}
    \extractenvironement#1\@@
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}}{}%
 %
\renewenvironment{environment}[1]{
  \begin{pgfmanualentry}
    \extractenvironement#1\@@
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\def\extractenvironement#1#2\@@{%
  \pgfmanualentryheadline{{\ttfamily\char`\\begin\char`\{\declare{#1}\char`\}}#2}%
  \pgfmanualentryheadline{{\ttfamily\ \ }\meta{environment contents}}%
  \pgfmanualentryheadline{{\ttfamily\char`\\end\char`\{\declare{#1}\char`\}}}%
  \index{#1@\protect\texttt{#1} environment}%
  \index{Environments!#1@\protect\texttt{#1}}}


\newenvironment{plainenvironment}[1]{
  \begin{pgfmanualentry}
    \extractplainenvironement#1\@@
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\def\extractplainenvironement#1#2\@@{%
  \pgfmanualentryheadline{{\ttfamily\declare{\char`\\#1}}#2}%
  \pgfmanualentryheadline{{\ttfamily\ \ }\meta{environment contents}}%
  \pgfmanualentryheadline{{\ttfamily\declare{\char`\\end#1}}}%
  \index{#1@\protect\texttt{#1} environment}%
  \index{Environments!#1@\protect\texttt{#1}}}


\newenvironment{contextenvironment}[1]{
  \begin{pgfmanualentry}
    \extractcontextenvironement#1\@@
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\def\extractcontextenvironement#1#2\@@{%
  \pgfmanualentryheadline{{\ttfamily\declare{\char`\\start#1}}#2}%
  \pgfmanualentryheadline{{\ttfamily\ \ }\meta{environment contents}}%
  \pgfmanualentryheadline{{\ttfamily\declare{\char`\\stop#1}}}%
  \index{#1@\protect\texttt{#1} environment}%
  \index{Environments!#1@\protect\texttt{#1}}}


\newenvironment{shape}[1]{
  \begin{pgfmanualentry}
  	\pgfmanualentryheadline{Shape {\ttfamily\declare{#1}}}%
    \index{#1@\protect\texttt{#1} shape}%
    \index{Shapes!#1@\protect\texttt{#1}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\newenvironment{handler}[1]{
  \begin{pgfmanualentry}
    \extracthandler#1\@nil%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

%% Changed must watch out!!
\def\gobble#1{}
\def\extracthandler#1#2\@nil{%
  \pgfmanualentryheadline{Key handler \meta{key}{\bfseries\ttfamily/\declare{#1}}#2}%
  \index{\gobble#1@\protect\texttt{#1} handler}%
  \index{Key handlers>#1=\protect\texttt{#1}}
}
\newenvironment{stylekey}[1]{
  \begin{pgfmanualentry}
    \def\extrakeytext{style, }
    \extractkey#1\@nil%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}
%    \end{macrocode}
%
%    \begin{macrocode}
\newenvironment{key}[1]{
  \begin{pgfmanualentry}
    \def\extrakeytext{}
    %\def\altpath{\emph{\color{gray}or}}%
    \extractkey#1\@nil%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}
%    \end{macrocode}

%    \begin{macrocode}
\def\extractkey#1\@nil{%
  \pgfutil@in@={#1}%
  \ifpgfutil@in@%
    \extractkeyequal#1\@nil
  \else%
    \pgfutil@in@{(initial}{#1}%
    \ifpgfutil@in@%
      \extractequalinitial#1\@nil%
    \else
      \pgfmanualentryheadline{{\ttfamily\declare{#1}}\hfill(\extrakeytext no value)}%
      \def\mykey{#1}%
      \def\mypath{}%
      \def\myname{}%
      \firsttimetrue%
      \decompose#1/\nil%ERROR?
    \fi
  \fi%
}

\def\extractkeyequal#1=#2\@nil{%
  \pgfutil@in@{(default}{#2}%
  \ifpgfutil@in@%
    \extractdefault{#1}#2\@nil%
  \else%
    \pgfutil@in@{(initial}{#2}%
    \ifpgfutil@in@%
      \extractinitial{#1}#2\@nil%
    \else
      \pgfmanualentryheadline{{\ttfamily\declare{#1}=}#2\hfill(\extrakeytext no default)}%
    \fi%
  \fi%
  \def\mykey{#1}%
  \def\mypath{}%
  \def\myname{}%
  \firsttimetrue%
  \decompose#1/\nil%
}

\def\extractdefault#1#2(default #3)\@nil{%
  \pgfmanualentryheadline{{\ttfamily\declare{#1}\opt{=}}\opt{#2}\hfill (\extrakeytext default {\ttfamily#3})}%
}

\def\extractinitial#1#2(initially #3)\@nil{%
  \pgfmanualentryheadline{{\ttfamily\declare{#1}=}#2\hfill (\extrakeytext no default, initially {\ttfamily#3})}%
}

\def\extractequalinitial#1 (initially #2)\@nil{%
  \pgfmanualentryheadline{{\ttfamily\declare{#1}}\hfill (\extrakeytext initially {\ttfamily#2})}%
  \def\mykey{#1}%
  \def\mypath{}%
  \def\myname{}%
  \firsttimetrue%
  \decompose#1/\nil%
}

\def\keyalias#1{\vspace{-3pt}\item{\small alias {\ttfamily/#1/\myname}}\vspace{-2pt}\par}

\newif\iffirsttime


\def\decompose/#1/#2\nil{%
  \def\test{#2}%
  \ifx\test\empty%
    % aha.
    \index{#1=\protect\texttt{#1} key}%@=
    \index{\mypath#1=\protect\texttt{#1}}%@
    \def\myname{#1}%
  \else%
    \iffirsttime
      \def\mypath{#1@\protect\texttt{/#1/}!}%
      \firsttimefalse
    \else
      \expandafter\def\expandafter\mypath\expandafter{\mypath#1@\protect\texttt{#1/}!}%
    \fi
    \def\firsttime{}
    \decompose/#2\nil%
  \fi%
}


\newenvironment{predefinednode}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{Predefined node {\ttfamily\declare{#1}}}%
    \index{#1=\protect\texttt{#1} node}%=
    \index{Predefined node!#1=\protect\texttt{#1}}=
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\newenvironment{coordinatesystem}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{Coordinate system {\ttfamily\declare{#1}}}%
    \index{#1@\protect\texttt{#1} coordinate system}%
    \index{Coordinate systems!#1@\protect\texttt{#1}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\newenvironment{decoration}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{Decoration {\ttfamily\declare{#1}}}%
    \index{#1@\protect\texttt{#1} decoration}%
    \index{Decorations!#1@\protect\texttt{#1}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\def\pgfmanualbar{\char`\|}

\newenvironment{pathoperation}[3][]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{\textcolor{gray}{{\ttfamily\char`\\path}\
        \ \dots}
      \declare{\texttt{#2}}#3\ \textcolor{gray}{\dots\texttt{;}}}%
    \def\pgfmanualtest{#1}%
    \ifx\pgfmanualtest\@empty%
      \index{#2=\protect\texttt{#2} path operation}%=
      \index{Path operations!#2=\protect\texttt{#2}}%=
    \fi%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\def\extractcommand#1#2\@@{%
  \pgfmanualentryheadline{\declare{\texttt{\string#1}}#2}%
  \removeats{#1}%
  \index{\strippedat @\protect\myprintocmmand{\strippedat}}}

\def\doublebs{\texttt{\char`\\\char`\\}}


\newenvironment{package}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{{\ttfamily\char`\\usepackage\char`\{\declare{#1}\char`\}\space\space \char`\%\space\space  \LaTeX}}
    \index{#1@\protect\texttt{#1} package}%
    \index{Packages and files!#1@\protect\texttt{#1}}%
    \pgfmanualentryheadline{{\ttfamily\char`\\input \declare{#1}.tex\space\space\space \char`\%\space\space  plain \TeX}}
    \pgfmanualentryheadline{{\ttfamily\char`\\usemodule[\declare{#1}]\space\space \char`\%\space\space  Con\TeX t}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\newenvironment{pgfmodule}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{{\ttfamily\char`\\usepgfmodule\char`\{\declare{#1}\char`\}\space\space\space
        \char`\%\space\space  \LaTeX\space and plain \TeX\space and pure pgf}}
    \index{#1@\protect\texttt{#1} module}%
    \index{Modules!#1@\protect\texttt{#1}}%
    \pgfmanualentryheadline{{\ttfamily\char`\\usepgfmodule[\declare{#1}]\space\space \char`\%\space\space  Con\TeX t\space and pure pgf}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\newenvironment{pgflibrary}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{{\ttfamily\char`\\usepgflibrary\char`\{\declare{#1}\char`\}\space\space\space
        \char`\%\space\space  \LaTeX\space and plain \TeX\space and pure pgf}}
    \index{#1@\protect\texttt{#1} library}%
    \index{Libraries!#1@\protect\texttt{#1}}%
    \pgfmanualentryheadline{{\ttfamily\char`\\usepgflibrary[\declare{#1}]\space\space \char`\%\space\space  Con\TeX t\space and pure pgf}}
    \pgfmanualentryheadline{{\ttfamily\char`\\usetikzlibrary\char`\{\declare{#1}\char`\}\space\space
        \char`\%\space\space  \LaTeX\space and plain \TeX\space when using \tikzname}}
    \pgfmanualentryheadline{{\ttfamily\char`\\usetikzlibrary[\declare{#1}]\space
        \char`\%\space\space  Con\TeX t\space when using \tikzname}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\newenvironment{tikzlibrary}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{{\ttfamily\char`\\usetikzlibrary\char`\{\declare{#1}\char`\}\space\space \char`\%\space\space  \LaTeX\space and plain \TeX}}
    \index{#1@\protect\texttt{#1} library}%
    \index{Libraries!#1@\protect\texttt{#1}}%
    \pgfmanualentryheadline{{\ttfamily\char`\\usetikzlibrary[\declare{#1}]\space \char`\%\space\space Con\TeX t}}
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}



\newenvironment{filedescription}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{File {\ttfamily\declare{#1}}}%
    \index{#1@\protect\texttt{#1} file}%
    \index{Packages and files!#1@\protect\texttt{#1}}%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}


\newenvironment{packageoption}[1]{
  \begin{pgfmanualentry}
    \pgfmanualentryheadline{{\ttfamily\char`\\usepackage[\declare{#1}]\char`\{pgf\char`\}}}
    \index{#1@\protect\texttt{#1} package option}%
    \index{Package options for \textsc{pgf}!#1@\protect\texttt{#1}}%
    \pgfmanualbody
}
{
  \end{pgfmanualentry}
}

\newcommand\opt[1]{{\color{black!50!green}#1}}
\newcommand\ooarg[1]{{\ttfamily[}\meta{#1}{\ttfamily]}}

\def\opt{\afterassignment\pgfmanualopt\let\next=}
\def\pgfmanualopt{\ifx\next\bgroup\bgroup\color{black!50!green}\else{\color{black!50!green}\next}\fi}



\def\beamer{\textsc{beamer}}
\def\pdf{\textsc{pdf}}
\def\pgfname{\textsc{pgf}\xspace}
\def\tikzname{Ti\emph{k}Z\xspace}
\def\pstricks{\textsc{pstricks}}
\def\prosper{\textsc{prosper}}
\def\seminar{\textsc{seminar}}
\def\texpower{\textsc{texpower}}
\def\foils{\textsc{foils}}

{
  \makeatletter
  \global\let\myempty=\@empty
  \global\let\mygobble=\@gobble
  \catcode`\@=12
  \gdef\getridofats#1@#2\relax{%
    \def\getridtest{#2}%
    \ifx\getridtest\myempty%
      \expandafter\def\expandafter\strippedat\expandafter{\strippedat#1}
    \else%
      \expandafter\def\expandafter\strippedat\expandafter{\strippedat#1\protect\printanat}
      \getridofats#2\relax%
    \fi%
  }

  \gdef\removeats#1{%
    \let\strippedat\myempty%
    \edef\strippedtext{\stripcommand#1}%
    \expandafter\getridofats\strippedtext @\relax%
  }
  
  \gdef\stripcommand#1{\expandafter\mygobble\string#1}
}

\def\printanat{\char`\@}

\def\declare{\afterassignment\pgfmanualdeclare\let\next=}
\def\pgfmanualdeclare{\ifx\next\bgroup\bgroup\color{red!75!black}\else{\color{red!75!black}\next}\fi}


\let\textoken=\command
\let\endtextoken=\endcommand

\def\myprintocmmand#1{\texttt{\char`\\#1}}

\def\example{\par\smallskip\noindent\textit{Example: }}
\def\themeauthor{\par\smallskip\noindent\textit{Theme author: }}


\def\indexoption#1{%
  \index{#1@\protect\texttt{#1} option}%
  \index{Graphic options and styles!#1@\protect\texttt{#1}}%
}

\def\itemcalendaroption#1{\item \declare{\texttt{#1}}%
  \index{#1@\protect\texttt{#1} date test}%
  \index{Date tests!#1@\protect\texttt{#1}}%
}



\def\class#1{\list{}{\leftmargin=2em\itemindent-\leftmargin\def\makelabel##1{\hss##1}}%
\extractclass#1@\par\topsep=0pt}

\def\endclass{\endlist}

\def\extractclass#1#2@{%
\item{{{\ttfamily\char`\\documentclass}#2{\ttfamily\char`\{\declare{#1}\char`\}}}}%
  \index{#1@\protect\texttt{#1} class}%
  \index{Classes!#1@\protect\texttt{#1}}}



\def\index@prologue{\section*{Index}\addcontentsline{toc}{section}{Index}
  This index only contains automatically generated entries. A good
  index should also contain carefully selected keywords. This index is
  not a good index.
  \bigskip
}
\@ifundefined{c@IndexColumns}{\newcount\c@IndexColumns}{}
\c@IndexColumns=2
  \def\theindex{\@restonecoltrue
    \columnseprule \z@  \columnsep 29\p@
    \twocolumn[\index@prologue]%
       \parindent -30pt
       \columnsep 15pt
       \parskip 0pt plus 1pt
       \leftskip 30pt
       \rightskip 0pt plus 2cm
       \small
       \def\@idxitem{\par}%
    \let\item\@idxitem \ignorespaces}
  \def\endtheindex{\onecolumn}
\def\noindexing{\let\index=\@gobble}



\newcommand\symarrow[1]{
  \index{#1@\protect\texttt{#1} arrow tip}%
  \index{Arrow tips!#1@\protect\texttt{#1}}
  \texttt{#1}& yields thick  
  \begin{tikzpicture}[arrows={#1-#1},thick,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture} and thin
  \begin{tikzpicture}[arrows={#1-#1},thin,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture}
}

\newcommand\sarrow[2]{
  \index{#1@\protect\texttt{#1} arrow tip}%
  \index{Arrow tips!#1@\protect\texttt{#1}}
  \index{#2@\protect\texttt{#2} arrow tip}%
  \index{Arrow tips!#2@\protect\texttt{#2}}
  \texttt{#1-#2}& yields thick  
  \begin{tikzpicture}[arrows={#1-#2},thick,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture} and thin
  \begin{tikzpicture}[arrows={#1-#2},thin,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1cm,2ex);
    \draw (0pt,.5ex) -- (1cm,.5ex);
  \end{tikzpicture}
}

\newcommand\carrow[1]{
  \index{#1@\protect\texttt{#1} arrow tip}%
  \index{Arrow tips!#1@\protect\texttt{#1}}
  \texttt{#1}& yields for line width 1ex
  \begin{tikzpicture}[arrows={#1-#1},line width=1ex,baseline]
    \useasboundingbox (0pt,-0.5ex) rectangle (1.5cm,2ex);
    \draw (0pt,.5ex) -- (1.5cm,.5ex);
  \end{tikzpicture}
}
\def\myvbar{\char`\|}
\newcommand\plotmarkentry[1]{%
  \index{#1@\protect\texttt{#1} plot mark}%
  \index{Plot marks!#1@\protect\texttt{#1}}
  \texttt{\char`\\pgfuseplotmark\char`\{\declare{#1}\char`\}} &
  \tikz\draw[color=black!25] plot[mark=#1,mark options={fill=examplefill,draw=black}] coordinates{(0,0) (.5,0.2) (1,0) (1.5,0.2)};\\
}
\newcommand\plotmarkentrytikz[1]{%
  \index{#1@\protect\texttt{#1} plot mark}%
  \index{Plot marks!#1@\protect\texttt{#1}}
  \texttt{mark=\declare{#1}} & \tikz\draw[color=black!25]
  plot[mark=#1,mark options={fill=examplefill,draw=black}] 
    coordinates {(0,0) (.5,0.2) (1,0) (1.5,0.2)};\\
}



\ifx\scantokens\@undefined
  \PackageError{phd}{You need to use extended latex
    (elatex) or (pdfelatex) to process this document}{}
\fi

\begingroup
\catcode`|=0
\catcode`[= 1
\catcode`]=2
\catcode`\{=12
\catcode `\}=12
\catcode`\\=12 |gdef|find@example#1\end{codeexample}[|endofcodeexample[#1]]
|endgroup

\begingroup
\catcode`\^=7
\catcode`\^^M=13
\catcode`\ =13%
\gdef\returntospace{\catcode`\ =13\def {\space}\catcode`\^^M=13\def^^M{}}%
\endgroup

\begingroup
\catcode`\%=13
\catcode`\^^M=13
\gdef\commenthandler{\catcode`\%=13\def%{\@gobble@till@return}}
\gdef\@gobble@till@return#1^^M{}
\gdef\@gobble@till@return@ignore#1^^M{\ignorespaces}
\gdef\typesetcomment{\catcode`\%=13\def%{\@typeset@till@return}}
\gdef\@typeset@till@return#1^^M{{\def%{\char`\%}\textsl{\char`\%#1}}\par}
\endgroup

\define@key{codeexample}{width}{\setlength\codeexamplewidth{#1}}
\define@key{codeexample}{graphic}{\colorlet{codebackground}{#1}}
\define@key{codeexample}{code}{\colorlet{codebackground}{#1}}
\define@key{codeexample}{execute code}{\csname code@execute#1\endcsname}
\define@key{codeexample}{code only}[]{\code@executefalse}
\define@key{codeexample}{pre}{\def\code@pre{#1}}
\define@key{codeexample}{post}{\def\code@post{#1}}
\define@key{codeexample}{vbox}[]{\def\code@pre{\vbox\bgroup\setlength{\hsize}{\linewidth-6pt}}\def\code@post{\egroup}}
\define@key{codeexample}{ignorespaces}[]{\let\@gobble@till@return=\@gobble@till@return@ignore}
\define@key{codeexample}{leave comments}[]{\def\code@catcode@hook{\catcode`\%=12}\let\commenthandler=\relax\let\typesetcomment=\relax}
\def\code@pre{}
\def\code@post{}
\def\code@catcode@hook{}

\newdimen\codeexamplewidth
\newif\ifcode@execute
\newbox\codeexamplebox
\def\codeexample[#1]{%
  \begingroup%
  \code@executetrue
  \setlength\codeexamplewidth{4cm+7pt}
  \setkeys{codeexample}{#1}%
  \parindent0pt
  \begingroup%
  \par%
  \medskip%
  \let\do\@makeother%
  \dospecials%
  \obeylines%
  \@vobeyspaces%
  \catcode`\%=13%
  \catcode`\^^M=13%
  \code@catcode@hook%
  \relax%
  \find@example}
\def\endofcodeexample#1{%
  \endgroup%
  \ifcode@execute%
    \setbox\codeexamplebox=\hbox{%
      {%
        {%
          \returntospace%
          \commenthandler%
          \xdef\code@temp{#1}% removes returns and comments
        }%
        \colorbox{codebackground}{\color{black}\ignorespaces%
          \code@pre\expandafter\scantokens\expandafter{\code@temp\ignorespaces}\code@post\ignorespaces}%
      }%
    }%
    \ifdim\wd\codeexamplebox>\codeexamplewidth%
      \def\code@start{\par}%
      \def\code@flushstart{}\def\code@flushend{}%
      \def\code@mid{\parskip2pt\par\noindent}%
      \def\code@width{\linewidth-6pt}%
      \def\code@end{}%
    \else%
      \def\code@start{%
        \linewidth=\textwidth%
        \parshape \@ne 0pt \linewidth
        \leavevmode%
        \hbox\bgroup}%
      \def\code@flushstart{\hfill}%
      \def\code@flushend{\hbox{}}%
      \def\code@mid{\hskip6pt}%
      \def\code@width{\linewidth-12pt-\codeexamplewidth}%
      \def\code@end{\egroup}%
    \fi%
    \code@start%
    \noindent%
    \begin{minipage}[t]{\codeexamplewidth}\raggedright
      \hrule width0pt%
      \footnotesize\vskip-1em%
      \code@flushstart\box\codeexamplebox\code@flushend%
      \vskip-1ex
      \leavevmode%
    \end{minipage}%
  \else%
    \def\code@mid{\par}
    \def\code@width{\linewidth-6pt}
    \def\code@end{}
  \fi%
  \code@mid%  
  \colorbox{codebackground}{%
    \begin{minipage}[t]{\code@width}%
      {%
        \let\do\@makeother
        \dospecials
        \frenchspacing\@vobeyspaces
        \normalfont\ttfamily\footnotesize
        \typesetcomment%
        \@tempswafalse
        \def\par{%
          \if@tempswa
          \leavevmode \null \@@par\penalty\interlinepenalty
          \else
          \@tempswatrue
          \ifhmode\@@par\penalty\interlinepenalty\fi
          \fi}%
        \obeylines
        \everypar \expandafter{\the\everypar \unpenalty}%
        #1}
    \end{minipage}}%
  \code@end%
  \par%
  \medskip
  \end{codeexample}
}

\def\endcodeexample{\endgroup}
%    \end{macrocode}
%
% \begin{macro}{codeexample}
% From pgfplots manual
% \end{macro}
%    \begin{macrocode}
\long\def\codeexamplenl{\noexpand\par}%
\pgfqkeys{/codeexample}{%
	every codeexample/.style={
		width=3.9cm,
		/pgfplots/every axis/.append style={legend style={fill=codebackground}}
	},
	narrow/.style={width=6.9cm},
	%tabsize=4,
	%pre={\begin{minipage}{\linewidth}\begingroup},
	%post={\endgroup\end{minipage}},
	%vbox,
	%newline=\codeexamplenl,
}
%%% Local Variables: 
%%% mode: latex
%%% TeX-master: "beameruserguide"
%%% End: 
%    \end{macrocode}
%
%
%
% \section{Phonetic Symbols}
% \subsection{Tipa}
%
% Users that make extensive use of the Tipa symbols would
% probably have no use for this package, however now and then
% these symbols can be useful when definining words and their
% pronunciation. 
%\href{http://tex.stackexchange.com/questions/36542/using-tex-for-writing-papers-on-linguistics}{using Tex for linguistics}
%
% I am indebted to egreg at \url{http://tex.stackexchange.com/questions/64830/using-tipa-with-fontspec} for the hack to get tipa to work with fontspec.
% The \pkgname{Tipa} was developed by Rei Fukui at the Graduate School  of Humanities and Sociology,
% The University of Tokyo \cite{tipa}.

%    \begin{macrocode}
\newif\ifTIPA 
\newcommand\TIPA{\pkgname{tipa}}
\newcommand\WIPA{\pkgname{wipa}}
\ifxetex
\else
  \ifluatex
  \else
    \TIPAtrue
    \RequirePackage[tone,extra,safe]{tipa}
  \fi
\fi
%    \end{macrocode}
% 
% This is also quite useful for Wikipedia transcriptions. 
% For example `phonetics' is pronounced as  |\textipa{\sffamily f@"nEtIks}| and typed as
% |\textipa{\sffamily f@"nEtIks}|
%
% |texdoc tipaman| for the full manual if this is part of your field
% of research.
% 
% \section{Referencing}
%
% Most authors that use \LaTeXe\ develop shorthands for common tasks such as, typing
% |See figure~\ref{fig:myplot}|. The advantage of a macro is that one can be consistent
% with capitalization or abbreviations.
%
% At first I thought of providing two macros for example \cs{sref} and \cs{Sref}, however
% the problem with such an approach is internationalization. If we allow the user to
% load her language then we need to pick-up the name from the \LaTeX2e\ definitions. There
% is also the additional issue that for paragraphs and sections, sometimes people prefer
% using an abbreviation. So we stay with lowercase commands and rather set the names using
% keys in the style settings file.
% 
%    \begin{macrocode}
\cxset{ref sectionname/.store in =\refsectionname@cx,
       ref chaptername/.store in =\refchaptername@cx,
       ref appendixname/.store in = \refappendixname@cx,
       ref equationname/.store in = \refequationname@cx,
       ref figurename/.store in = \reffigurename@cx,
       ref tablename/.store in = \reftablename@cx,
       ref paragraphname/.store in =\refparagraphname@cx,
       ref examplename/.store in=\refexamplename@cx,
}
\cxset{ref sectionname = \S\thinspace,
       ref chaptername = Chapter,
       ref appendixname = \appendixname,
       ref equationname = Equation,
       ref figurename = \figurename,
       ref tablename  = \tablename,
       ref paragraphname = \P,
       ref examplename=Example,
}
\newcommand{\fref}[1]{\reffigurename@cx~\ref{#1}}
\newcommand{\tref}[1]{\tablename~\ref{#1}}
\newcommand{\eref}[1]{equation~\ref{#1}}
\@ifundefined{cref}{\newcommand{\cref}[1]{chapter~\ref{#1}}}{}
\newcommand{\sref}[1]{\refsectionname@cx\ref{#1}}
\newcommand{\aref}[1]{\refappendixname@cx~\ref{#1}}
\newcommand{\pref}[1]{\refparagraphname@cx\ref{#1}}
\newcommand\seeref[1]{\textit{see} \textbf{\ref{#1}}}
%    \end{macrocode}
%
%
%\subsection{meta}\label{meta}
%
% This has been lifted from |doc|
% \begin{macro}{\meta}
%    The |\meta| macro is a bit tricky. We want to allow line
%    breaks at blanks in the argument but we don't want a break
%    in between. In the past this was done by defining |\meta| in a way that a
%    \verb*+ + is active when the argument is scanned. Words are then
%    scanned into |\hbox|es. The active \verb*+ + will end the
%    preceding |\hbox| add an ordinary space and open a new
%    |\hbox|. In this way breaks are only possible at spaces.  The
%    disadvantage of this method was that |\meta| was neither robust
%    nor could it be |\protect|ed. The new implementation  fixes this
%    problem by defining |\meta| in a radically different way: we
%    prevent hypenation by defining a |\language| which has no
%    patterns associated with it and use this to typeset the words
%    within the angle brackets. see \sref{meta}
% 
%    \begin{macrocode}
\ifx\l@nohyphenation\undefined
  \newlanguage\l@nohyphenation
\fi
%    \end{macrocode}
%    
%    \begin{macrocode}
\DeclareRobustCommand\meta[1]{%
%    \end{macrocode}
%    Since the old implementation of |\meta| could be used in math we
%    better ensure that this is possible with the new one as
%    well. So we use |\ensuremath| around |\langle| and
%    |\rangle|. However this is not enough: if |\meta@font@select|
%    below expands to |\itshape| it will fail if used in math
%    mode. For this reason we hide the whole thing inside an
%    |\nfss@text| box in that case.
%    \begin{macrocode}
     \ensuremath\langle
     \ifmmode \expandafter \nfss@text \fi
     {%
      \meta@font@select
%    \end{macrocode}
%    Need to keep track of what we changed just in case the user
%    changes font inside the argument so we store the font explicitly.
%    \begin{macrocode}
      \edef\meta@hyphen@restore
        {\hyphenchar\the\font\the\hyphenchar\font}%
      \hyphenchar\font\m@ne
      \language\l@nohyphenation
      #1\/%
      \meta@hyphen@restore
     }\ensuremath\rangle
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\meta@font@select} 
%  	We default the definition to upshape.
%    \begin{macrocode}
\def\meta@font@select{\upshape}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\macro} 
%	The \cs{macro} environment is straight out of the
%	\pkg{doc} also. We redefine it here to allow usage in documents that have not 
%	preloaded the package.
%
%    \begin{macrocode}
\def\macro{\begingroup
   \catcode`\\12
   \MakePrivateLetters \m@cro@ \iftrue}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\environment}
%    The ``environment'' envrironment will be implemented just like the
%    ``macro'' environment flagging any differences in the code by
%    passing |\iffalse| or |\iftrue| to the |\m@cro@| environment
%    doing the actual work.
%    \begin{macrocode}
\def\environment{\begingroup
   \catcode`\\12
   \MakePrivateLetters \m@cro@ \iffalse}
%    \end{macrocode}
% \end{macro}
%
%    After scanning the argument we close the group to get the normal
%    |\catcode|$\,$s back. Then we assign a special value to
%    |\topsep| and start a \textsf{trivlist} environment. (Modified for normal indexing by YL)
%
%    \begin{macrocode}
\long\def\m@cro@#1#2{\index{\string#2}\endgroup \topsep\MacroTopsep \trivlist
%    \end{macrocode}
% We also save the name being described in |\saved@macroname| for
% 
%    \begin{macrocode}
   \edef\saved@macroname{\string#2}%
%    \end{macrocode}
%    Now there follows a variation of |\makelabel| which is used
%    should the environment not be nested, or should it lie between
%    two successive |\begin{macro}| instructions or explanatory
%    text.  One can recognize this with the switch |\if@inlabel|
%    which will be |true| in the case of successive |\item|
%    commands.
%
%    \begin{macrocode}
  \def\makelabel##1{\llap{##1}}%\llap
%    \end{macrocode}
%
%    If |@inlabel| is |true| and if $\verb=\macro@cnt= > 0$
%    then the above definition needs to be changed, because in this
%    case \LaTeX{} would otherwise put the labels all on the same line
%    and this would lead to them being overprinted on top of each
%    other.  Because of this |\makelabel| needs to be redefined
%    in this case.
%    \begin{macrocode}
  \if@inlabel
%    \end{macrocode}
%    If |\macro@cnt| has the value $1$, then we redefine
%    |\makelabel| so that the label will be positioned in the
%    second line of the margin.  As a result of this, two macro names
%    appear correctly, one under the other.  It's important whilst
%    doing this that the generated label box is not allowed to have
%    more depth than a normal line since otherwise the distance
%    between the first two text lines of \TeX{} will be incorrectly
%    calculated. The definition should then look like:
%\begin{verbatim}
%     \def\makelabel##1{\llap{\vtop to \baselineskip
%          {\hbox{\strut}\hbox{##1}\vss}}}
%\end{verbatim}
%    Completely analogous to this is the case where labels need to be
%    placed one under the other.  The lines above are only an example
%    typeset with the \textsf{verbatim} environment. To produce the real
%    definition we save the value of |\macro@cnt| in
%    |\count@| and empty the temp macro |\@tempa| for later
%    use.
%    \begin{macrocode}
    \let\@tempa\@empty \count@\macro@cnt
%    \end{macrocode}
%    In the following loop we append for every already typeset label
%    an |\hbox{\strut}| to the definition of |\@tempa|.
%    \begin{macrocode}
    \loop \ifnum\count@>\z@
      \edef\@tempa{\@tempa\hbox{\strut}}\advance\count@\m@ne \repeat
%    \end{macrocode}
%    Now be put the definition of |\makelabel| together.
%
%    \begin{macrocode}
    \edef\makelabel##1{\llap{\vtop to\baselineskip
                               {\@tempa\hbox{##1}\vss}}}%
%    \end{macrocode}
%    Next we increment the value of the nesting depth counter.  This
%    value inside the \textsf{macro} environment is always at least one
%    after this point, but its toplevel definition is zero. Provided
%    this environment has been used correctly, $|\macro@cnt|=0$
%    should not occur when |@inlabel|=\textsf{true}.  It is
%    however possible if this environment is used within other list
%    environments (but this would have little point).
%    \begin{macrocode}
    \advance \macro@cnt \@ne
%    \end{macrocode}
%    If |@inlabel| is false we reset |\macro@cnt| assuming
%    that there is enough room to print the macro name without
%    shifting.
%    \begin{macrocode}
  \else  \macro@cnt\@ne  \fi
%    \end{macrocode}
%    Now the label will be produced using |\item|. The following
%    line is only a hack saving the day until a better solution is
%    implemented.  We have to face two problems: the argument might be
%    a |\par| which is forbidden in the argument of other macros
%    if they are not defined as |\long|, or it is something like
%    |\iffalse| or |\else|, i.e.\ something which will be
%    misinterpreted when \TeX{} is skipping conditional text. In both
%    cases |\item| will bomb, so we protect the argument by using
%    |\string|.
%    \begin{macrocode}
  \edef\@tempa{\noexpand\item[%
%    \end{macrocode}
%    Depending on whether we are inside a ``macro'' or ``environment''
%    environment we use |\PrintMacroName| or |\PrintEnvName| to
%    display the name.
%    \begin{macrocode}
     #1%
       \noexpand\PrintMacroName
     \else
       \noexpand\PrintEnvName
     \fi
     {\string#2}]}%
  \@tempa
%    \end{macrocode}
%    At this point we also produce an index entry.  Because it is not
%    known which index sorting program will be used, we do not use the
%    command |\index|, but rather a command
%    |\SpecialMainIndex| after advancing the counter for indexing
%    by line number.  This may be redefined by the user in
%    order to generate an index entry which will be understood by the
%    index program in use (note the definition of
%    |\SpecialMainIndex| for our installation).
%
%    We advance the current codeline number and after producing an
%    index entry revert to the original value
%    \begin{macrocode}
  \global\advance\c@CodelineNo\@ne
%    \end{macrocode}
%    Again the macro to call depends on the environment we are
%    actually in.
%    \begin{macrocode}
   #1%
      \nobreak
      \DoNotIndex{#2}%
   \else
      \SpecialMainEnvIndex{#2}\nobreak
   \fi
  \global\advance\c@CodelineNo\m@ne
%    \end{macrocode}
%    The |\nobreak| is needed to prevent a page break after the
%    |\write| produced by the |\SpecialMainIndex| macro.  We
%    exclude the new macro in the cross-referencing feature, to
%    prevent spurious non-main entry references.  Regarding possibly
%    problematic arguments, the implementation takes
%    care of |\par| and the conditionals are uncritical.
%
%    Because the space symbol should be ignored between the
%    |\begin{macro}{...}| and the following text we must take
%    care of this with |\ignorespaces|.
%    \begin{macrocode}
  \ignorespaces}
%    \end{macrocode}
% 
%	We now ready to define the code for the end of the environments.	
%	
% \begin{macro}{\endmacro}
% \begin{macro}{\endenvironment}
%     Older releases of this environment omit the |\endgroup| token,
%     when being nested. This was done to avoid unnessary stack usage.
%     However it does not work if \textsf{macro} and
%     \textsf{environment} environments are mixed, therefore we now
%     use a simpler approach.
%
%    \begin{macrocode}
\let\endmacro \endtrivlist
\let\endenvironment\endmacro
%    \end{macrocode}
%  \end{macro}
%  \end{macro}
%
% \begin{macro}{\MacroTopsep}
%    Here is the default value for the |\MacroTopsep| parameter
%    used above.
%    \begin{macrocode}
\newskip\MacroTopsep     \MacroTopsep = 7pt plus 2pt minus 2pt
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Formatting the margin}
%
% The following three macros should be user definable.
% Therefore we define those macros only if they have not already
% been defined.
%
% \begin{macro}{\PrintMacroName}
% \begin{macro}{\PrintEnvName}
% \begin{macro}{\PrintDescribeMacro}
% \begin{macro}{\PrintDescribeEnv}
%    The formatting of the macro name in the left margin is done by
%    these macros. We first set a |\strut| to get the height and
%    depth of the normal lines. Then we change to the
%    |\MacroFont| using |\string| to |\catcode| the
%    argument to other (assuming that it is a macro name). Finally we
%    print a space.  The font change remains local since this macro
%    will be called inside an |\hbox|. NEED TO FIX
%    \begin{macrocode}
\@ifundefined{PrintMacroName}
   {\def\PrintMacroName#1{\strut \MarginMacroFonts \string #1\ }}{\def\PrintMacroName#1{\strut \MarginMacroFonts \string #1\ }}
%    \end{macrocode}
%    We use the same formatting conventions when describing a macro.
%    \begin{macrocode}
\@ifundefined{PrintDescribeMacro}
   {\def\PrintDescribeMacro#1{\strut \MacroFonts \string #1\ }}{\def\PrintDescribeMacro#1{\strut \MarginMacroFonts \string #1\ }}
%    \end{macrocode}
%    To format the name of a new environment there is no need to use
%    |\string|.
%    \begin{macrocode}
\@ifundefined{PrintDescribeEnv}
   {\def\PrintDescribeEnv#1{\strut \MacroFonts #1\ }}{\def\PrintDescribeEnv#1{\strut \MarginMacroFonts #1\ }}
\@ifundefined{PrintEnvName}
   {\def\PrintEnvName#1{\strut \MarginMacroFonts #1\ }}{\def\PrintEnvName#1{\strut \MarginMacroFonts #1\ }}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\MarginMacroFont} As we dont care for older versions of LaTeX we simplify the
%	code provide by \pkg{doc}. We also add a hook for color.
%	as we do not expect that the package will be used in places with no colour support.
%	The command used in the original \pkg{doc} is the same as the one used to
% 	typeset the code for |macrocode|, however we wish to have the option to color
%	the margin macros separately.
%	
%    \begin{macrocode}
\ifxetex
  \def\MarginMacroFonts{\color{spot!60}\ttfamily}
\else
  \ifluatex
    \def\MarginMacroFonts{\color{spot!60}\ttfamily}
  \else
    \def\MarginMacroFonts{%
                  \fontencoding\encodingdefault
                   \fontfamily\ttdefault
                   \fontseries\mddefault
                   \fontshape\updefault
                   \color{red}\small}%
  \fi
\fi
%    \end{macrocode}
% \end{macro}
%
% 
% \section{Code demo environments}
%
%	To demonstrate LaTeX code it is sometimes desirable to have the code
%	be executed. This was pioneered in a number of packages. One of
%	the better packages to do so is \pkg{tcolorbox}. We use it to define
%	a special environment.
%

% \begin{environment}{texexample} The environment |texexample| will list the code
%	using the listings package, so we can have a nice box and shows the
%	output at the bottom section.
%	First we define a new counter which resets at every chapter. If |c@chapter|
%	is not defined we reset it based on sections.
%
% \begin{enumerate}
%	\item [\#1] Title of the example
%	\item [\#2] label for referencing
% \end{enumerate}
% 
%    \begin{macrocode}
  \ifx\c@chapter\@undefined
    \newcounter{texexp}[section]
    \@addtoreset{c@texexp}{c@section}
  \else
    \newcounter{texexp}[chapter]
    \@addtoreset{c@texexp}{c@chapter}
  \fi 
%    \end{macrocode}
%
%	
%    \begin{macrocode}
%\tcbset{listing utf8=latin1}% optional; â€™latin1â€™ is the default.
 
\def\thetexexp{\@arabic\c@section.\arabic{texexp}}
\tcbset{texexp/.style={% 
    fonttitle=\small\ttfamily, 
    fontupper=\small, 
    fontlower=\small,
    coltitle=black,
    colback = codebackground,% background
    colframe=codebackground, 
      %colupper=spot!,
   },
   listing options = {%
     keywordstyle=\color{thekeywordstyle},
     belowskip=0pt, 
     escapeinside={(*@}{@*)},%
     breaklines=true,%
     backgroundcolor=\color{codebackground},%
     firstnumber=last,%
     stepnumber=1,%
     upquote=true,%
     alsoletter={_,:},%
     commentstyle=\color{thecommentstyle},%
     emph={cs,new,seq,map,inline,eq,gincr,incr,IfNoValueF,if,%
            If,exist,protect,nopar,gset,%
            set,undefine,define,add,gadd,remove,div,%
            round,truncate,max,min,mod,gzero,int,exp,put,left,args,%
            zero,newcount,protected,msg,error,%
            eval,to,arabic,alph,Alph,roman,Roman,dim%
            DeclareDocumentCommand,%
            NewDocumentCommand,%
            RenewDocumentCommand,includegraphics,
            function,local,return
         },%
           %
          % For LaTeX3 we need to add these, note % is important
          % dnâ€™t miss, at the end...
          moretexcs    = {DeclareDocumentCommand,IfBooleanTF,tex_def:D,%
          cs_new:Nn,cs_new:Npn,cs_new:cn,cs_set_nopar:Npn,token_to_meaning:N,%
          %primitives
          cs:w,cs_end:,tex_underline,group_begin:, group_end:,%
          %coffins
          NewCoffin,JoinCoffins,SetHorizontalCoffin,TypesetCoffin,%
          %properties
          prop_new:N,prop_new:c,prop_put:Nnn,%
          %boolean
          bool_new:N,bool_set_true:N,bool_set_false:N,%
          bool_if:NTF,%
          hbox_to_wd:nn,%
          IfNoValueTF,%
          %token lists
          tl_new:N,tl_set:Nn,tl_concat:NNN,%
          token_to_meaning:N,%
          seq_pop_left:NN,%
          %
          %int
          int_if_exist:cT,int_use:c,int_new:c,int_new:N,int_eval:n,%
          int_add,int_use,int_to_roman,%
          %boxes
          box_new:c,hbox_set:cn,box_use:c,vbox_set:cn,box_move_down:nn,%
          %string
          str_if_eq_x:nnTF,%
          tl_tail:n,%
          DeclareObjectType,%
          DeclareTemplateInterface,%
          DeclareTemplateCode,%
          DeclareInstance,UseInstance,AssignTemplateKeys%
          keys_set,keys_define,%      
          },%
     emphstyle=\verbatimfont\bfseries\color{black!80},%
          %
   },%close listings options
      % added for better control
      arc=0pt,  
      outer arc=0pt,
      example1/.code 2 args={\refstepcounter{texexp}\label{#2}}%Reference
     \pgfkeysalso{texexp, enhanced, breakable, title={Example \thetexexp\ #1}%
 },
}
%
\newenvironment{texexp}[1]{\tcblisting{texexp,#1}}{\endtcblisting}
\newenvironment{example1}[3][]{\tcblisting{example1={#2}{#3},#1}}%
    {\endtcblisting}
%
\newenvironment{texexample}[3][]{\noindent\tcblisting{example1={#2}{#3},#1}}%
    {\endtcblisting}
%    
% Need to fix
\let\luaexample\texexample        
\let\endluaexample\endtexexample    
%    \end{macrocode}
% \end{environment}      
%    \begin{macrocode}
%\tcbset{luacode/.style={%
%      fonttitle=\small\ttfamily, 
%      fontupper=\small, 
%      fontlower=\small,
%      coltitle=black,
%      colback = codebackground,% background
%      colframe=codebackground, 
%      %colupper=spot!,
%      },
%      listing options = {
%          language={[5.2]Lua},
%          belowskip=0pt, 
%          escapeinside={(*@}{@*)},%
%          breaklines=true,%
%          backgroundcolor=\color{codebackground},%
%          firstnumber=last,%
%          stepnumber=1,%
%          upquote=true,%
%          alsoletter={_,:},%
%          commentstyle=\bfseries\color{black!90},%
%          stringstyle = \color{black!90},
%          emphstyle=\verbatimfont\bfseries\color{black!80},%
%          keywordstyle= \bfseries\color{black!80},%
%          },
%      % added for better control
%      arc=0pt,  
%      outer arc=0pt,
%      luaexp1/.code 2 args={\refstepcounter{texexp}\label{#2}}%Reference
%     \pgfkeysalso{luacode, enhanced, breakable, title={Example \thetexexp\ #1}},
%}
%\newenvironment{luaexp1}[1]{\tcblisting{luacode,#1}}{\endtcblisting}
%
%\newenvironment{luaexample}[3][]{\noindent\tcblisting{luaexp1={#2}{#3},#1}}%
%    {\endtcblisting}
%%
%    \end{macrocode} 
%
% The following demonstrates the usage.
%
% 	\begin{texexample}[]{atest}{This is a comment?}
%	  \def\demomacro{Hello World!}
%	\end{texexample}
%
% 	\begin{example}{A Test}{test}{This is a comment?}
%	  \def\demomacro{Hello World!}
%	\end{example}
%
%
%
% \section{Floats settings} 
%                   
% We use Donald Arseneau's improved float parameters. I am not too sure when this was first referenced
% once I find it, will provide a citation and or a link.
% 
% For some of the rationale behind |topfraction| values see \ref{topfraction}.
%    \begin{macrocode}
\renewcommand{\topfraction}{.85}
\renewcommand{\bottomfraction}{.7} % .3 in kernel.
\renewcommand{\textfraction}{.15}
\renewcommand{\floatpagefraction}{.7}
\renewcommand{\dbltopfraction}{.66}
\renewcommand{\dblfloatpagefraction}{.66}
\setcounter{topnumber}{9}
\setcounter{bottomnumber}{9}
\setcounter{totalnumber}{20}
\setcounter{dbltopnumber}{9}
%    \end{macrocode}
%	
%\section{Hyphenation}
%
% The below have been mostly lifted from TUGBoat class. I would appreciate
% any additions. See also \url{http://ctan.um.ac.ir/info/digests/tugboat/hyphenex/tb0hyf.pdf}
%
% Hyphenation exceptions for US English,
% based on hyphenation exception log articles in TUGboat.
%
% Copyright 2008 TeX Users Group.
% You may freely use, modify and/or distribute this file.
%
% Please contact the TUGboat editorial staff <tugboat@tug.org>
% for corrections and omissions.
% We also assume that the class has provided some decent hyphenation rules
% I acknowledge that this might not be totally satisfactory and one needs
% to think of a better way in a future version.
%
% \index{hyphenation}
%    \begin{macrocode}
\ifx\tubomithyphenations\@thisisundefined
\hyphenation{%
  acad-e-my
  acad-e-mies
  ac-cu-sa-tive
  acro-nym
  acro-nyms
  acryl-amide
  acryl-amides
  acryl-alde-hyde
  acu-punc-ture
  acu-punc-tur-ist
  add-a-ble
  add-i-ble
  adren-a-line
  aero-space
  af-ter-thought
  af-ter-thoughts
  agron-o-mist
  agron-o-mists
  al-ge-bra-i-cal-ly
  am-phet-a-mine
  am-phet-a-mines
  anach-ro-nism
  anach-ro-nis-tic
  an-a-lyse
  an-a-lysed
  analy-ses
  analy-sis
  an-eu-rysm
  an-eu-rysms
  an-eu-rys-mal
  an-iso-trop-ic
  an-iso-trop-i-cal-ly
  an-isot-ro-pism
  an-isot-ropy
  anom-aly
  anom-alies
  anti-deriv-a-tive
  anti-deriv-a-tives
  anti-holo-mor-phic
  an-tin-o-my
  an-tin-o-mies
  anti-nu-clear
  anti-nu-cle-on
  anti-rev-o-lu-tion-ary
  apoth-e-o-ses
  apoth-e-o-sis
  ap-pen-di-ces
  ap-pen-dix
  ap-pen-dixes
  ar-chi-me-dean
  ar-chi-pel-ago
  ar-chi-pel-a-gos
  ar-chive
  ar-chives
  ar-chiv-ing
  ar-chiv-ist
  ar-chiv-ists
  ar-che-typ-al
  ar-che-type
  ar-che-types
  ar-che-typ-i-cal
  arc-tan-gent
  arc-tan-gents
  as-sign-a-ble
  as-sign-or
  as-sign-ors
  as-sist-ant
  as-sist-ance
  as-sist-ant-ship
  as-sist-ant-ships
  asymp-to-matic
  as-ymp-tot-ic
  asyn-chro-nous
  ath-er-o-scle-ro-sis
  at-mos-phere
  at-mos-pheres
  at-tri-bute
  at-trib-uted
  at-trib-ut-able
  au-to-ma-tion
  au-tom-a-ton
  au-tom-a-ta
  auto-num-ber-ing
  au-ton-o-mous
  auto-re-gres-sion
  auto-re-gres-sive
  auto-round-ing
  av-oir-du-pois
  band-lead-er
  band-lead-ers
  bank-rupt
  bank-rupts
  bank-rupt-cy
  bank-rupt-cies
  bar-onies
  base-line-skip
  ba-thym-e-try
  bathy-scaphe
  bean-ies
  be-drag-gle
  be-drag-gled
  bed-rock
  be-dwarf
  be-dwarfs
  be-hav-iour
  be-hav-iours
  bevies
  bib-lio-graph-i-cal
  bib-li-og-ra-phy-style
  bib-units
  bi-dif-fer-en-tial
  big-gest
  bill-able
  bio-math-e-mat-ics
  bio-med-i-cal
  bio-med-i-cine
  bio-rhythms
  bio-weap-ons
  bio-weap-on-ry
  bit-map
  bit-maps
  bland-er
  bland-est
  blind-er
  blind-est
  blondes
  blue-print
  blue-prints
  bo-lom-e-ter
  bo-lom-e-ters
  book-sell-er
  book-sell-ers
  bool-ean
  bool-eans
  bor-no-log-i-cal
  bot-u-lism
  brusquer
  buf-fer
  buf-fers
  bun-gee
  bun-gees
  busier
  busi-est
  bussing
  butted
  buzz-word
  buzz-words
  ca-coph-o-ny
  ca-coph-o-nies
  call-er
  call-ers
  cam-era-men
  cart-wheel
  cart-wheels
  ca-tarrhs
  cat-a-stroph-ic
  cat-a-stroph-i-cally
  cat-e-noid
  cat-e-noids
  cau-li-flow-er
  chap-ar-ral
  char-treuse
  chemo-ther-apy
  chemo-ther-a-pies
  chloro-meth-ane
  chloro-meth-anes
  cho-les-teric
  cig-a-rette
  cig-a-rettes
  cinque-foil
  co-asso-cia-tive
  coch-leas
  coch-lear
  co-designer
  co-designers
  co-gnac
  co-gnacs
  co-ker-nel
  co-ker-nels
  col-lin-ea-tion
  col-umns
  com-par-and
  com-par-ands
  com-pen-dium
  com-po-nent-wise
  comp-trol-ler
  comp-trol-lers
  com-put-able
  com-put-abil-ity
  con-form-able
  con-form-ist
  con-form-ists
  con-form-ity
  con-ge-ries
  con-gress
  con-gresses
  con-struc-ti-ble
  con-struc-ti-bil-ity
  con-trib-ute
  con-trib-utes
  con-trib-uted
  copy-right-able
  co-re-la-tion
  co-re-la-tions
  co-re-li-gion-ist
  co-re-li-gion-ists
  co-re-op-sis
  co-re-spon-dent
  co-re-spon-dents
  co-se-cant
  co-semi-sim-ple
  co-tan-gent
  cour-ses
  co-work-er
  co-work-ers
  crank-case
  crank-shaft
  croc-o-dile
  croc-o-diles
  cross-hatch
  cross-hatched
  cross-hatch-ing
  cross-over
  cryp-to-gram
  cryp-to-grams
  cuff-link
  cuff-links
  cu-nei-form
  cus-tom-iz-a-ble
  cus-tom-ize
  cus-tom-izes
  cus-tom-ized
  cy-ber-virus
  cy-ber-viruses
  cy-ber-wea-pon
  cy-ber-wea-pons
  dachs-hund
  dam-sel-fly
  dam-sel-flies
  dactyl-o-gram
  dactyl-o-graph
  data-base
  data-bases
  data-path
  data-paths
  date-stamp
  date-stamps
  de-allo-cate
  de-allo-cates
  de-allo-cated
  de-allo-ca-tion
  de-allo-ca-tions
  de-clar-able
  de-fin-i-tive
  de-lec-ta-ble
  demi-semi-qua-ver
  demi-semi-qua-vers
  de-moc-ra-tism
  demos
  der-i-va-tion
  der-i-va-tions
  der-i-va-tion-al
  de-riv-a-tive
  de-riv-a-tives
  dia-lec-tic
  dia-lec-tics
  dia-lec-ti-cian
  dia-lec-ti-cians
  di-chloro-meth-ane
  dif-fract
  dif-fracts
  dif-frac-tion
  dif-frac-tions
  direr
  dire-ness
  dis-par-and
  dis-par-ands
  dis-traught-ly
  dis-trib-ut-able
  dis-trib-ute
  dis-trib-utes
  dis-trib-uted
  dis-trib-u-tive
  dou-ble-space
  dou-ble-spaced
  dou-ble-spac-ing
  doll-ish
  drift-age
  driv-ers
  drom-e-dary
  drom-e-daries
  du-op-o-list
  du-op-o-lists
  du-op-oly
  dys-lexia
  dys-lec-tic
  east-end-ers
  eco-sys-tem
  eco-sys-tems
  eco-nom-ics
  econ-o-mies
  econ-o-mist
  econ-o-mists
  ei-gen-class
  ei-gen-classes
  ei-gen-val-ue
  ei-gen-val-ues
  electro-mechan-i-cal
  electro-mechano-acoustic
  elit-ist
  elit-ists
  en-dos-copies
  en-dos-copy
  en-tre-pre-neur
  en-tre-pre-neurs
  en-tre-pre-neur-ial
  ep-i-neph-rine
  eps-to-pdf
  equi-vari-ant
  equi-vari-ance
  er-go-nom-ic
  er-go-nom-ics
  er-go-nom-i-cally
  es-sence
  es-sences
  eth-ane
  eth-yl-am-ine
  eth-yl-ate
  eth-yl-ated
  eth-yl-ene
  ethy-nyl
  ethy-nyl-a-tion
  eu-sta-chian
  ever-si-ble
  evert
  everts
  evert-ed
  evert-ing
  ex-quis-ite
  ex-tra-or-di-nary
  fall-ing
  fermi-ons
  figu-rine
  figu-rines
  fi-nite-ly
  fla-gel-lum
  fla-gel-la
  flam-ma-bles
  fledg-ling
  flow-chart
  flow-charts
  fluoro-car-bon
  fluor-os-copies
  fluor-os-copy
  for-mi-da-ble
  for-mi-da-bly
  for-syth-ia
  forth-right
  free-loader
  free-loaders
  friend-lier
  friend-li-est
  fri-vol-ity
  fri-vol-i-ties
  friv-o-lous
  front-end
  front-ends
  ga-lac-tic
  gal-axy
  gal-ax-ies
  gas-om-e-ter
  ge-o-des-ic
  ge-o-det-ic
  geo-met-ric
  geo-met-rics
  ge-o-strophic
  geo-ther-mal
  ge-ot-ro-pism
  gno-mon
  gno-mons
  grand-uncle
  grand-uncles
  griev-ance
  griev-ances
  griev-ous
  griev-ous-ly
  group-like
  hair-style
  hair-styles
  hair-styl-ist
  hair-styl-ists
  half-life
  half-lives
  half-space
  half-spaces
  half-way
  har-bin-ger
  har-bin-gers
  har-le-quin
  har-le-quins
  hatch-eries
  he-lio-pause
  he-lio-trope
  hemi-demi-semi-qua-ver
  hemi-demi-semi-qua-vers
  he-mo-glo-bin
  he-mo-phil-ia
  he-mo-phil-iac
  he-mo-phil-iacs
  hemo-rhe-ol-ogy
  he-pat-ic
  he-pat-ica
  her-maph-ro-dite
  her-maph-ro-dit-ic
  he-roes
  hexa-dec-i-mal
  holo-deck
  holo-decks
  ho-lo-no-my
  ho-meo-mor-phic
  ho-meo-mor-phism
  ho-meo-stat-ic
  ho-meo-stat-ics
  ho-meo-sta-sis
  ho-mo-thetic
  horse-rad-ish
  hot-bed
  hot-beds
  hounds-teeth
  hounds-tooth
  hy-dro-ther-mal
  hy-per-elas-tic-ity
  hy-po-elas-tic-ity
  hy-po-thal-a-mus
  ideals
  ideo-graphs
  idio-syn-crasy
  idio-syn-cra-sies
  idio-syn-cratic
  idio-syn-crat-i-cal-ly
  ig-nit-er
  ig-nit-ers
  ig-ni-tor
  ignore-spaces
  il-li-quid
  il-li-quid-ity
  im-ped-ance
  im-ped-ances
  in-du-bi-ta-ble
  in-fin-ite-ly
  in-fin-i-tes-i-mal
  in-fra-struc-ture
  in-fra-struc-tures
  input-enc
  in-stall-er
  in-stall-ers
  in-teg-rity
  in-ter-dis-ci-pli-nary
  in-ter-ga-lac-tic
  in-ter-view-ee
  in-ter-view-ees
  in-utile
  in-util-i-ty
  ir-re-duc-ible
  ir-re-duc-ibly
  ir-rev-o-ca-ble
  iso-geo-met-ric
  iso-geo-met-rics
  iso-ther-mal
  isot-ropy
  iso-trop-ic
  itin-er-ary
  itin-er-ar-ies
  je-re-mi-ads
  key-note
  key-notes
  key-stroke
  key-strokes
  kiln-ing
  lac-i-est
  lam-en-ta-ble
  land-scap-er
  land-scap-ers
  lar-ce-n
  lar-ce-ny
  lar-ce-nies
  lar-ce-nist
  leaf-hop-per
  leaf-hop-pers
  let-ter-spaces
  let-ter-spaced
  let-ter-spac-ing
  leu-ko-cyte
  leu-ko-cytes
  life-span
  life-spans
  life-style
  life-styles
  light-weight
  lim-ou-sines
  line-backer
  line-spacing
  li-on-ess
  li-quid-ity
  lith-o-graphed
  lith-o-graphs
  lo-bot-omy
  lo-bot-om-ize
  loges
  long-est
  look-ahead
  lo-quac-ity
  love-struck
  macro-eco-nomic
  macro-eco-nomics
  macro-econ-omy
  make-in-dex
  mal-a-prop-ism
  mal-a-prop-isms
  man-slaugh-ter
  man-u-script
  man-u-scripts
  mar-gin-al
  math-e-ma-ti-cian
  math-e-ma-ti-cians
  mattes
  med-ic-aid
  medi-ocre
  medi-oc-ri-ties
  mega-fau-na
  mega-fau-nal
  mega-lith
  mega-liths
  meta-bol-ic
  me-tab-o-lism
  me-tab-o-lisms
  me-tab-o-lite
  me-tab-o-lites
  meta-form
  meta-forms
  meta-lan-guage
  meta-lan-guages
  meta-phor-ic
  meta-sta-bil-ity
  meta-stable
  meta-table
  meta-tables
  meth-am-phet-a-mine
  meth-ane
  meth-od
  meth-yl-am-mo-nium
  meth-yl-ate
  meth-yl-ated
  meth-yl-a-tion
  meth-yl-ene
  me-trop-o-lis
  me-trop-o-lises
  met-ro-pol-i-tan
  met-ro-pol-i-tans
  micro-eco-nomic
  micro-eco-nomics
  micro-econ-omy
  micro-en-ter-prise
  micro-en-ter-prises
  mi-cro-fiche
  mi-cro-fiches
  micro-organ-ism
  micro-organ-isms
  mi-cro-struc-ture
  mill-age
  mil-li-liter
  mimeo-graphed
  mimeo-graphs
  mim-ic-ries
  mine-sweeper
  mine-sweepers
  min-is
  mini-sym-po-sium
  mini-sym-po-sia
  mi-nut-er
  mi-nut-est
  mis-chie-vous-ly
  mi-sers
  mi-sog-a-my
  mne-mon-ic
  mne-mon-ics
  mod-el-ling
  mol-e-cule
  mol-e-cules
  mon-archs
  money-len-der
  money-len-ders
  mono-chrome
  mono-en-er-getic
  mon-oid
  mon-oph-thong
  mon-oph-thongs
  mono-pole
  mono-poles
  mo-nop-oly
  mono-space
  mono-spaced
  mono-spacing
  mono-spline
  mono-splines
  mono-strofic
  mo-not-o-nies
  mo-not-o-nous
  mo-ron-ism
  mos-qui-to
  mos-qui-tos
  mos-qui-toes
  mud-room
  mud-rooms
  mul-ti-fac-eted
  mul-ti-plic-able
  mul-ti-plic-ably
  multi-user
  name-space
  name-spaces
  neo-fields
  neo-nazi
  neo-nazis
  neph-ews
  neph-rite
  neph-ritic
  new-est
  news-let-ter
  news-let-ters
  nil-po-tent
  nitro-meth-ane
  node-list
  node-lists
  no-name
  non-ar-ith-met-ic
  non-emer-gency
  non-equi-vari-ance
  none-the-less
  non-euclid-ean
  non-iso-mor-phic
  non-pseudo-com-pact
  non-smooth
  non-uni-form
  non-uni-form-ly
  non-zero
  nor-ep-i-neph-rine
  not-with-stand-ing
  nu-cleo-tide
  nu-cleo-tides
  nut-crack-er
  nut-crack-ers
  oer-steds
  off-line
  off-load
  off-loads
  off-loaded
  oli-gop-o-list
  oli-gop-o-lists
  oli-gop-oly
  oli-gop-ol-ies
  om-ni-pres-ent
  om-ni-pres-ence
  ono-mat-o-poe-ia
  ono-mat-o-po-et-ic
  op-er-and
  op-er-ands
  orang-utan
  orang-utans
  or-tho-don-tist
  or-tho-don-tists
  or-tho-ker-a-tol-ogy
  ortho-nitro-toluene
  over-view
  over-views
  ox-id-ic
  pad-ding
  page-rank
  pain-less-ly
  pal-ette
  pal-ettes
  pa-rab-ola
  par-a-bol-ic
  pa-rab-o-loid
  par-a-digm
  par-a-digms
  para-chute
  para-chutes
  para-di-methyl-benzene
  para-fluoro-toluene
  para-graph-er
  para-le-gal
  par-al-lel-ism
  para-mag-net-ism
  para-medic
  para-methyl-anisole
  pa-ram-e-tri-za-tion
  pa-ram-e-trize
  para-mil-i-tary
  para-mount
  path-o-gen-ic
  peev-ish
  peev-ish-ness
  pen-ta-gon
  pen-ta-gons
  pe-tro-le-um
  phe-nol-phthalein
  phe-nom-e-non
  phenyl-ala-nine
  phi-lat-e-list
  phi-lat-e-lists
  pho-neme
  pho-nemes
  pho-ne-mic
  phos-phor-ic
  pho-to-graphs
  pho-to-off-set
  phtha-lam-ic
  phthal-ate
  phthi-sis
  pic-a-dor
  pic-a-dors
  pipe-line
  pipe-lines
  pipe-lin-ing
  pi-ra-nhas
  placa-ble
  plant-hop-per
  plant-hop-pers
  pla-teau
  pla-teaus
  pleas-ance
  plug-in
  plug-ins
  pol-ter-geist
  poly-an-dr
  poly-an-dry
  poly-an-drous
  poly-dac-tyl
  poly-dac-tyl-lic
  poly-ene
  poly-eth-yl-ene
  po-lyg-a-mist
  po-lyg-a-mists
  polyg-on-i-za-tion
  po-lyg-y-n
  po-lyg-y-ny
  po-lyg-y-nous
  pol-yp
  pol-yps
  po-lyph-o-n
  po-lyph-o-ny
  po-lyph-o-nous
  poly-phon-ic
  poly-styrene
  pome-gran-ate
  poro-elas-tic
  por-ous
  por-ta-ble
  post-am-ble
  post-am-bles
  post-hu-mous
  post-script
  post-scripts
  pos-tur-al
  pre-am-ble
  pre-am-bles
  pre-loaded
  pre-par-ing
  pre-print
  pre-prints
  pre-proces-sor
  pre-proces-sors
  pres-ent-ly
  pre-split-ting
  pre-wrap
  pre-wrapped
  priest-esses
  pret-ty-prin-ter
  pret-ty-prin-ting
  pro-ce-dur-al
  process
  pro-cur-ance
  prog-e-nies
  prog-e-ny
  pro-gram-mable
  pro-kary-ote
  pro-kary-otes
  pro-kary-ot-ic
  prom-i-nent
  pro-mis-cu-ous
  prom-is-sory
  prom-ise
  prom-ises
  pro-pel-ler
  pro-pel-lers
  pro-pel-ling
  pro-hib-i-tive
  pro-hib-i-tive-ly
  pro-sciut-to
  pro-style
  pro-styles
  pro-test-er
  pro-test-ers
  pro-tes-tor
  pro-tes-tors
  pro-to-lan-guage
  pro-to-typ-al
  prov-ince
  prov-inces
  pro-vin-cial
  pro-virus
  pro-viruses
  prow-ess
  pseu-do-dif-fer-en-tial
  pseu-do-fi-nite
  pseu-do-fi-nite-ly
  pseu-do-forces
  pseu-dog-ra-pher
  pseu-do-group
  pseu-do-groups
  pseu-do-nym
  pseu-do-nyms
  pseu-do-word
  pseu-do-words
  psy-che-del-ic
  psychs
  pu-bes-cence
  pur-ges
  quad-ding
  qua-drat-ic
  qua-drat-ics
  quad-ra-ture
  quad-ri-pleg-ic
  quaint-er
  quaint-est
  qua-si-equiv-a-lence
  qua-si-equiv-a-lences
  qua-si-equiv-a-lent
  qua-si-hy-po-nor-mal
  qua-si-rad-i-cal
  qua-si-resid-ual
  qua-si-smooth
  qua-si-sta-tion-ary
  qua-si-topos
  qua-si-tri-an-gu-lar
  qua-si-triv-ial
  quin-tes-sence
  quin-tes-sences
  quin-tes-sen-tial
  rab-bit-ry
  ra-di-og-ra-phy
  raff-ish
  raff-ish-ly
  ram-shackle
  rav-en-ous
  re-allo-cate
  re-allo-cates
  re-allo-cated
  re-arrange
  re-arranges
  re-arranged
  re-arrange-ment
  re-arrange-ments
  rec-i-proc-i-ties
  rec-i-proc-i-ty
  rec-tan-gle
  rec-tan-gles
  rec-tan-gu-lar
  re-di-rect
  re-di-rect-ion
  re-duc-ible
  re-echo
  re-edu-cate
  ref-u-gee
  ref-u-gees
  re-phrase
  re-phrases
  re-phrased
  re-po-si-tion
  re-po-si-tions
  re-print
  re-prints
  re-print-ed
  re-stor-able
  retro-fit
  retro-fit-ted
  re-us-able
  re-use
  re-wire
  re-wrap
  re-wrapped
  re-write
  rhi-noc-er-os
  right-eous
  right-eous-ness
  ring-leader
  ring-leaders
  ro-bot
  ro-bots
  ro-botic
  ro-bot-ics
  round-table
  round-tables
  sales-clerk
  sales-clerks
  sales-woman
  sales-women
  sal-mo-nel-la
  sal-ta-tion
  sar-sa-par-il-la
  sat-el-lite
  sat-el-lites
  sauer-kraut
  scat-o-log-i-cal
  sched-ul-ing
  schiz-o-phrenic
  schnau-zer
  school-child
  school-child-ren
  school-teacher
  school-teach-ers
  scru-ti-ny
  scyth-ing
  sell-er
  sell-ers
  sec-re-tar-iat
  sec-re-tar-iats
  sem-a-phore
  sem-a-phores
  se-mes-ter
  semi-def-i-nite
  semi-di-rect
  semi-ho-mo-thet-ic
  semi-ring
  semi-rings
  semi-sim-ple
  semi-skilled
  sem-itic
  ser-geant
  ser-geants
  sero-epi-de-mi-o-log-i-cal
  ser-vo-me-chan-i-cal
  ser-vo-mech-a-nism
  ser-vo-mech-a-nisms
  ses-qui-pe-da-lian
  set-up
  set-ups
  se-vere-ly
  shap-able
  shape-able
  shoe-string
  shoe-strings
  show-hy-phens
  side-step
  side-steps
  side-swipe
  single-space
  single-spaced
  single-spacing
  sky-scraper
  sky-scrapers
  sln-uni-code
  smoke-stack
  smoke-stacks
  snor-kel-ing
  so-le-noid
  so-le-noids
  solute
  solutes
  sov-er-eign
  sov-er-eigns
  spa-ces
  spe-cious
  spell-er
  spell-ers
  spell-ing
  spe-lunk-er
  spend-thrift
  spher-oid
  spher-oids
  spher-oid-al
  sphin-ges
  spic-i-ly
  spin-or
  spin-ors
  spokes-man
  spokes-per-son
  spokes-per-sons
  spokes-woman
  spokes-women
  sports-cast
  sports-cast-er
  spor-tive-ly
  sports-wear
  sports-writer
  sports-writers
  spright-lier
  squea-mish
  stand-alone
  star-tling
  star-tling-ly
  sta-tis-tics
  stealth-ily
  steeple-chase
  stereo-graph-ic
  sto-chas-tic
  strange-ness
  strap-hanger
  strat-a-gem
  strat-a-gems
  stretch-i-er
  strip-tease
  strong-est
  strong-hold
  stu-pid-er
  stu-pid-est
  sub-dif-fer-en-tial
  sub-ex-pres-sion
  sub-ex-pres-sions
  sub-scrib-er
  sub-scrib-ers
  sub-tables
  sum-ma-ble
  super-deri-va-tion
  super-deri-va-tions
  super-ego
  super-egos
  su-prem-a-cist
  su-prem-a-cists
  sur-gery
  sur-ge-ries
  sur-ges
  sur-veil-lance
  swim-ming-ly
  symp-to-matic
  syn-chro-mesh
  syn-chro-nous
  syn-chro-tron
  taff-rail
  take-over
  take-overs
  talk-a-tive
  ta-pes-try
  ta-pes-tries
  tar-pau-lin
  tar-pau-lins
  te-leg-ra-pher
  te-leg-ra-phers
  tele-ki-net-ic
  tele-ki-net-ics
  tele-ro-bot-ics
  tell-er
  tell-ers
  tem-po-rar-ily
  ten-ure
  test-bed
  tetra-butyl-ammo-nium
  text-height
  text-length
  text-width
  thal-a-mus
  ther-mo-elas-tic
  time-stamp
  time-stamps
  tool-kit
  tool-kits
  topo-graph-i-cal
  topo-iso-mer-ase
  topo-iso-mer-ases
  toques
  trai-tor-ous
  trans-ceiver
  trans-ceivers
  trans-par-en-cy
  trans-par-en-cies
  trans-gress
  trans-ver-sal
  trans-ver-sals
  trans-ves-tite
  trans-ves-tites
  tra-vers-a-ble
  tra-ver-sal
  tra-ver-sals
  tri-ethyl-amine
  treach-eries
  tribes-man
  trou-ba-dour
  tur-key
  tur-keys
  turn-around
  turn-arounds
  typ-al
  un-at-tached
  un-err-ing-ly
  un-friend-ly
  un-friend-li-er
  vaguer
  vaude-ville
  vic-ars
  vil-lain-ess
  vis-ual
  vis-ual-ly
  vi-vip-a-rous
  voice-print
  vspace
  wad-ding
  wall-flower
  wall-flow-ers
  warm-er
  warm-est
  waste-water
  wave-guide
  wave-guides
  wave-let
  wave-lets
  weap-ons
  weap-on-ry
  web-like
  week-night
  week-nights
  wheel-chair
  wheel-chairs
  which-ever
  white-sided
  white-space
  white-spaces
  wide-spread
  wing-span
  wing-spans
  wing-spread
  witch-craft
  word-spac-ing
  work-around
  work-arounds
  work-horse
  work-horses
  wrap-around
  wrap-arounds
  wretch-ed
  wretch-ed-ly
  yes-ter-year
  al-ge-brai-sche
  Al-le-ghe-ny
  Apol-lo-dorus
  Ar-kan-sas
  ATP-ase
  ATP-ases
  Aus-tral-asian
  auto-ma-ti-sier-ter
  Beb-chuk
  Be-die-nung
  Bembo
  bi-blio-gra-phi-sche
  Bos-ton
  Brown-ian
  Bruns-wick
  Bu-da-pest
  Burck-hardt
  Car-ib-bean
  Charles-ton
  Char-lottes-ville
  Ches-ter
  Chiang
  Chich-es-ter
  Cohen
  Co-lum-bia
  Czecho-slo-va-kia
  Del-a-ware
  Dijk-stra
  Dor-ches-ter
  Dorf-leit-ner
  Drechs-ler
  Duane
  dy-na-mi-sche
  Eijk-hout
  Engle
  Engel
  Eng-lish
  Euler-ian
  Evan-ston
  Feb-ru-ary
  Fest-schrift
  Flor-i-da
  Flor-i-d-ian
  For-schungs-in-sti-tut
  Free-BSD
  funk-tsional
  Gauss-ian
  Ge-sell-schaft
  Ghost-script
  Ghost-View
  Gott-lieb
  Grass-mann-ian
  Greifs-wald
  Grothen-dieck
  Grund-leh-ren
  Ha-da-mard
  Hai-fa
  Hamil-ton-ian
  Hel-sinki
  Her-mit-ian
  Hibbs
  Hoek-water
  Hok-kai-do
  Huber
  Image-Magick
  Jac-kow-ski
  Jan-u-ary
  Ja-pa-nese
  Java-Script
  Jung-ian
  Kad-om-tsev
  Kan-sas
  Karls-ruhe
  Keynes-ian
  Kor-te-weg
  Krishna
  Krish-na-ism
  Krish-nan
  Kron-ecker
  Lan-cas-ter
  Le-gendre
  Leices-ter
  Lip-schitz
  Lip-schitz-ian
  Loj-ban
  Lou-i-si-ana
  Lucas
  MacBeth
  Mac-OS
  Ma-gel-lan
  Ma-la-ya-lam
  Man-ches-ter
  Mar-kov-ian
  Markt-ober-dorf
  Mass-a-chu-setts
  Max-well
  Meth-od-ist
  Meth-od-ism
  Mi-cro-soft
  Min-kow-ski
  Min-ne-ap-o-lis
  Min-ne-sota
  Mont-real
  Mos-cow
  Nach-rich-ten
  Nash-ville
  Net-BSD
  Net-scape
  Nij-me-gen
  Noe-ther-ian
  Noord-wijker-hout
  Noto-wi-digdo
  No-vem-ber
  Obst-feld
  Open-BSD
  Open-Office
  Oreo-pou-los
  Pala-tino
  Pa-ler-mo
  Pe-trov-ski
  Pfaff-ian
  Phil-a-del-phia
  phi-lo-so-phi-sche
  Poin-care
  Po-ten-tial-glei-chung
  Pres-by-terian
  Pres-by-terians
  Py-thag-o-ras
  Py-thag-o-re-an
  Ra-dha-krish-nan
  raths-kel-ler
  Ravi-kumar
  Reich-lin
  Rie-mann-ian
  Ryd-berg
  Schim-mel-pfen-nig
  schot-ti-sche
  Schro-din-ger
  Schwa-ba-cher
  Schwarz-schild
  Schweid-nitz
  Schwert
  Sep-tem-ber
  Shore-ditch
  Skoup
  Stokes-sche
  Stutt-gart
  Sus-que-han-na
  Tau-ber-ian
  tech-ni-sche
  Ten-nes-see
  Thiruv-ananda-puram
  Tol-ches-ter
  To-ma-szew-ski
  Toyo-ta
  ty-po-graphique
  Ukrain-ian
  ver-all-ge-mei-nerte
  Ver-ei-ni-gung
  Ver-tei-lun-gen
  Vid-ias-sov
  Vieth
  viiith
  viith
  Wahr-schein-lich-keits-theo-rie
  Wein-stein
  Wer-ner
  Wer-ther-ian
  Will-iam
  Will-iams
  Win-ches-ter
  Wirt-schaft
  wis-sen-schaft-lich
  Wolff-ian
  xviiith
  xviith
  xxiiird
  xxiind
  Ying-yong Shu-xue Ji-suan
  Zea-land
  Zeit-schrift
}
\fi
%    \end{macrocode}
%
% We done with a very long and exhausting, preamble but hopefully
% will save countless hours for other people. If you use it in your
% publication send me a copy of it.  What follow is the special keys
% for formatting sectioning commands.
% 	
% \chapter{Section Formatting}
%
% \section{Introduction}
%
%  The code that follows deals exclusively with sectioning commands.
% The macros \cs{HUGE} and \cs{HHUGE} provide larger sizes than those
% provided by \LaTeXe that are used in the production of titles and
% chapter heads.
%
% \begin{macro}{\words@cx} Utility macro for translating a 
% number from numbers to words.
% 
%    \begin{macrocode}
\def\words@cx#1{%
  \ifcase#1 zero\or one\or two\or three\or four\or five\or six\or seven
\or eight\or nine\or ten\or eleven\or twelve\or thirteen\or
fourteen
\or fifteen\or sixteen\or seventeen\or eighteen\or nineteen \or
twenty
\or twenty one\or twenty two\or twenty three\or twenty four\or
twenty five
\or twenty six\or twenty seven \or twenty eight \or twenty
nine\or thirty
\or thirty one\or thirty two\or thirty three\or thirty four\or
thirty five
\or thirty six\or thirty seven\or thirty eight\or thirty nine\or
forty\or forty one
\or forty two \or forty three\or forty four\or forty five \or
forty six \or forty seven
\or forty eight \or forty nine\or fifty\or fifty on\or fifty
two\or fifty three
\or fifty four\or fifty five\or fifty six\or fifty seven\or
fifty eight\or fifty nine
  \or sixty \or sixty one \or sixty two
  \or sixty three \or sixty four \or sixty five
    \else
    #1
    %\@ctrerr
    \fi
}

\def\Words@cx#1{%
\ifcase#1 Zero\or One\or Two\or Three\or Four\or Five\or Six\or
Seven\or Eight\or Nine\or Ten\or
Eleven\or Twelve\or Thirteen\or Fourteen\or Fifteen\or
Sixteen\or Seventeen\or Eighteen\or Nineteen \or Twenty\or
Twenty One\or Twenty Two\or Twenty Three\or Twenty Four\or
Twenty Five\or Twenty Six\or Twenty Seven \or Twenty Eight \or
Twenty Nine\or Thirty\or Thirty One\or Thirty Two\or Thirty
Three\or Thirty Four\or Thirty Five\or Thirty Six\or Thirty
Seven\or Thirty Eight\or Thirty Nine\or Forty\or Forty One\or
Forty Two \or Forty Three\or Forty Four\or Forty Five \or Forty
Six \or Forty Seven\or Forty Eight \or Forty Nine\or Fifty\or
Fifty One\or Fifty Two\or Fifty Three\or Fifty four\or Fifty
Five\or Fifty Six\or Fifty Seven\or Fifty Eight\or Fifty Nine\or
Sixty \or Sixty One \or Sixty Two
\or Sixty Three \or Sixty Four \or Sixty Five \or SixtySix \or SixtySeven
\or Sixty Eight \or SixtyNine \or Seventy \or Seventy One \or Seventy Two
\else
#1
%\@ctrerr
\fi}

\def\WORDS@cx#1{%
\ifcase#1 ZERO\or ONE\or TWO\or THREE\or FOUR\or FIVE\or SIX\or
SEVEN\or EIGHT\or NINE\or TEN\or
ELEVEN\or TWELVE\or THIRTEEN\or FOURTEEN\or FIFTEEN\or
SIXTEEN\or SEVENTEEN\or EIGHTEEN\or NINETEEN \or TWENTY\or
TWENTY ONE\or TWENTY TWO\or TWENTY THREE\or TWENTY FOUR\or
TWENTY FIVE\or TWENTY SIX\or TWENTY SEVEN \or TWENTY EIGHT \or
TWENTY NINE\or THIRTY\or THIRTY ONE\or THIRTY TWO\or THIRTY
THREE\or THIRTY FOUR\or THIRTY FIVE\or THIRTY SIX\or THIRTY
SEVEN\or THIRTY EIGHT\or THIRTY NINE\or FORTY\or FORTY ONE\or
FORTY TWO \or FORTY THREE\or FORTY FOUR\or FORTY FIVE\or FORTY
SIX\or FORTY SEVEN\or FORTY EIGHT\or FORTY NINE\or FIFTY\or
FIFTY ONE\or FIFTY TWO\or FIFTY THREE\or FIFTY FOUR\or FIFTY
FIVE\or FIFTY SIX\or FIFTY SEVEN\or FIFTY EIGHT\or FIFTY NINE\or
SIXTY\or SIXTY ONE\or SIXTY TWO\or SIXTY THREE \or SIXTY FOUR\or
SIXTY FIVE\or SIXTY SIX\or SIXTY SEVEN\or SIXTY EIGHT\or SIXTY
NINE\or SEVENTY\or SEVENTY ONE\or SEVENTY TWO\or SEVENTY
THREE\or SEVENTY FOUR\or SEVENTY FIVE\or SEVENTY SIX\or SEVENTY
SEVEN\or SEVENTY EIGHT\or SEVENTY NINE\or EIGHTY\or EIGHTY
ONE\or EIGHTY TWO\or EIGHTY THREE\or EIGHTY FOUR\or EIGHTY
FIVE\or EIGHTY SIX\or EIGHTY SEVEN\or EIGHTY EIGHT\or EIGHTY
NINE\or NINETY \or NINETY ONE \or NINETY TWO \or NINETY THREE
\or NINETY FOUR \or NINETY FIVE
\else
#1
%\@ctrerr
\fi}
   
\def\ORDINALS@cx#1{%
\ifcase#1 ZEROETH\or FIRST\or SECOND\or THIRD\or FOURTH\or
FIFTH\or SIXTH\or SEVENTH\or EIGHTTH\or NINTH\or TENTH\or
ELEVENTH\or TWELFTH\or THIRTEENTH\or FOURTEENTH\or FIFTEENTH\or
SIXTEENTH\or SEVENTEEN\or EIGHTEEN\or NINETEEN \or TWENTY\or
TWENTY ONE\or TWENTY TWO\or TWENTY THREE\or TWENTY FOUR\or
TWENTY FIVE\or TWENTY SIX\or TWENTY SEVEN \or TWENTY EIGHT \or
TWENTY NINE\or THIRTY\or THIRTY ONE\or THIRTY TWO\or THIRTY
THREE\or THIRTY FOUR\or THIRTY FIVE\or THIRTY SIX\or THIRTY
SEVEN\or THIRTY EIGHT\or THIRTY NINE\or FORTY\or FORTY ONE\or
FORTY TWO \or FORTY THREE\or FORTY FOUR\or FORTY FIVE\or FORTY
SIX\or FORTY SEVEN\or FORTY EIGHT\or FORTY NINE\or FIFTY\or
FIFTY ONE\or FIFTY TWO\or FIFTY THREE\or FIFTY FOUR\or FIFTY
FIVE\or FIFTY SIX\or FIFTY SEVEN\or FIFTY EIGHT\or FIFTY NINE\or
SIXTY\or SIXTY ONE\or SIXTY TWO\or SIXTY THREE \or SIXTY FOUR\or
SIXTY FIVE \or SIXTY SIX \or SIXTY SEVEN \or SIXTY EIGHT \or SIXTY NINE
\or SEVENTY \or SEVENTY ONE \or SEVENTY TWO \or SEVENTY THREE
\or SEVENTY FOUR \or SEVENTY FIVE \or SEVENTY SIX \or SEVENTY SEVEN
\or SEVENTY EIGHT \or SEVENTY NINE \or EIGHTY
\else
#1
%\@ctrerr
\fi}

\def\ordinals@cx#1{%
  \ifcase#1 Zeroeth\or First\or Second\or Third\or Fourth\or Fifth\or Sixth
  \or Seventh\or Eighth\or Ninth\or Tenth\or
 Eleventh\or Twelfth\or Thirteenth\or Fourteenth\or Fifteenth
\or SIXTEENTH\or SEVENTEEN\or EIGHTEEN\or NINETEEN \or TWENTY\or
TWENTY ONE\or TWENTY TWO\or TWENTY THREE\or TWENTY FOUR\or
TWENTY FIVE\or TWENTY SIX\or TWENTY SEVEN \or TWENTY EIGHT \or
TWENTY NINE\or THIRTY\or THIRTY ONE\or THIRTY TWO\or THIRTY
THREE\or THIRTY FOUR\or THIRTY FIVE\or THIRTY SIX\or THIRTY
SEVEN\or THIRTY EIGHT\or THIRTY NINE\or FORTY\or FORTY ONE\or
FORTY TWO \or FORTY THREE\or FORTY FOUR\or FORTY FIVE\or FORTY
SIX\or FORTY SEVEN\or FORTY EIGHT\or FORTY NINE\or FIFTY\or
FIFTY ONE\or FIFTY TWO\or FIFTY THREE\or FIFTY FOUR\or FIFTY
FIVE\or FIFTY SIX\or FIFTY SEVEN\or FIFTY EIGHT\or FIFTY NINE\or
SIXTY\or SIXTY ONE\or SIXTY TWO\or SIXTY THREE \or SIXTY FOUR\or
SIXTY FIVE\or SIXTY SIX \or SIXTY SEVEN \or \else
#1
%\@ctrerr
\fi
}

%    \end{macrocode}
% \end{macro}
%
%
% \subsection{General Utility Environments}
%
%
%    \begin{macrocode}
\newenvironment{absolutequote}
               {\list{}{\leftmargin2cm\rightmargin\leftmargin}%
                \item\relax\footnotesize}
               {\endlist}

\newenvironment{summary}
               {\list{}{\listparindent0pt %
                        \itemindent\listparindent
                        \leftmargin0pt
                        \rightmargin\leftmargin
                        \parsep\z@ \@plus\p@}%
                \item\relax\itshape}
               {\endlist}
%
\def\solution{%
   \everypar{}
   \parindent0pt
  \leavevmode\par
  \makebox{\llap{\bfseries\textit{Solution }:}\thinspace}%
  \parindent2em
  }
%    \end{macrocode}
%
% \subsection{Setting up the key system}
%
% We are going to use a few conditionals and we start by defining 
% them here:
%
%    \begin{macrocode}
\newif\if@left
\newif\if@right
\newif\if@center
\@leftfalse
\@rightfalse
\@centerfalse
% newifs for number position
\newif\if@lefttitle
\newif\if@righttitle
\newif\if@leftname
\newif\if@rightname
\newif\if@chapterspaceout\@chapterspaceoutfalse
\newif\if@soulspaceout\@soulspaceoutfalse
\newif\if@numberspaceout\@numberspaceoutfalse
\newif\if@titlespaceout\@chapterspaceoutfalse
\newif\if@sectionspaceout\@sectionspaceoutfalse
\newif\if@openanywhere\@openanywherefalse
%    \end{macrocode}
%
% The standard LaTeX2e settings does not allow for open left chapters.
% However, quite a few designs do have this incorporated.
%    \begin{macrocode}
\newif\if@openleft\@openleftfalse
\newif\if@openany\@openanyfalse
%    \end{macrocode}
%
% Some publications allow chapters to be written by different authors
% we provide a conditional for this.
% 
%    \begin{macrocode}
\newif\if@special\@specialfalse
\newif\if@chaptertitlespecial
\@chaptertitlespecialfalse

\newif\if@authorblock
%    \end{macrocode}
%
% We are going to allow the user to use a key to add a toc, also
% wea re allowing to incorporate images in such table of contents.
% We creating two conditionals to hold this information.
%
%    \begin{macrocode}
\newif\if@toc  \@toctrue
\newif\if@tocimage \@tocimagefalse
%    \end{macrocode}
%
% \subsection{Defining Document Keys}
%
% As we aim to make the package generic to be used with any base class
% we define some conditionals and keys.
%
%    \begin{macrocode}
\newif\if@book
\newif\if@report
\newif\if@article
\cxset{document type/.is choice,
  document type/book/.code = {\@booktrue},
  document type/article/.code = {\@reporttrue},
  document type/report/.code = {\@articletrue}, 
}
%    \end{macrocode}
%
% \begin{macro}{\setfontparam@cx} 
% \begin{macro}{\setfont@cx} 
% This macro enables font setting keys to either
% be entered by an author as  a command e.g., |\Huge| or as a macro name |Huge|. It uses
% the \pkg{etoolbox} |\ifdef| macro.
%
%    \begin{macrocode}
\global\def\setfontparam@cx#1;{%
  \ifdefmacro{#1}{#1}{\csname#1\endcsname}%
}
\def\setfont@cx#1#2#3#4{%
  \expandafter\setfontparam@cx#1;%
  \expandafter\setfontparam@cx#2;%
  \expandafter\setfontparam@cx#3;%
  \expandafter\setfontparam@cx#4;%
}
\let\bold\bfseries
\let\normal\mdseries
\let\serif\rmfamily
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Defining Chapter Head Keys}
%
% Parametric definitions for chapters 
%    \begin{macrocode}
\@ifundefined{@openright}{%
  }{}
\def\afterindenton@cx{\def\afterindent@cx{\@afterindenttrue}}
\def\afterindentoff@cx{\def\afterindent@cx{\@afterindentfalse}}
\edef\zeroboxalign@cx{c}
%    \end{macrocode}
%
%    \begin{macrocode}
%
\global\newlength\chaptermarginleft
    \setlength\chaptermarginleft{30pt}%
    
\global\newlength\titlemarginbottom
\global\setlength\titlemarginbottom{0pt}
\global\newlength\titlemargintop
\global\setlength\titlemargintop{0pt}
\gdef\titlemargintop@cx{10pt}
\gdef\titlemarginbottom@cx{10pt}

\gdef\chaptermarginleft@cx{0pt}
   
%
\def\chaptertitleblockalign{}
\newcounter{chapterdisplay} \setcounter{chapterdisplay}{0}
\newcounter{numberdisplay} \setcounter{numberdisplay}{0}
%
% numbers padding
\global\newlength\numberpaddingright
\global\setlength\numberpaddingright{0pt}
\global\newlength\numberpaddingleft
     \global\setlength\numberpaddingleft{0pt}

\global\newlength\numberpaddingtop
\global\setlength\numberpaddingtop{10pt}
\global\newlength\numberpaddingbottom
\global\setlength\numberpaddingbottom{10pt}
% number border width
\global\newlength\numberborderleftwidth
   \setlength\numberborderleftwidth{0pt}
\global\newlength\numberborderrightwidth
   \setlength\numberborderrightwidth{2pt}
\global\newlength\numberbordertopwidth
   \setlength\numberbordertopwidth{2pt}
\global\newlength\numberborderbottomwidth
   \setlength\numberborderbottomwidth{2pt}
\gdef\numberbgcolor{spot!20}   
%    \end{macrocode}
% All chapter titles can be fully framed with borders. We create length
% registers for these and appropriate keys.
% (See style 87 for usage examples)
%    \begin{macrocode}
\newlength\titletextwidth
   \setlength{\titletextwidth}{\textwidth}
\newlength\titlepadding\setlength{\titlepadding}{5pt}%
\newlength\titlepaddingtop
   \setlength{\titlepaddingtop}{5pt}%
\newlength\titlepaddingbottom
    \setlength{\titlepaddingbottom}{5pt}%
\newlength\titlepaddingleft
    \setlength{\titlepaddingleft}{5pt}%    
\newlength\titlepaddingright
    \setlength{\titlepaddingright}{5pt}%     
%
\newlength\titleborderwidth\setlength{\titleborderwidth}{0pt}%
\newlength\titlebordertopwidth\setlength{\titlebordertopwidth}{0pt}
\newlength\titleborderbottomwidth\setlength{\titleborderbottomwidth}{0pt}
\newlength\titleborderleftwidth\setlength{\titleborderleftwidth}{0pt}
\newlength\titleborderrightwidth\setlength{\titleborderrightwidth}{0pt}
\def\gluestart{\hss}\def\glueend{\hss}
%
\newif\if@hascomma
\@hascommatrue
\def\hascomma#1{%
    \@hascommafalse
    \@tfor\next:=#1\do{%
    \edef\@tempa{\next}%
    \edef\tempb{,}%
    {\if\@tempa\tempb
         \global\@hascommatrue
    \fi}%
}}%


\def\checkforcomma@cx#1{%
\hascomma{#1}%
\if@hascomma%
    \expandafter\@firstoftwo%
  \else%
    \expandafter\@secondoftwo% 
\fi
}
%
%    \end{macrocode}
%
% It is not envisioned that the chapter name key be set directly by the user.
% This should be set by the document language tag (like Babel). 
% |name is legacy and will be removed.|  
% However, the user might decide that this is an easier approach.
%    \begin{macrocode}
\cxset{
  name/.store in=\chaptername,
  chapter name/.code=\pgfkeysalso{name=#1},
  chaptername/.code = \gdef\chaptername@cx{#1},
  }
  
  
\cxset{  
  %legacy to remove
  color/.store in = \color@cx,
  color/.default = black,
  color/.initial = black,
  % 
  chapter color/.store in=\chaptercolor@cx,
  chapter background-color/.store in=\chapterbgcolor,
%  
  number background-color/.store in=\numberbgcolor,
}


\cxset{    
  chapter opening/.is choice,
  chapter opening/right/.code={\@openrighttrue},
  chapter opening/left/.code={\@openlefttrue},
  chapter opening/any/.code={\@openanytrue},
  chapter opening/none/.code={\@openanywheretrue\@openrightfalse%
                                                  \@openleftfalse\@openanyfalse},
  chapter opening/anywhere/.code={\@openanywheretrue\@openrightfalse
     \@openleftfalse\@openanyfalse},
  chapter opening/ifafter/.code={},
}


% This handler first checks if the font-family has been supplied as a
% list. In this case it will call check font and pick the first available
% font.
% 
\pgfkeys{/handlers/.font-family in/.code=\pgfkeysalso{\pgfkeyscurrentpath/.code=
      \checkforcomma@cx{##1}{}{%
          \edef\tempaa{sans-serif}%
          \edef\tempbb{##1}%
          \ifx\tempaa\tempbb%
              \def#1{sffamily}% 
        \else%
           \def#1{##1}%Check for initial???
       \fi%
       \edef\tempaa{monospace}%
        \ifx\tempaa\tempbb%
          \def#1{ttfamily}%
       \fi
       \edef\tempaa{serif}
       \ifx\tempaa\tempbb%
           \def#1{rmfamily}%
       \fi%    
       \edef\tempaa{inherit}%needs work???
       \ifx\tempaa\tempbb%
           \def#1{rmfamily}
       \fi    
     }%   
}}
\pgfkeys{/handlers/.font-style in/.code=\pgfkeysalso{\pgfkeyscurrentpath/.code=
           \edef\tempa{##1}%
           \edef\tempb{normal}%
           \edef\tempc{italic}%
           \edef\tempd{oblique}%
           \def#1{##1}%
           \ifx\tempa\tempb%
              \def#1{upshape}%
           \fi%
           \ifx\tempa\tempc%
              \def#1{itshape}%
            \fi%
           \ifx\tempa\tempd%
              \def#1{slshape}%
           \fi  
   }}
\pgfkeys{/handlers/.font-weight in/.code=\pgfkeysalso{\pgfkeyscurrentpath/.code=
           \def\tempa{##1}%
           \def\tempb{normal}%
           \def\tempc{bold}%
           \def\tempd{bfseries}%
           \def#1{##1}%
           \ifx\tempa\tempb%
              \def#1{mdseries}%
           \fi%
           \ifx\tempa\tempc%
              \def#1{bfseries}%
            \fi%
           \ifx\tempa\tempd%
              \def#1{bfseries}%
           \fi   
           \def\tempb{\bfseries}%
           \ifx\tempa\tempb
              \def#1{bfseries}%       
           \fi  
           \def\tempb{\mdseries}%
           \ifx\tempa\tempb
              \def#1{mdseries}%       
           \fi  
   }} 
%    \end{macrocode}
%
%  The font-size handler is defined next.
%  This can be set both as a command or a name.
%  Code can be optimized with a list, but needs revisiting.
%    \begin{macrocode}   
   \pgfkeys{/handlers/.font-size in/.code=\pgfkeysalso{\pgfkeyscurrentpath/.code=
           \def\tempa{##1}%
           \def\tempb{normal}%
           \def#1{##1}%
           \ifx\tempa\tempb%
              \def#1{\normalsize}%
           \fi%
            \def\tempb{tiny}%
           \ifx\tempa\tempb%
              \def#1{tiny}%
            \fi%
            \ifx\tempa\tempb%
              \def#1{footnotesize}%
            \fi% 
           \def\tempb{footnotesize}%
           \ifx\tempa\tempb%
              \def#1{small}%
            \fi%
           \def\tempb{large}% 
           \ifx\tempa\tempb%
              \def#1{large}%
           \fi   
            \def\tempb{Large}% 
           \def\tempb{\bfseries}%
           \ifx\tempa\tempb%
              \def#1{Large}%       
           \fi%  
           \def\tempb{huge}%
           \ifx\tempa\tempb%
              \def#1{huge}%       
           \fi%  
           \def\tempb{Huge}%
           \ifx\tempa\tempb%
              \def#1{Huge}%       
           \fi% 
           \def\tempb{HUGE}%
           \ifx\tempa\tempb%
              \def#1{HUGE}%       
           \fi 
           \def\tempb{HHUGE}%
            \ifx\tempa\tempb%
              \def#1{HHUGE}%       
           \fi% 
           \def\tempb{HHHUGE}%
            \ifx\tempa\tempb%
              \def#1{HHHUGE}%       
           \fi%  
   }}%   
%    \end{macrocode}


% \subsubsection{Numbers}
%
%    \begin{macro}{\itf@number}
%    \cs{itf@number} tries to get a number from its argument, and stores the result
%    into the TeX count register given as first argument. Same syntax as \LaTeX \cs{@defaultunits}.
%
%    A number is an integer that can be assigned to a count register, may be followed
%    by one or more \cs{relax}.
%
%    \begin{macrocode}
%%   G E T   A   N U M B E R (if possible)
%% USAGE: \itf@number\count<text>\relax\@nnil (like \@defaultunits)
\def\itf@number#1#2\relax\@nnil{% \relax is to mimick the syntax of \@defaultunits
   \afterassignment\itf@number@#1\number0#2\relax\itf@number@
}
\def\itf@number@#1\relax#2\itf@number@{%
   \ifblank{#1}
      {\itf@number@@{}#2\itf@number@@\@nnil
      \csname ltx@\ifx\@let@token\itf@number@@
         first\else second\fi oftwo\endcsname}
      \ltx@secondoftwo
}% \itf@number@
\def\itf@number@@#1{\futurelet\@let@token\itf@number@@@}
\def\itf@number@@@{%
   \csname \ifx\@let@token\relax itf@number@@%
   \else remove@to@nnil%
   \fi \endcsname
}% \itf@number@@@
%    \end{macrocode}
%    \end{macro}
%
% \subsubsection{Units and math units}
%
%    \begin{macro}{\itf@setlength}
%
%    To be able to write: \cs{pgfkeys}\M*{key=\cs{widthof\M*{some text}}} (package \pkgname{calc}),
%    
%
%    \begin{macrocode}
\protected\def\itf@setlength#1#2{#1\glueexpr#2\relax}%
%    \end{macrocode}
%    \end{macro}
%
%    \begin{macro}{\itf@units@scale}
%
%    For multiplication of units: \cs{glueexpr}...\cs{relax}*\cs{itf@units@scale}\meta{scaling factor}!
%
%    The scaling factor can be a fraction or a real number. Real numbers are approximated by a fraction
%    of 65536.
%
%    \begin{macrocode}
%% glue * 1.5 = glue * 98302 / 65536
%% glue * 3/2 = glue * 3/2
\def\itf@units@scale#1!{\itf@units@scale@normalize#1/\@nnil/\@nil}
\def\itf@units@scale@normalize#1/#2/#3\@nil{%
   \ifx#2\@nnil \number\dimexpr#1pt\relax/65536
   \else#1/#2
   \fi
}% \itf@units@scale@normalize
\def\itf@units@scaleNoCalc#1!{\itf@units@scale@normalizeNoCalc#1/\@nnil/\@nil}
\let\itf@units@scale@normalizeNoCalc \itf@units@scale@normalize
%    \end{macrocode}
%    \end{macro}
%
%    \begin{macro}{\itf@setlength@calc}
%
%^^A    The version for the \xpackage{calc} package. \xpackage{calc} removes stretch
%    and shrink components of glues when a scaling operation is done using \cs{real}
%    or \cs{ratio}. This limitation is lifted for \texttt{key=value} assignments.
%
%    \begin{macro}{\itf@units@scale@normalize@calc}
%
%    The version of \cs{itf@units@scale@normalize} when using the \pkgname{calc} package.
%
%    \cs{ratio} is used.
%
%    \begin{macrocode}
\protected\def\itf@setlength@calc#1#2{\begingroup
   \let\calc@multiply@by@real \itf@calc@multiply@by@real
   \let\calc@Adimen \itf@calc@Askip  \let\calc@Bdimen \itf@calc@Bskip
   \setlength{#1}{#2}%
   \expandafter\endgroup\expandafter#1\the#1\relax
}% \itf@setlength@calc
\def\itf@units@scale@normalize@calc#1/#2/#3\@nil{%
   \ifx#2\@nnil 1*\ratio{\dimexpr#1pt\relax}\p@
   \else        1*\ratio{\dimexpr#1pt\relax}/{\dimexpr#2pt\relax}%
   \fi
}% 
%    \end{macrocode}
%    \end{macro}
%    \end{macro}
%
%
%   The code below is an adaptation from the \pkgname{interfaces}
%   Some of it I donâ€™t understand very well and I need to revisit it.
%
%       
%    \begin{macro}{\pgfkeysmeaning}
%    \begin{macrocode}
\providecommand*\pgfkeysmeaning[1]{\pgfkeysifdefined{#1}
   {\expandafter\meaning\csname pgfk@#1\endcsname}
   {\meaning\@undefined}%
}% \pgfkeysmeaning
%    \end{macrocode}
%    \end{macro}
%
%    \begin{macro}{\pgfkeysvalueof@unexpanded}
%    \begin{macrocode}
\def\pgfkeysvalueof@unexpanded#1{%
   \unexpanded\expandafter\expandafter\expandafter{%
                        \csname pgfk@#1\endcsname}%
}% \pgfkeysvalueof@unexpanded
%    \end{macrocode}
%    \end{macro}
%
%
%    \begin{macro}{\pgfkeysEsetvalue}
%    \begin{macro}{\pgfkeysEaddvalue}
%    \begin{macrocode}
\ifdefined\pgfkeys@ifexecutehandler \long \fi% pgf version 2.1
\def\pgfkeysEsetvalue#1#2{%
   \expandafter\edef\csname pgfk@#1\endcsname{#2}%
}% \pgfkeysEsetvalue
\ifdefined\pgfkeys@ifexecutehandler \long \fi % pgf v2.1
\def\pgfkeysEaddvalue#1#2#3{% \csepreappto{pgfk@#1}{#2}{#3}
   \edef\pgfkeys@global@temp{%
      #2%
      \ifcsname pgfk@#1\endcsname
         \unexpanded\expandafter\expandafter\expandafter{%
            \csname pgfk@#1\endcsname}%
      \fi
      #3}%
   \pgfkeyslet{#1}\pgfkeys@global@temp
}% \pgfkeysEaddvalue
%    \end{macrocode}
%    \end{macro}
%    \end{macro}
%    
%
%  We define a key to store dimensions. We test for a number and for an
%  empty value. If the value is empty we leave as is. We use the Roman
%  numeral trick to test if it is a number. What a lovely way to remember
%  your history! THIS IS WRONG
%
%    \begin{macrocode}
\pgfkeysdef{/handlers/.store as glue}{\pgfkeysdef{\pgfkeyscurrentpath}{%
\def\temp{##1}%
\ifx\temp\@empty%
  \gdef#1{1pt}%
\else
   \gdef#1{1pt}%
   \if\relax\detokenize\expandafter{\romannumeral-0##1}\relax
        \gdef#1{\dimexpr(##1)\relax}%
  \fi           
\fi  
}}%
% /.store as glue
%
%    \end{macrocode}
% 
% \subsection{Chapter font options}
%  The font options use handlers to get the values. This alows for more flexibiliy.
%    \begin{macrocode}
\cxset{%    
  chapter font-family/.font-family in=\chapterfontfamily@cx,
  chapter font-weight/.font-weight in = \chapterfontweight@cx,
  chapter font-size/.font-size in=\chapterfontsize@cx,
  chapter font-shape/.font-style in=\chapterfontshape@cx,
  chapter font-style/.font-style in=\chapterfontshape@cx,}
%    \end{macrocode}
%
% \subsection{Chapter display and float properties}
%
% This generates keys for float and display. The attribute display determines if the
% element is on a line of its own or not. The float determines glue to be
% set to float the element left or right.
%
%    \begin{macrocode}
\newcounter{lastelementfloat}
     \setcounter{lastelementfloat}{-1}
\newcounter{chapterfloat} 
      \setcounter{chapterfloat}{1}  
\newcounter{numberfloat} 
      \setcounter{numberfloat}{1}        
\newcounter{currentelementfloat}
      \setcounter{currentelementfloat}{-1}
%
\global\newlength\chapterborderrightwidth
    \setlength\chapterborderrightwidth{2pt} 
\global\newlength\chapterborderleftwidth
    \setlength\chapterborderleftwidth{2pt}     
\global\newlength\chapterborderbottomwidth
    \setlength\chapterborderbottomwidth{2pt}  
\global\newlength\chapterbordertopwidth
    \setlength\chapterbordertopwidth{2pt}             
%
\global\newlength\chapterpaddingleft
    \setlength\chapterpaddingleft{10pt}
\global\newlength\chapterpaddingright
    \setlength\chapterpaddingright{10pt}  
\global\newlength\chapterpaddingtop
    \setlength\chapterpaddingtop{10pt}        
\global\newlength\chapterpaddingbottom
    \setlength\chapterpaddingbottom{10pt}       
\ExplSyntaxOn
\int_zero_new:c {chapterdisplaycounter}
\int_zero_new:c {chapterfloatcounter}
\cs_gset:Npn \phdsetcounter #1 #2 
 {
   \int_gset:cn {#1} {#2}
 }  
\ExplSyntaxOff
%
\cxset{%  
  chapter display/.is choice,
  chapter display/inline/.code=\global\setcounter{chapterdisplay}{0}
                               \phdsetcounter{chapterdisplaycounter}{0},
  chapter display/block/.code=\global\setcounter{chapterdisplay}{2}
                               \phdsetcounter{chapterdisplaycounter}{2}, 
%    
  chapter float/.is choice,
  chapter float/none/.code= \global\setcounter{chapterfloat}{0}%
                            \phdsetcounter{chapterfloatcounter}{0},
  chapter float/left/.code= \global\setcounter{chapterfloat}{0}
                            \phdsetcounter{chapterfloatcounter}{0},
% center = 1                             
  chapter float/center/.code= \global\setcounter{chapterfloat}{1}%
                             \phdsetcounter{chapterfloatcounter}{1}, 
% right = 2                             
  chapter float/right/.code= \global\setcounter{chapterfloat}{2}%
                             \phdsetcounter{chapterfloatcounter}{2},%   
 }
\cxset{chapter display=block,
       chapter float=left,
       } 
%    \end{macrocode}
%
%
% \subsection{Chapter content before and after}
%
%    \begin{macrocode}   
\cxset{chapter before content/.store in=\chapterbeforecontent@cx,
       chapter before/.store in=\chapterbefore@cx,
 }
%    \end{macrocode}
% 
%  
%
% \subsection{Chapter margins and padding}
%
% The dual code is interim we will avoid all these in the future
%    \begin{macrocode}
\ExplSyntaxOn
%
\dim_new:c {chapter_margin_top}
\dim_new:c {chapter_margin_right}
\dim_new:c {chapter_margin_bottom}
\dim_new:c {chapter_margin_left}
\dim_new:c {chapter_margin}
%
\dim_new:c {chapter_border_top_width}
\dim_new:c {chapter_border_right_width}
\dim_new:c {chapter_border_bottom_width}
\dim_new:c {chapter_border_left_width}
\dim_new:c {chapter_border}
%
\dim_new:c {chapter_padding_top}
\dim_new:c {chapter_padding_right}
\dim_new:c {chapter_padding_bottom}
\dim_new:c {chapter_padding_left}
\dim_new:c {chapter_padding}
%
\cxset{   
  chapter~margin-top/.code=\gdef\chaptermargintop@cx{\topskip0pt\vskip#1\relax}
    \dim_gset:cn { chapter_margin_top } { #1 },
  % left margin 
  chapter~margin-left/.code=\setlength\chaptermarginleft{#1}%
                            \global\chaptermarginleft\chaptermarginleft\relax
                            \def\gluestart{\hskip#1}%
                            \def\glueend{\hss}
                            \dim_gset:cn {chapter_margin_left}{#1},
  chapter~margin-right/.code = \dim_gset:cn {chapter_margin_right} { #1 },
  chapter~margin-bottom/.code = \dim_gset:cn {chapter_margin_bottom} { #1 },                           
  }

\ExplSyntaxOff 
%    \end{macrocode}
%
% \subsection{Chapter borders}
%
% Next we set keys for all border width
% \subsubsection{Chapter border widths}
%    \begin{macrocode}      
\ExplSyntaxOn
\cxset{  
   chapter~border-top-width/.code= \setlength\chapterbordertopwidth{#1}%
     \global\chapterbordertopwidth\chapterbordertopwidth\relax
     \dim_gset:cn {chapter_border_top_width} {#1},                                            
   chapter~border-right-width/.code= \setlength\chapterborderrightwidth{#1}%
     \global\chapterborderrightwidth\chapterborderrightwidth\relax
     \dim_gset:cn {chapter_border_right_width} {#1},                                                                                      
   chapter~border-bottom-width/.code= \setlength\chapterborderbottomwidth{#1}%
     \global\chapterborderbottomwidth\chapterborderbottomwidth\relax
     \dim_gset:cn {chapter_border_bottom_width} {#1},                                                                                                                              
   chapter~border-left-width/.code= \setlength\chapterborderleftwidth{#1}%
     \global\chapterborderleftwidth\chapterborderleftwidth\relax
     \dim_gset:cn {chapter_border_left_width} {#1},
}                        
\ExplSyntaxOff                                            
%    \end{macrocode}
  %  
  %   Next we write keys for developing the short form of the border keys. These keys reset
  %  all borders to one value
  %    \begin{macrocode}
\ExplSyntaxOn  
\cxset{  
  chapter~border-width/.code = \pgfkeysalso{chapter~border-top-width=#1,
                                            chapter~border-right-width=#1,
                                            chapter~border-bottom-width=#1,
                                            chapter~border-left-width=#1,
                                            },
}            
\ExplSyntaxOff                                     
%    \end{macrocode}  
% 
% We now deal with padding the same way including the generic version                                             
%    \begin{macrocode}  
\ExplSyntaxOn                                             
\cxset{
  chapter~padding-left/.code= \setlength\chapterpaddingleft{#1}%
    \global\chapterpaddingleft\chapterpaddingleft\relax
    \dim_gset:cn {chapter_padding_left}{#1},                                                                                                                           
%    
  chapter~padding-right/.code= \setlength\chapterpaddingright{#1}%
    \global\chapterpaddingright\chapterpaddingright\relax
    \dim_gset:cn {chapter_padding_right}{#1},                                                                                                             
%    
  chapter~padding-top/.code= \setlength\chapterpaddingtop{#1}%
    \global\chapterpaddingtop\chapterpaddingtop\relax
    \dim_gset:cn {chapter_padding_top}{#1},                                                                                                                                                       
% 
  chapter~padding-bottom/.code= \setlength\chapterpaddingbottom{#1}%
    \global\chapterpaddingbottom\chapterpaddingbottom\relax
    \dim_gset:cn {chapter_padding_bottom}{#1},                                                                                                                                                                                                 
}
\ExplSyntaxOff
%    \end{macrocode}    
%
% The default if no value is entered is 0pt. Also
% 
%    \begin{macrocode}
\cxset{
  chapter padding/.code={\def\@tempa{none}%
    \def\@tempb{#1}%
    \ifx\@tempa\@tempb%
      \global\setlength\chapterpaddingleft{0pt}%
      \global\setlength\chapterpaddingright{0pt}%
      \global\setlength\chapterpaddingtop{0pt}%
      \global\setlength\chapterpaddingbottom{0pt}%
    \else
      \setlength\chapterpaddingleft{#1}%
      \global\chapterpaddingleft\chapterpaddingleft\relax                                                                                                                           
      \setlength\chapterpaddingright{#1}%
      \setlength\chapterpaddingtop{#1}%
      \setlength\chapterpaddingbottom{#1}%
    \fi}
}    
%    \end{macrocode}  
%
% \subsubsection{Chapter letter spacing} 
% NEEDS REVISITING TO ALLOW FOR  SOUL OR MICROTYPE  LEAVE ALSO LETTER SPACING 
% ALSO TO TAKE OUT SPACEOUT
%    \begin{macrocode}   
\ExplSyntaxOn


\ExplSyntaxOff                                   
\cxset{
  chapter after/.store in=\chapterafter@cx,
  chapter spaceout/.is choice,
  chapter spaceout/soul/.code=\@chapterspaceouttrue\@soulspaceouttrue,
  chapter spaceout/microtype/.code=\@chapterspaceouttrue\@soulspaceouttrue,
  chapter spaceout/none/.code=\@chapterspaceoutfalse\@soulspaceoutfalse,
  %  
%  chapter letter-spacing/.is choice,
%  chapter letter-spacing/soul/.style=\pgfkeysalso{chapter spaceout=soul},
%  chapter letter-spacing/microtype/.style=\pgfkeysalso{chapter spaceout=microtype},
%  chapter letter-spacing/true/.code=\@chapterspaceouttrue,
%  chapter letter-spacing/none/.code=\@chapterspaceoutfalse,
%  chapter letter-spacing/false/.code=\@chapterspaceoutfalse,
 }  
%    \end{macrocode}  
%
%  Next we define styles. This must be distinguished from shapes and only
%  apply to rectangular boxed content, using \cmd{\phd@fbox}
%
%    \begin{macrocode}
\cxset{
  chapter border-top-style/.store in=\chapterbordertopstyle, 
  chapter border-right-style/.store in=\chapterborderrightstyle, 
  chapter border-bottom-style/.store in=\chapterborderbottomstyle,
  chapter border-left-style/.store in=\chapterborderleftstyle, 
  chapter border-style/.code=\pgfkeysalso{chapter border-top-style=#1,%
    chapter border-right-style=#1,%
    chapter border-bottom-style=#1,%
    chapter border-left-style=#1%,
  },
}
\cxset{
  chapter border-top-style=none,
  chapter border-right-style=none,
  chapter border-bottom-style=none,
  chapter border-left-style=none,}  
%    \end{macrocode}

%
%  \begin{macro}{\chaptershape}
%    \begin{macrocode}
\gdef\chaptershape{rounded rectangle}
\cxset{
chapter shape/.is choice,
  chapter shape/rectangle/.code=\gdef\chaptershape{rectangle},
  chapter shape/ellipse/.code=\gdef\chaptershape{ellipse},
  chapter shape/circle/.code=\gdef\chaptershape{circle},
  chapter shape/rounded rectangle/.code=\gdef\chaptershape{rounded rectangle},
  chapter shape/diamond/.code=\gdef\chaptershape{diamond},
  chapter shape/starburst/.code=\gdef\chaptershape{starburst},
  chapter shape/none/.code=\gdef\chaptershape{},
  chapter shape/star/.code=\gdef\chaptershape{star},
}
%    \end{macrocode}
%  \end{macro}
%
% \subsection{Chapter title parameters}
%   We define a key to set the chapter title text width. The calculated value of this box will
%   be less than that specified by the user, if padding and borders are defined. This is to avoid
%   overful boxes, when the user specifies full width such as textwidth.
%
%    \begin{macrocode}  
\ExplSyntaxOn
\dim_new:c {chapter_title_text_width}
\dim_new:c {chapter_title_width}
\cxset{ 
  chapter~title~width/.code= \gdef\chaptertitlewidth@cx{#1}
    \dim_gset:cn {chapter_title_width}{#1},
  title~text-width/.code=\gdef\chaptertitletextwidth@cx {#1}                                          
    \dim_gset:cn {chapter_title_text_width} {#1},
}    
\ExplSyntaxOff                                            
%    \end{macrocode}
%
%  Next we deal with the title alignment. The title is typeset in a minipage
%  We allow for the total to be positioned. The key text-align specifies the alignment
%  of the inner text block. 
%
%  TeX does not distinguish the type of boxes found in CSS. As a matter of fact TeXâ€™s model
%  is much more complicated and also allows the different types to be nested indefinetly.
%  Rendering depends on the typesetting mode. 
%  The display block, should just add |\vskip|s and terminate horizontal mode. This might
%  avoid to have to type some keys.
%
% \begin{docKey}{title display}{ = \oarg{none,block,inline,inline-block}}{default block}
% The title display key determines how the title is aligned with its neighbours.
% It defaults to block, which it means is typeset on its own line.
% \end{docKey}
%    \begin{macrocode}
\ExplSyntaxOn
\int_gzero_new:c {chapter_title_display}
\tl_new:c {chapter_title_text_align}

%

\cxset{
  title~display/.is~choice,
  title~display/none/.code = \gdef\titledisplay@cx{0}
    \int_gset:cn {chapter_title_display}{0},
  title~display/block/.code = \gdef\titledisplay@cx{1}
    \int_gset:cn {chapter_title_display}{1},
  title~display/in-line block/.code=\gdef\titledisplay@cx{2}
    \int_gset:cn {chapter_title_display}{2},
  title~display/inline/.code=\gdef\titledisplay@cx{3}
    \int_gset:cn {chapter_title_display}{3},
  chapter~title~display/.style = \pgfkeysalso{title~display=#1}  
}
\cxset{title~display=block}  
\ExplSyntaxOff
%    \end{macrocode}
%
%    \begin{macrocode}  
\ExplSyntaxOn

\cxset{
  chapter~title~text-align/.is~choice,
  chapter~title~text-align/center/.code=\gdef\chaptertitletextalign@cx{\Centering}
    \tl_gset:cn {chapter_title_text_align}{\Centering},                                                                                                 
%    
  chapter~title~text-align/centering/.code=\gdef\chaptertitletextalign@cx{\centering}
    \tl_gset:cn {chapter_title_text_align}{\centering},                                                                                                 
%    
  chapter~title~text-align/none/.code=\gdef\chaptertitletextalign@cx{}
     \tl_gset:cn {chapter_title_text_align}{},                                                                                                 
%     
  chapter~title~text-align/justified/.code=\gdef\chaptertitletextalign@cx{}
    \tl_gset:cn {chapter_title_text_align}{},
%  
  chapter~title~text-align/left/.code=\gdef\chaptertitletextalign@cx{\RaggedRight}
    \tl_gset:cn {chapter_title_text_align}{\RaggedRight},
%    
  chapter~title~text-align/raggedleft/.code=\gdef\chaptertitletextalign@cx{\RaggedLeft}
   \tl_gset:cn {chapter_title_text_align}{\RaggedLeft},
%   
  chapter~title~text-align/right/.code=\gdef\chaptertitletextalign@cx{\RaggedLeft}
   \tl_gset:cn {chapter_title_text_align}{\RaggedLeft},
%   
  chapter~title~text-align/raggedright/.code=\gdef\chaptertitletextalign@cx{\RaggedRight}
   \tl_gset:cn {chapter_title_text_align}{\RaggedRight},
}
\ExplSyntaxOff
%
\cxset{chapter title text-align=left}
\ExplSyntaxOn
\tl_new:c {chapter_title_align}
\cxset{    
  % aligning the block title 
  chapter~title~align/.is~choice,
  chapter~title~align/centering/.code=\def\gluestart{\hss}\def\glueend{\hss}
   \tl_gset:cn {chapter_title_align}{centering},
  % alias
  chapter~title~align/center/.code=\def\gluestart{\hss}\def\glueend{\hss}, 
%   
  chapter~title~align/raggedright/.code=\def\gluestart{\hss}\def\glueend{},
%  
  chapter~title~align/raggedleft/.code=\def\gluestart{}\def\glueend{\hss}
    \tl_gset:cn {chapter_title_align}{raggedleft},
%                                                          
  chapter~title~align/right/.code=\def\gluestart{\hss}\def\glueend{}                                                      
    \tl_gset:cn {chapter_title_align}{right},  
%  
  chapter~title~align/left/.code=\def\gluestart{}\def\glueend{\hss}
    \tl_gset:cn {chapter_title_align}{left},
%                                                 
  chapter~title~align/none/.code=\def\gluestart{}\def\glueend{}
     \tl_gset:cn {chapter_title_align}{none},
}

%  
\ExplSyntaxOff
\cxset{chapter title align=centering}
%
%

\cxset{
  title font-family/.store in=\titlefontfamily@cx,
  title font-weight/.font-weight in=\titlefontweight@cx,
  title font-size/.store in=\titlefontsize@cx,
  title font-color/.store in=\titlefontcolor@cx,
  title font-shape/.store in=\titlefontshape@cx}

\cxset{title font-shape=upshape}
%    \end{macrocode}
%
%  Letter-spacing is handled in a similar fashion defining keys both for 
%  the common \latex community terminology (spaceout) and also
% using |letter-spacing|.
%

%    \begin{macrocode}
\cxset{  
  title spaceout/.is choice,
  title spaceout/soul/.code=\@titlespaceouttrue,
  title spaceout/none/.code=\@titlespaceoutfalse,
  title spaceout/true/.code=\@titlespaceouttrue,
  title spaceout/false/.code=\@titlespaceoutfalse,
  title letter-spacing/true/.code=\@titlespaceouttrue,
  title letter-spacing/false/.code=\@titlespaceoutfalse,  
}
%    \end{macrocode}
%
%    \begin{macrocode}
\cxset{  
  title font/.style={title font-family=#1},
  title before/.store in=\titlebefore@cx,
  title after/.store in=\titleafter@cx,
  title beforeskip/.store in=\titlebeforeskip@cx,
  }
%    \end{macrocode}
%
%   The margin top property should primarily be used for non-inline headings. If the value is
%   zero we ensure we stay in horizontal mode. We also ensure that only specified skips
%   are inserted so as to be able to specify exact amounts for grids.
%
%   \begin{macrocode}
\pgfkeys{/handlers/.dimstore in/.code=\pgfkeysalso{\pgfkeyscurrentpath/.code=\def#1{\the\dimexpr##1\relax}}}%
%
\newlength\titlemarginleft \setlength\titlemarginleft{0pt}

\cxset{
  title margin top/.code=%
      \gdef\titlemargintop@cx{%
           \global\setlength\titlemargintop{#1}%
           \ifdim#1=0pt\relax%
            \else%
                \par\ifvmode\nointerlineskip%
                    \addvspace{\glueexpr#1-\parskip}% 
                \fi%    
           \fi%
        },
  title margin-top/.style={title margin top=#1},       
      %        
  title margin bottom/.code=%
    \gdef\titlemarginbottom@cx{%
    \global\setlength\titlemarginbottom{\the\dimexpr#1\relax}%
    \par\nointerlineskip
    \vspace*{#1}% 
    }%
    \titlemarginbottom@cx,
  title margin-bottom/.style =\pgfkeysalso{title margin bottom=#1},      
  title margin-left/.code=\global\setlength{\titlemarginleft}{#1}
                                      \gdef\titlemarginleft@cx{\hspace*{#1}},%,
  title margin right/.code=\def\titlemarginright@cx{\rightskip#1},
  title afterskip/.store in=\titleafterskip@cx,
  position/.is choice,
  position/left/.code={\@lefttrue},
  position/right/.code={\@righttrue},
  position/center/.code={\@centertrue},
  % title padding
  title padding-top/.code=\global\setlength{\titlepaddingtop}{#1},
  title padding-bottom/.code=\global\setlength{\titlepaddingbottom}{#1},
  title padding-left/.code=\global\setlength{\titlepaddingleft}{#1},
  title padding-right/.code=\global\setlength{\titlepaddingright}{#1},
  title padding/.code=\global\setlength{\titlepaddingtop}{#1}%
                                  \global\setlength{\titlepaddingbottom}{#1}%
                                  \global\setlength{\titlepaddingright}{#1}%
                                  \global\setlength{\titlepaddingleft}{#1},
  % borders left
  title border-top-color/.store in=\titlebordertopcolor@cx,
  title border-top-width/.code=\global\setlength\titlebordertopwidth{#1},
  % borders left
  title border-left-color/.store in=\titleborderleftcolor@cx,
  title border-left-width/.code=\global\setlength\titleborderleftwidth{#1},
  % borders right
  title border-right-color/.store in=\titleborderrightcolor@cx,
  title border-right-width/.code=\global\setlength\titleborderrightwidth{#1},
  % borders bottom
  title border-bottom-color/.store in=\titleborderbottomcolor@cx,
  title border-bottom-width/.code=\global\setlength\titleborderbottomwidth{#1},
  % we set the full short-hand keys
  title border-color/.code=\def\titlebordercolor@cx{#1}%
                                       \def\titleborderleftcolor@cx{#1}%
                                       \def\titleborderrightcolor@cx{#1}%
                                       \def\titlebordertopcolor@cx{#1}%
                                       \def\titleborderbottomcolor@cx{#1},
  title border-width/.code=\global\setlength\titleborderwidth{#1}%
                                         \global\setlength\titlebordertopwidth{#1}%
                                         \global\setlength\titleborderrightwidth{#1}%
                                         \global\setlength\titleborderbottomwidth{#1}%
                                         \global\setlength\titleborderleftwidth{#1},
%    \end{macrocode}
%
% The numbering keys deal with the typesetting of the chapter number
% in the chapter head. We use two packages for expressing numbers into
% words. The padzeroes is to produce EWD style notes. 
%
%    \begin{macrocode}
  chapter numbering/.is choice,
  chapter numbering/none/.code={\gdef\thechapter{}},
  chapter numbering/roman/.code={\gdef\thechapter{\@roman\c@chapter}},
  chapter numbering/Roman/.code={\gdef\thechapter{\@Roman\c@chapter}},
  chapter numbering/arabic/.code={\gdef\thechapter{\@arabic\c@chapter}},
  chapter numbering/alpha/.code={\gdef\thechapter{\alphalph\c@chapter}\relax},
  chapter numbering/Alpha/.code={\gdef\thechapter{\AlphAlph\c@chapter}},
  chapter  numbering/words/.code={\gdef\thechapter{\expandafter\words@cx{\expandafter\@arabic\c@chapter}}},
  chapter numbering/WORDS/.code= {\gdef\thechapter{\expandafter\WORDS@cx{\expandafter\@arabic\c@chapter}}},
  chapter numbering/ORDINALS/.code=\gdef\thechapter{%
  \expandafter\ordinals@cx{\@arabic\c@chapter}},%{\gdef\thechapter{\NUMBERstring{chapter}}},
  chapter numbering/Words/.code={\gdef\thechapter{\expandafter\Words@cx{\expandafter\@arabic\c@chapter}}},
chapter numbering/padzeroes/.code={\gdef\thechapter{\mbox{EWD -\padzeroes[4]\decimal{chapter}}}},%
  numbering/.is choice,
  numbering/roman/.code={\gdef\thechapter{\@roman\c@chapter}},
  numbering/Roman/.code={\gdef\thechapter{\@Roman\c@chapter}},
  numbering/arabic/.code={\gdef\thechapter{\@arabic\c@chapter}},
  numbering/alpha/.code={\gdef\thechapter{\alphalph\c@chapter}},
  numbering/Alpha/.code={\gdef\thechapter{\AlphAlph\c@chapter}},
  %numbering/words/.code={\gdef\thechapter{\MakeTextLowercase{\expandafter\words@cx{\expandafter\@arabic\c@chapter}}}},
  numbering/WORDS/.code={\gdef\thechapter{\expandafter\WORDS@cx{\expandafter\@arabic\c@chapter}}},
%% These proved a bit trouble some and ended up calling the fmtcount package routines
  %numbering/WORDS/.code={\gdef\thechapter{\NUMBERstring{chapter}}},
  numbering/Words/.code={\gdef\thechapter{\expandafter\Words@cx{\expandafter\@arabic\c@chapter}}},
  numbering/padzeroes/.code={\gdef\thechapter{\mbox{EWD -\padzeroes[4]\decimal{chapter}}
  }},
  numbering/none/.code={\gdef\thechapter{}}, % do not leave empty
  chapter numbering custom/.code=\gdef\thechapter{#1},
   number spaceout/.is choice,
  number spaceout/soul/.code=\@numberspaceouttrue,
  number spaceout/none/.code=\@numberspaceoutfalse,
  number spaceout/inherit/.code=\let\@numberspaceout\@chapterspaceout,
  number spaceout/microtype/.code=\@numberspaceouttrue,
  number letter-spacing/.code=\pgfkeysalso{number spaceout=soul},
  number dot/.store in=\numberpunctuation@cx,
  number position/.is choice,
  number position/leftname/.code={\@leftnametrue\@rightnamefalse},
  number position/rightname/.code={\@rightnametrue\@leftnamefalse},
  number position/absolute/.code={},
  number position/righttitle/.code=\@righttitletrue,
  number position/lefttitle/.code=\@lefttitletrue,
  number after/.store in=\numberafter@cx,
  number after content/.store in=\numberaftercontent@cx,
  number before/.store in=\numberbefore@cx,
  number background-color/.code=\gdef\numberbgcolor{#1},
  number color/.store in=\numbercolor@cx,
  number font-size/.store in=\numberfontsize@cx,
  number font-family/.font-family in=\numberfontfamily@cx,
  %% new style handlers
  number font-weight/.font-weight in=\numberfontweight@cx,
  number font-shape/.font-style in =\numberfontshape@cx,
  number font-style/.font-style in=\numberfontshape@cx,
  number font-name/.store in=\numberfontname@cx,%new
  %% 
  number margin top/.store in=\numbermargintop@cx,
  number margin left/.store in=\numbermarginleft@cx,
  number margin right/.store in=\numbermarginright@cx,
  % number borders
  number border top/.store in=\numberborderleft@cx,
  number border bottom/.store in=\numberborderbottom@cx,
  number border-top-width/.code=\global\setlength\numberbordertopwidth{#1},
  number border-bottom-width/.code=\global\setlength\numberborderbottomwidth{#1},
  number border-left-width/.code=\global\setlength\numberborderleftwidth{#1},
  number border-right-width/.code=\global\setlength\numberborderrightwidth{#1},
  number border-width/.code=\pgfkeysalso{number border-top-width=#1,
                                                         number border-right-width=#1,
                                                         number border-bottom-width=#1,
                                                         number border-left-width=#1},
  number display/.is choice,
  number display/inline/.code=\global\setcounter{numberdisplay}{0},
  number display/block/.code=\global\setcounter{numberdisplay}{2},   
  number float/.is choice,
  number float/left/.code=\global\setcounter{numberfloat}{0},
  number float/none/.code=\global\setcounter{numberfloat}{0},                                                    
  number float/center/.code=\global\setcounter{numberfloat}{1},
  number float/right/.code=\global\setcounter{numberfloat}{2},     
}
%    \end{macrocode}
%  \subsection{Shapes}
% I wasnâ€™t too sure how to incorporate this in a nice way, so I defined a new property key,
% shape
% A shape can also have a style, if you want to really get fancy.
%  \begin{macro}{\numbershape}
%    \begin{macrocode}
\gdef\numbershape{rounded rectangle}
\cxset{
  number shape/.is choice,
  number shape/rectangle/.code=\gdef\numbershape{rectangle},
  number shape/ellipse/.code=\gdef\numbershape{ellipse},
  number shape/circle/.code=\gdef\numbershape{circle},
  number shape/rounded rectangle/.code=\gdef\numbershape{rounded rectangle},
  number shape/diamond/.code=\gdef\numbershape{diamond},
  number shape/starburst/.code=\gdef\numbershape{starburst},
  number shape/none/.code=\gdef\numbershape{},
  number shape/star/.code=\gdef\numbershape{star},
}
%    \end{macrocode}
%  \end{macro}
%
% We define border styles first individually per side and then globally with
% a short-hand key.
% CSS has a dotted solid dashed double
% 
%    \begin{macrocode}
\newcounter{numberborderstyle} \global\setcounter{numberborderstyle}{0}
\cxset{                                                         
  number border-style/.is choice,
  number border-style/solid/.code=\def\numberborderstyle@cx{1},
  number border-style/double/.code=\def\numberborderstyle@cx{2},
  number border-style/dashed/.code=\def\numberborderstyle@cx{3},                                                         
  number border-style/none/.code=\def\numberborderstyle@cx{-1},%
}  
% number padding
\cxset{  
  number padding-top/.code=\global\setlength\numberpaddingtop{#1},
  number padding-right/.code=\global\setlength\numberpaddingright{#1},
  number padding-bottom/.code=\global\setlength\numberpaddingbottom{#1},
  number padding-left/.code=\global\setlength\numberpaddingleft{#1},
  number padding/.code=\pgfkeysalso{number padding-top=#1,
                                                           number padding-right=#1,
                                                           number padding-bottom=#1,
                                                           number padding-left=#1},%
}   
%    \end{macrocode}                                                        
%
% \subsection{Author blocks}
% 
% Author blocks are only set if the boolean |\@authorblock| is set to true.
%
%    \begin{macrocode}
\cxset{
  author block/.is choice,
  author block/true/.code={\@authorblocktrue},
  author block/false/.code={\@authorblockfalse},
  author names/.store in=\authorblock@cx,  
  author block format/.store in=\authorblockformat@cx,
  author block afterskip/.store in=\authorblockafterskip@cx,
  chapter toc/.is choice,
  chapter toc/true/.code=\@toctrue,
  chapter toc/false/.code=\@tocfalse,
  chapter toc/none/.code=\@tocfalse,
}
%    \end{macrocode}
    
%    \begin{macrocode}    
\def\debugtitle{%                                         
\cxset{title border-top-color=sweet,
          title border-top-width=10pt,
          title border-left-color=sweet,
          title border-left-width=10pt,
          title border-right-color=sweet,
          title border-right-width=20pt,
          title border-bottom-color=sweet,
          title border-bottom-width=20pt,
          title border-width=0.2pt,
          title border-color=red,
          title padding-top=50pt,
          title padding-bottom=50pt,
          title padding-left=0pt,
          title padding-right=0pt,
          title padding=0pt,
          }}                
\cxset{chapter margin-top=0pt,
          chapter margin-left=20pt,
          chapter title align=left,
          chapter background-color=white,
          chapter border-left-width=0pt,
          chapter border-right-width=0pt,
          chapter border-bottom-width=0pt,
          chapter border-top-width=0pt,
          chapter font-shape=upshape,
}
\cxset{number background-color=white,
          number padding-left=0pt,
          number padding-right=0pt,
          number padding-top=0pt,
          number padding-bottom=0pt,
          number border-top-width=0pt,
          number border-bottom-width=0pt,
          number border-left-width=0pt,
          number border-right-width=0pt,
          number border-style=solid,
          number font-shape=upshape}
\cxset{author block=false,
          author block afterskip=,
          title margin top=0pt,
          title margin bottom=0pt,
          title margin-left=0pt,
          title margin right=0pt,
          title border-top-color=sweet,
          title border-top-width=10pt,
          title border-left-color=sweet,
          title border-left-width=10pt,
          title border-right-color=sweet,
          title border-right-width=20pt,
          title border-bottom-color=sweet,
          title border-bottom-width=20pt,
          title border-width=0pt,
          title border-color=red,
          title padding-top=50pt,
          title padding-bottom=50pt,
          title padding-left=50pt,
          title padding-right=50pt,
          title padding=0pt,
          chapter title text-align=center,
          title display=block,
          }
\cxset{author names=}
\cxset{author block format=}
\cxset{chapter title width=0.7\textwidth}
\cxset{chapter title align=centering}
%    \end{macrocode}
%
% \begin{macro}{\debugchapter}
%    \begin{macrocode}
\def\debugchapter{%
\cxset{chapter margin-top=0pt,
          chapter margin-left=0pt,
          chapter background-color=white,
%          
          chapter border-left-width=0.2pt,
          chapter border-right-width=0.2pt,
          chapter border-bottom-width=0.2pt,
          chapter border-top-width=0.2pt,
%          
          chapter padding-top=1pt,
          chapter padding-bottom=0pt,
          chapter padding-left=0pt,
          chapter padding-right=0pt,
%         
          number border-left-width=0.2pt,
          number border-right-width=0.2pt,
          number border-bottom-width=0.2pt,
          number border-top-width=0.2pt,
%          
          number padding-top=1pt,
          number padding-bottom=0pt,
          number padding-left=0pt,
          number padding-right=0pt,
}}
\debugchapter
%    \end{macrocode}
% \end{macro}
%
% \section{Stacked Heads}
%
% We now define keys for stacked heads, in a similar fashion to the chapter section. All keys
% are prefixed with `section' and font related commands are similar to 
% those found in CSS. As users that are familiar with pgf conventions might make mistakes by 
% writing |\cxset{section font size}| rather than |\cxset{section font-size}|  we create aliases to cater
% for both. 
%
% \begin{macro}{section font-size}
%    \begin{macrocode}
\cxset{
  section font-size/.store in=\sectionfontsize@cx,
  section font size/.store in=\sectionfontsize@cx,
  section font-weight/.store in=\sectionfontweight@cx,
  section font-family/.store in=\sectionfontfamily@cx,
  section font family/.store in = \sectionfontfamly@cx,
  section font-shape/.store in=\sectionfontshape@cx,
  section color/.code=\gdef\sectioncolor@cx{#1}\renewsection,
  section color/.initial=black,
  section color/.default=black,
 } 
%    \end{macrocode}
% \end{macro}
%
% Next we define keys for the section numbering system. We cater for 
% |roman|, |Roman|, and within brackets |(roman)|, |arabic| or |numeric|. 
% Since unlike the standard
% classes we are aiming at a more generic template we need to care
% for the document type. If we have a chapter we will allow prefixing 
% of numbers. We use |sectionnumberingprefix@cx| as a key. 
% 
% \begin{macro}{section numbering}
%    \begin{macrocode}
\def\sectionnumberingsuffix@cx{}% 
\def\sectionnumberingprefix@cx{}%
\cxset{%
  section numbering suffix/.store in=\sectionnumberingsuffix@cx, 
  %alias
  section number after/.store in =\sectionnumberafter@cx,
  section numbering prefix/.store in=\sectionnumberingprefix@cx,
  section numbering/.is choice,
  section numbering/roman/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx\@roman\c@section}%
          \renewsection},
 section numbering/Roman/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx\@Roman\c@section}%
          \renewsection},
  section numbering/(roman)/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx(\@roman\c@section)}%
       \renewsection},
  section numbering/(Roman)/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx(\@Roman\c@section)}%
          \renewsection},
  section numbering/arabic/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx\@arabic\c@section\sectionnumberingsuffix@cx}%
          \renewsection},
  section numbering/numeric/.code={%
       \gdef\thesection{\sectionnumberingprefix@cx\@arabic\c@section\sectionnumberingsuffix@cx}%
          \renewsection},
  section numbering/none/.code={\gdef\thesection{\hspace*{-1em}}\renewsection},
  section numbering/alpha/.code={\gdef\thesection{\alphalph\c@section}},
  section numbering/Alpha/.code={\gdef\thesection{\AlphAlph\c@section}},
  section numbering/words/.code={\gdef\thesection{\sectionnumberingprefix@cx%
                                                   \words@cx{\@arabic\c@section}}},
  section numbering/Words/.code={%
 \gdef\thesection{\sectionnumberingprefix@cx\words@cx{\@arabic\c@section}}},
   section numbering/WORDS/.code={\gdef\thesection{\sectionnumberingprefix@cx \words@cx{\@arabic\c@section}}},
%    \end{macrocode}
% \end{macro}
%
% The |section numbering custom| is a catch-all key to define a special
% definition for |thesection|. Just pass on the tokens you require.t
%    \begin{macrocode}
     section numbering custom/.code=\gdef\thesection{#1}\renewsection,
%    \end{macrocode}
%
%  We next define choice keys for the alignment of sections. These can be one
% of |left|, |right|, |center| or |centering|.
%
%    \begin{macrocode}
  section align/.is choice,
  section align/right/.code = \gdef\sectionalign@cx{flushright},
  section align/center/.code = \gdef\sectionalign@cx{\centering},
  section align/centering/.code = \gdef\sectionalign@cx{\centering},
  section align/Centering/.code = \gdef\sectionalign@cx{\Centering},
  section align/left/.code = \gdef\sectionalign@cx{flushleft},
   section align/flushleft/.code = \gdef\sectionalign@cx{flushleft},
  section align/right/.code=\gdef\sectionalign@cx{flushright},
  section align/flushright/.code=\gdef\sectionalign@cx{flushright},
  section align/RaggedRight/.code=\gdef\sectionalign@cx{RaggedRight},
  section align/raggedright/.code=\gdef\sectionalign@cx{RaggedRight},
  %
  section afterindent/.is choice,
  section afterindent/on/.code = \afterindenton@cx,
  section afterindent/off/.code = \afterindentoff@cx,
  section afterindent/true/.code = \afterindenton@cx,
  section afterindent/false/.code = \afterindentoff@cx,
  %
  section beforeskip/.store in=\sectionbeforeskip@cx,
  section afterskip/.store in=\sectionafterskip@cx,
  section indent/.store in=\sectionindent@cx,
  section spaceout/.is choice,
  section spaceout/soul/.code={\@sectionspaceouttrue},
  section spaceout/none/.code={\@sectionspaceoutfalse},
  section number after/.store in=\sectionnumberafter@cx,
%    \end{macrocode}
%
% \begin{macro}{subsection options}
% 
% From now on almost everything is a repetition of whatever was previously
% defined for higher order sectioning commands.
%
%    \begin{macrocode}
% subsections
  subsection font-size/.store in=\subsectionfontsize@cx,
  subsection font-weight/.store in=\subsectionfontweight@cx,
  subsection font-family/.store in=\subsectionfontfamily@cx,
  subsection font-shape/.store in=\subsectionfontshape@cx,
%
  subsection color/.store in=\subsectioncolor@cx,
  subsection numbering prefix/.store in = \subsectionnumberingprefix@cx,
%    \end{macrocode}
%  Numbering choices
%    \begin{macrocode}
  subsection numbering/.is choice,
  subsection numbering/arabic/.code={%
    \gdef\thesubsection{\subsectionnumberingprefix@cx\@arabic\c@subsection}},
  subsection numbering/custom/.store in=\thesubsection@cx,
  subsection numbering/none/.code={\gdef\thesubsection{\hspace*{-1em}}\renewsubsection},
  subsection align/.store in=\subsectionalign@cx,
  subsection beforeskip/.store in=\subsectionbeforeskip@cx,
  subsection afterskip/.store in=\subsectionafterskip@cx,
  subsection indent/.store in=\subsectionindent@cx,
  subsection numbering custom/.code=\gdef\thesubsection{%
          \subsectionnumberingprefix@cx#1}\renewsubsection,
  subsection number after/.store in=\subsectionnumberafter@cx,       
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{subsubsections}
% 
% we are now five levels down at the headings
% Part, Chapter, section, subsection, subsubsection and lots of cut and paste and
% modifying commands.
% 
%    \begin{macrocode}
  % subsubsection keys
  %
  subsubsection font-size/.code = \gdef\subsubsectionfontsize@cx{#1},
  subsubsection font-weight/.store in=\subsubsectionfontweight@cx,
  subsubsection font-family/.store in=\subsubsectionfontfamily@cx,
  subsubsection font-shape/.store in=\subsubsectionfontshape@cx,
  % no hyphen vesion
  subsubsection font size/.store in=\subsubsectionfontsize@cx,
  subsubsection font weight/.store in=\subsubsectionfontweight@cx,
  subsubsection font family/.store in=\subsubsectionfontfamily@cx,
  subsubsection font shape/.store in=\subsubsectionfontshape@cx,
  %e
  subsubsection color/.store in=\subsubsectioncolor@cx,
  subsubsection numbering prefix/.store in = \subsubsectionnumberingprefix@cx,
  subsubsection numbering/.is choice,
  subsubsection numbering/arabic/.code={%
    \gdef\thesubsubsection{\subsubsectionnumberingprefix@cx\@arabic\c@subsubsection}%
         \renewsubsubsection},
  subsubsection numbering/numeric/.code={\gdef\thesubsubsection{\thesubsection.\@arabic\c@subsubsection}\renewsubsubsection},
  subsubsection numbering custom/.code= \gdef\thesubsubsection{%
       \subsubsectionnumberingprefix@cx#1}\renewsubsubsection,
  subsubsection numbering/none/.code={\gdef\thesubsubsection{}\renewsubsubsection},
  % needs handler
  subsubsection align/.store in=\subsubsectionalign@cx,
  subsubsection beforeskip/.store in=\subsubsectionbeforeskip@cx,
  subsubsection afterskip/.store in=\subsubsectionafterskip@cx,
  subsubsection indent/.store in=\subsubsectionindent@cx,
  subsubsection number after/.store in=\subsubsectionnumberafter@cx,
    %
% paragraph
%
  paragraph font-size/.store in = \paragraphfontsize@cx,
  paragraph font size/.store in = \paragraphfontsize@cx,
  paragraph font-weight/.store in=\paragraphfontweight@cx,
  paragraph font-family/.store in=\paragraphfontfamily@cx,
  paragraph font-shape/.store in=\paragraphfontshape@cx,
  paragraph color/.store in=\paragraphcolor@cx,
  paragraph numbering/.is choice,
  paragraph numbering/numeric/.code={\gdef\theparagraph{\thesubsubsection.\@arabic\c@paragraph}},
  paragraph numbering/custom/.store in=\theparagraph@cx,
  paragraph numbering/none/.code={\gdef\theparagraph{}},
  paragraph align/.store in=\paragraphalign@cx,
  paragraph beforeskip/.store in=\paragraphbeforeskip@cx,
  paragraph afterskip/.store in=\paragraphafterskip@cx,
  paragraph indent/.store in=\paragraphindent@cx,
  paragraph number after/.store in=\paragraphnumberafter@cx,
%% subparagraphs
%
  subparagraph font-size/.store in=\subparagraphfontsize@cx,
  subparagraph font-weight/.store in=\subparagraphfontweight@cx,
  subparagraph font-family/.store in=\subparagraphfontfamily@cx,
  subparagraph font-shape/.store in=\subparagraphfontshape@cx,
  subparagraph color/.store in=\subparagraphcolor@cx,
  subparagraph numbering/.is choice,
  subparagraph numbering/numeric/.code={\gdef\thesubparagraph{\theparagraph.\@arabic\c@subparagraph}},
  subparagraph numbering/arabic/.code={\gdef\thesubparagraph{\theparagraph.\@arabic\c@subparagraph}},
  subparagraph numbering/custom/.store in=\thesubparagraph@cx,
  subparagraph numbering/none/.code={\gdef\thesubparagraph{}},
  subparagraph align/.store in=\subparagraphalign@cx,
  subparagraph beforeskip/.store in=\subparagraphbeforeskip@cx,
  subparagraph afterskip/.store in=\subparagraphafterskip@cx,
  subparagraph indent/.store in=\subparagraphindent@cx,
  subparagraph number after/.store in=\subparagraphnumberafter@cx,
  subparagraph number after/.default=,
  subparagraph number after/.initial=,
%
%% headers and footers
  header style/.store in=\headerstyle@cx,
% general draft rules
  rule /.is choice,
  rule on/.code={\gdef\rulewidth@cx{0.4pt}},
  rule off/.code={\gdef\rulewidth@cx{0pt}},
% headers and footers
  lhead/.code ={\lhead{#1}},
  rhead/.code={\rhead{#1}},
  chead/.code={\chead{#1}},
  lfoot/.code ={\lhead{#1}},
  cfoot/.code={\chead{#1}},
  rfoot/.code={\rhead{#1}},
  headrulewidth/.code={\renewcommand\headrulewidth{#1}},
  footrulewidth/.code={\renewcommand\footrulewidth{#1}},
}
%    \end{macrocode}
%

% \subsection{Renewsection commands}
%
% These have to be called explicitly after key definitions, it is just 
% the way LaTeX works. One could add them in settings or explore a
% bit more deeply.
%
% We also define \cs{@startsection} as somehow there are problems
% with after indent false.
%
%  |#1|  name i.e, section
%  |#2| level number 2 section
%  |#3| indent
%  |#4| beforeskip
%  |#5| afterskip
%  |#6|  styling command
%
%    \begin{macrocode}
\def\@startsection#1#2#3#4#5#6{%
    \if@noskipsec \leavevmode \fi
    \par
    \@tempskipa #4\relax 
    \afterindent@cx%\@afterindentfalse
    \ifdim \@tempskipa <\z@
        \@tempskipa -\@tempskipa\afterindent@cx %\@afterindentfalse
     \fi
\if@nobreak
\everypar{}%
\else
   \addpenalty\@secpenalty\addvspace\@tempskipa
\fi
\@ifstar
 {\@ssect{#3}{#4}{#5}{#6}}%defined in the kernel
{\@dblarg{\@sect{#1}{#2}{#3}{#4}{#5}{#6}}}}%defined in the kernel
%    \end{macrocode}
%
% When LaTeX is typesetting the section number it calls |\@seccntformat|. This is common for
% all the subsectioning commands. We modify it based on code from \pkgname{sectsty} in order
% to generalize it.
%
% We first check if \meta{section}|@cntformat| is defined and then we redirect
% to specific section level command.
%
% \begin{macro}{\@seccntformat}
%    \begin{macrocode}
 \def\@seccntformat#1{\@ifundefined{#1@cntformat}%
{\csname the#1\endcsname\sectionnumberafter@cx}% default
{\csname #1@cntformat\endcsname}% individual control
}
\long\def\testsections{%
\section{Sections}
\lorem\par
\subsection{Subsections}
\lorem\par
\subsubsection{Subsubsections}
\lorem\par
}
\def\sectionnumberafter@cx{\quad}%default value only space
\def\subsectionnumberafter@cx{\quad}%default value only space
\def\subsubsectionnumberafter@cx{\quad}%default value only space

\def\section@cntformat{\thesection\sectionnumberafter@cx}
\def\subsection@cntformat{\thesubsection\subsectionnumberafter@cx}
\def\subsubsection@cntformat{\thesubsubsection\subsectionnumberafter@cx\quad}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\def\renewsection{%
\renewcommand\section{%
\@startsection{section}%
{1}%level check this conflicts with source2e
{\sectionindent@cx}%indent#2
{\sectionbeforeskip@cx}%before skip#3
{\sectionafterskip@cx}% after skip#4
{% 
 \setfont@cx{\sectionfontweight@cx}%
    {\sectionfontfamily@cx}{\sectionfontsize@cx}{\sectionfontshape@cx}%
   \expandafter\setfontparam@cx\sectionalign@cx;%
   \color{\sectioncolor@cx}%5
}}%
}%
%    \end{macrocode}
%
% Next we set the keys to a default style to avoid errors, if the user does not set them.
%
%    \begin{macrocode}
\cxset{
  section font-size= LARGE,
  section font size= LARGE,
  section font-weight=mdseries,
  section font family = sffamily,
  section font-shape= upshape,
  section color =spot!50,
  section numbering prefix=,
  section numbering=arabic,
  section indent=0pt,
  section beforeskip=0pt,
  section afterskip=10pt,
  section afterindent=off,
  section align=centering,
  section numbering suffix=,
  section number after=\quad,
}  
\renewsection
%    \end{macrocode}

%     \begin{macrocode}
\def\renewsubsection{%
\renewcommand\subsection{%
 \@startsection{subsection}%
{2}%level
{\subsectionindent@cx}%indent
{\subsectionbeforeskip@cx}%
{\subsectionafterskip@cx}%
{\setfont@cx{\subsectionfontweight@cx}%
    {\subsectionfontfamily@cx}{\subsectionfontsize@cx}{\subsectionfontshape@cx}%
   \expandafter\setfontparam@cx\subsectionalign@cx;%
  \color{\subsectioncolor@cx}%
}%
}%
}
%    \end{macrocode}
%
%  The |subsubsection|  keys need to be activated with a renew command.
%   \begin{macrocode}
\def\renewsubsubsection{%
\renewcommand\subsubsection{%
 \@startsection{subsubsection}%
{3}%level
{\subsubsectionindent@cx}%indent
{\subsubsectionbeforeskip@cx}%
{\subsubsectionafterskip@cx}%
{\setfont@cx{\subsubsectionfontweight@cx}%
    {\subsubsectionfontfamily@cx}{\subsubsectionfontsize@cx}{\subsubsectionfontshape@cx}%
   \expandafter\setfontparam@cx\subsubsectionalign@cx;%
  \color{\subsubsectioncolor@cx}%
}%
}
 %\def\@seccntformat##1{\csname the##1\endcsname\subsubsectionnumberafter@cx\hskip.5em}%
}

\cxset{
  subsubsection font-family=tiresias, 
  subsubsection font-size= large,
  subsubsection font size= large,
  subsubsection font-weight=bfseries,
  subsubsection font-family= tiresias,
  subsubsection font family = tiresias,
  subsubsection font-shape= upshape,
  subsubsection color =spot!50,
  subsubsection numbering prefix= ,
  subsubsection numbering = arabic,
  subsubsection indent=0pt,
  subsubsection beforeskip=0pt,
  subsubsection afterskip=10pt,
  subsubsection align=flushleft,
  subsubsection number after=,
}
\renewsubsubsection
%    \end{macrocode}
%
%
% \section{Runin Heads}
%
%  We now deal with paragraphs and subparagraphs, normally termed `runinâ€™ heads, as they produce
%  headings that are inlined with the text that follows. We add hooks, so that later the key mechanism
%  can be used to pick-up values. 
% 
% \begin{macro}{\renewparagraph}
%    \begin{macrocode}
\def\renewparagraph{%
  \renewcommand\paragraph{%
     \@startsection{paragraph}%
     {4}%level
     {\paragraphindent@cx}%indent
     {\paragraphbeforeskip@cx}%
     {\paragraphafterskip@cx}%
     {\setfont@cx{\paragraphfontweight@cx}%
     {\paragraphfontfamily@cx}{\paragraphfontsize@cx}{\paragraphfontshape@cx}%
     \expandafter\setfontparam@cx\paragraphalign@cx;%
         \color{\paragraphcolor@cx}%
     }%
 }
%\def\@seccntformat##1{\csname the##1\endcsname\paragraphnumberafter@cx\hskip.5em}%
}

\def\renewsubparagraph{%
\renewcommand\subparagraph{%
 \@startsection{subparagraph}%
{5}%level
{\subparagraphindent@cx}%indent
{\subparagraphbeforeskip@cx}%
{\subparagraphafterskip@cx}%
{\setfont@cx{\subparagraphfontweight@cx}%
    {\subparagraphfontfamily@cx}{\subparagraphfontsize@cx}{\subparagraphfontshape@cx}%
   \expandafter\setfontparam@cx\subparagraphalign@cx;%
   \color{\subparagraphcolor@cx}%
 }%
}%This command formats the section number including the space following it.
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting up the special chapter head mechanism}
%
%    We divide chapter heads in two broad categories, the
%	standard chapter heads that utilize macros similar to
%	the standard classes and the \textit{special} chapter
%	heads that have their own typesetter commands.
%	For example we provide a special type of design for
%	this book called \textit{stewart}. The \cs{stewart}
%	is a template author defined command.
%	Any special design requires, two items. A macro defining
%	the design and setting the custom key to point to this macro.
%
%	 
% \begin{macro}{custom}
% \begin{macro}{\customdesign@cx} 
%	This key holds the name of a macro that is to be
%	trigerred for a custom designed template. 
% 
%    \begin{macrocode}
\cxset{custom/.code=\global\@specialtrue
                \gdef\customdesign@cx{%
                      \csname#1\endcsname},
          fill/.store in=\fill@cx}
%    \end{macrocode}
% \end{macro}
% \end{macro} 
%
% 
%
% 	This macro  typesets the chapter label i.e., |CHAPTER|. We
%	set the font parameters as defined by the key value system.
%	The label is defined first as |CHAPTER| by the standard
%	class and later on as |Appendix|. 
%	If we need small caps or spaceout we use the |\so| command
%	from the |soul| package.
%    \begin{macrocode}
 \newcommand\inshape[2][fill=sweet,white]{%
% \rightline{\fbox{#2R}}
%\leftline{\fbox{#2}}
  %
        \begin{tikzpicture} 
         \filldraw[gray]  (0,0) circle [radius=1.5pt];%
         \node at (0,0) [%rounded rectangle,
                      trim left, 
                      name=s,
                      %anchor=midway,
                       behind path,
                       circle,
                       drop shadow={opacity=0.5,fill=sweet}, %box shadow in css
                        black,
                       % double=sweet,
                        %text height=1.5ex,
                        %text depth=1ex,
                        %anchor=s.base,
                        draw,
                        outer ysep=0pt, %no outer so that lines can align nicely
                        inner ysep=0pt,
                        inner xsep=0pt,
                        line width=1pt,%#1
                         ]{#2};
             \end{tikzpicture}%
\ignorespaces}%
%             
\newif\if@debug \@debugfalse
\def\tikzi{%
    \tikz[remember picture,overlay] 
    \draw[<->] (0,0)--(0,1.5)--++(-.2,0) node[left,fill=blue!15,text=black]%
       {{\ttfamily\footnotesize\string\chaptermarginleft}};%\space%
}%
%
%
\global\newsavebox\chapternamebox
\global\newsavebox\numbernamebox
\global\newsavebox\bothboxes
\global\newsavebox\tempboxa@cx
\global\newsavebox\tempboxb@cx
\global\newsavebox\tempboxc@cx
%
\def\setchapterfont{%
 \expandafter\setfontparam@cx\chapterfontfamily@cx;%
         \expandafter\setfontparam@cx\chapterfontsize@cx;%
         \expandafter\setfontparam@cx\chapterfontweight@cx;%
         \expandafter\setfontparam@cx\chapterfontshape@cx;%
}
%    \end{macrocode}
%
% \begin{macro}{\drawmaybe}
%   Borders for elements are specified either individually per side, or in a short form specifying
%   the same width for all sides. When the short form is used it will set the width of all sides,
%   so we do not really need to check for the short form.
%   
%    \begin{macrocode}
\gdef\tempcmd@cx{}% 
\newcounter{draw}\setcounter{draw}{1}
\gdef\drawmaybe#1{%
    \setcounter{draw}{0}
    \expandafter\ifdim\csname#1bordertopwidth\endcsname>0pt \addtocounter{draw}{1}\fi
    \expandafter\ifdim\csname#1borderrightwidth\endcsname>0pt \addtocounter{draw}{1}\fi
    \expandafter\ifdim\csname#1borderbottomwidth\endcsname>0pt \addtocounter{draw}{1}\fi
    \expandafter\ifdim\csname#1borderleftwidth\endcsname>0pt\addtocounter{draw}{1}\fi
     \expandafter%
     \ifnum\thedraw>0
           \gdef\tempcmd@cx{draw}%
      \else
           \gdef\tempcmd@cx{}%
      \fi
}
       
%   
%
%    \end{macrocode}
% \end{macro}
%
%  Define some fancy border styles to abstract border styles
%  \#1  rulewidth
%    \begin{macrocode}
\newcommand\phd@rule[2][chapter]{%
          \color{\rulebottomcolor}%
           \edef\tempa{\csname#1borderbottomstyle\endcsname}
           \edef\tempb{double}
           \edef\tempc{solid}
           \edef\tempd{dashed}
           \edef\tempe{dotted}
           \edef\tempf{double dotted}
           \edef\tempg{asterisk}
            \edef\temph{double asterisk}
           % solid
           \ifx\tempa\tempc 
              \hrule\@height\fboxrulebottom
           \fi  
           % double
           \ifx\tempa\tempb% 
              \hrule\@height\fboxrulebottom%thickness of rule
                  \@width\dimexpr(\totalboxwidth+8pt)\relax%
              \vskip1pt%
              \hrule\@height\fboxrulebottom\relax
           \fi    
          % dotted
           \ifx\tempa\tempe\nointerlineskip% 
                \hbox to \totalboxwidth{\xleaders\hbox{.}\hfill\kern\z@}%a
           \fi  
           % double dotted
           \ifx\tempa\tempf\nointerlineskip% 
                \hbox to \totalboxwidth{\cleaders\hbox{.}\hfill\kern\z@}%
                \vskip1pt\nointerlineskip%
                 \hbox to \totalboxwidth{\cleaders\hbox{.}\hfill\kern\z@}%
           \fi  
           % asterisk
            \ifx\tempa\tempg\nointerlineskip% 
                \hbox to \totalboxwidth{\cleaders\hbox{*}\hfill\kern\z@}%
           \fi  
            % double asterisk
            \ifx\tempa\temph\nointerlineskip% 
                \hbox to \totalboxwidth{\cleaders\hbox{\textasteriskcentered}\hfill\kern\z@}%
                \vskip1pt\nointerlineskip%
                \hbox to \totalboxwidth{\cleaders\hbox{\textasteriskcentered}\hfill\kern\z@}%
           \fi
}           
%    \end{macrocode}
%
%
% \begin{macro}{\fboxrule}
% \begin{macro}{\fboxsep}
% \begin{macro}{\fboxseptop}
% \begin{macro}{\fboxsepright}
% \begin{macro}{\fboxsepbottom}
% \begin{macro}{\fboxsepleft}
% user level parameters,
%    \begin{macrocode}
\newdimen\fboxrule
\newdimen\fboxsep
\fboxrule.4pt
\fboxsep1pt
\newdimen\fboxseptop
\newdimen\fboxsepright
\newdimen\fboxsepbottom
\newdimen\fboxsepleft
\fboxseptop\fboxsep
\fboxsepright\fboxsep
\fboxsepbottom\fboxsep
\fboxsepleft\fboxsep
\newdimen\fboxruletop
   \fboxruletop\fboxrule
\newdimen\fboxruleright
   \fboxruleright\fboxrule
\newdimen\fboxrulebottom
   \fboxrulebottom\fboxrule 
\newdimen\fboxruleleft
   \fboxruleleft\fboxrule
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\fbox}
%   Abbreviated framed box command.
%  The definition is from the kernel modified for variable padding and border
%  widths. 
% 
%    \begin{macrocode}
\def\ruletopcolor{black}
\def\rulebottomcolor{black}
\def\ruleleftcolor{black}
\def\rulerightcolor{black}
%
\long\def\phd@fbox#1{%
  \leavevmode
  \setbox\@tempboxa\hbox{%
    \color@begingroup%
      \kern\fboxsepleft{#1}\kern\fboxsepright%
    \color@endgroup}%
 \edef\totalboxwidth{\expandafter\the\wd\@tempboxa}   
  \phd@frameb@x\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\framebox}
% Framed version of |\makebox|.
%    \begin{macrocode}
\def\phd@framebox{%
  \@ifnextchar(%)
    \phd@framepicbox{\@ifnextchar[\phd@framebox\phd@fbox}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@framebox}
% Deal with optional arguments.
%    \begin{macrocode}
\def\phd@framebox[#1]{%
  \@ifnextchar[%]
    {\phd@iframebox[#1]}%
    {\phd@iframebox[#1][c]}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@iframebox}
%    The handling the optional arguments.
%    In order to set the whole box, including the frame to the
%    specified dimension, we first determine that dimension
%    from the natural size of the text, |#3|.
%    calculated width.
%    \begin{macrocode}
\long\def\phd@iframebox[#1][#2]#3{%
  \leavevmode
  \@begin@tempboxa\hbox{#3}%
    \setlength\@tempdima{#1}%
    \setbox\@tempboxa\hb@xt@\@tempdima
         {\kern\fboxsep\csname bm@#2\endcsname\kern\fboxsep}%
    \@frameb@x{\kern-\fboxrule}%
  \@end@tempboxa}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@frameb@x}
% Common part of |\framebox| and |\fbox|. |#1| is a negative kern
% in the |\framebox| case so that the vertical rules do not add to the
% width of the box.
%
%    \begin{macrocode}
\def\phd@frameb@x#1{%
  \@tempdima\fboxruletop
  \advance\@tempdima\fboxseptop
  \advance\@tempdima\dp\@tempboxa
  \hbox{%
    \lower\@tempdima\hbox{%
      \vbox{%
        \bgroup%
           \ifdim\fboxruletop>0pt 
              \phd@rule{\totalboxwidth}%
           \fi   
           %\color{\ruletopcolor}\hrule\@height\fboxruletop\egroup%toprule
            \egroup   
            \hbox{%
              \bgroup%
              \ifdim\fboxruleleft>0pt%
                  \color{\ruleleftcolor}%
                  \edef\tempa{\chapterborderleftstyle}%
                  \edef\tempc{solid}%
                  \edef\tempb{double}%
                  \ifx\tempa\tempb%
                    \vrule\@width\fboxruleleft%
                    \kern1pt\vrule\@width\fboxruleleft%
                  \fi
                  \ifx\tempa\tempc%
                    \vrule\@width\fboxruleleft%
                  \fi
             \fi   
              \egroup%\fboxrule%leftrule
              #1%
              \vbox{%
                 \vskip\fboxseptop%toppadding
                  \box\@tempboxa
                  \vskip\fboxsepbottom}%bottompadding
                  #1%
                  \bgroup%
                  \edef\tempa{\chapterborderrightstyle}%
                  \edef\tempb{double}
                  \edef\tempc{solid}
                  \color{\rulerightcolor}%
                  \ifx\tempa\tempb%
                      \vrule\@width\fboxruleright%
                       \kern1pt%
                       \vrule\@width\fboxruleright%
                  \fi%
                  \ifx\tempa\tempc%
                       \vrule\@width\fboxruleright%
                  \fi%
                  \egroup 
            }%%
           \bgroup
              \phd@rule{\totalboxwidth}%
           \egroup
           }%
           }%
        }%
}
%    \end{macrocode}
% \end{macro}
%
%   This is the main rendering routine for a generic block element. The element can either be
%    rendered in-line or as a block.
%
%    \#1  class of the element or id
%    \#2  the contents of the element e.g chapter or number.
%
%    Any element to be used here has to have a series of keys associated with it. They keep a naming
%    convention as for example,
%
%     |chapter border-left-width| \\
%     |chapter font-size|
%       
%    The prefix |chapter|  or |number|  or |title|  then enable to use the generic commands.
%    TeX is not an object orientated language, and future improvements are possible with LuaTeX.
%     
% \begin{macro}{\saveelementbox}
%    \begin{macrocode}
\def\chapterbordertopcolor{}%                                                                                                                   
\cxset{chapter border-top-color/.store in=\chapterbordertopcolor,
       chapter border-right-color/.store in=\chapterborderrightcolor,
       chapter border-bottom-color/.store in=\chapterborderbottomcolor,
       chapter border-left-color/.store in=\chapterborderleftcolor,}
 \cxset{%
          chapter border-top-color=sweet,
          chapter border-right-color=sweet,
          chapter border-bottom-color=sweet,
          chapter border-left-color=sweet,
           }%
%                            
\cxset{chapter border-color/.code=\pgfkeysalso{chapter border-top-color={#1},%
                                                      chapter border-right-color={#1},
                                                      chapter border-bottom-color={#1},
                                                      chapter border-left-color={#1}}}%
%                                                           
 % set some defaults                                                                
\cxset{%
          chapter border-top-color=sweet,
          chapter border-right-color=sweet,
          chapter border-bottom-color=sweet,
          chapter border-left-color=white,
         %chapter border-color=red%needs to be fixed
          }%
\def\saveelementbox#1#2#3{%
%    \end{macrocode}
% \end{macro}
%  
%  Before we save the box, we set all its properties so we can measure it
%  correctly. As this is a generalized routine all properties use the prefix \#2
%  i.e., \meta{chapter}paddingtop etc.
%
%    \begin{macrocode}
%          
   \expandafter\fboxseptop\csname#2paddingtop\endcsname
   \expandafter\fboxsepright\csname#2paddingright\endcsname
   \expandafter\fboxsepbottom\csname#2paddingbottom\endcsname
   \expandafter\fboxsepleft\csname#2paddingleft\endcsname
%
  \expandafter\fboxruletop\csname#2bordertopwidth\endcsname\relax
  \expandafter\fboxruleright\csname#2borderrightwidth\endcsname\relax
  \expandafter\fboxrulebottom\csname#2borderbottomwidth\endcsname\relax
  \expandafter\fboxruleleft\csname#2borderleftwidth\endcsname\relax
%
%
   \let\ruletopcolor\chapterbordertopcolor
   \let\rulerightcolor\chapterborderrightcolor       
   \let\rulebottomcolor\chapterborderbottomcolor
  \let\ruleleftcolor\chapterborderleftcolor
%
%
\cxset{number border-left-width=0.1pt,
          number padding-top=0pt,
          number border-bottom-width=0pt,
          chapter border-right-color=white,
          chapter border-top-color=white}%
%          
  \expandafter\savebox\csname#2namebox\endcsname{%
       \phd@fbox{#3}
      % \shadowbox{#3}%
       %\Ovalbox{#3}%
       %\doublebox{#3}
%      \tcbox[size=normal,
%                colframe=white, colback =white, borderline={2pt}{5pt}{black},
%               frame style={top color=white, bottom color=black, left color=black, right color=black},
%       %borderline west={2pt}{-2pt}{red},
%        %
%      % arc=5pt,outer arc=5pt, %!hyberbola
%      %outer arc=180pt,rounded corners=all,
%      tikz={rotate=0}]{#3}%
      %
%        \tcbox[colframe=thelightgray,arc=3pt,%!hyberbola arcs 200
%      outer arc=3.5pt,rounded corners=all,
%      tikz={rotate=30}]{#3}%
 %         \phd@fbox{#3}%
  }%
}
%
%
%  
  \newcommand\printchaptername[2][chapter]{%
%    \end{macrocode}
% 
%    \begin{macrocode}
   \saveelementbox{}{#1}{#2}%   
%   if there is a margin on top set it      
%   #0 is inline   #2 block 
%   This decides if the element and subsequent elements are to be floated left or right. If the first element
%    is to be floated right, then all subsequent elements are floated right.
%    If we are on the first element, we set glue at the beginning to float all subsequent elements to the
%    right, if centered we do the same. 
%          <0  first element rendering
%           0    float left no glue
%           1    center inline 
%           2    right  - glue only at first element
%           3   float left and break
%           4   center and break
%           5   center no break 
%    
%     
%\global\setcounter{chapterfloat}{2}
%\global\setcounter{numberfloat}{2}
%  The following is only executed  for the first element, giving a signal as to how the next elements are to be floated
%  The first element is a negative number and hence will only be activated once.
%   
\setcounter{currentelementfloat}{\csname c@#1float\endcsname}%
      \ifcase \@arabic\c@currentelementfloat                      
                 \expandafter\renderleftblock{#1}\or         %0
                 \expandafter\rendercenterblock{#1}\or         %1
                 \expandafter\renderrightblock{#1}  \or         %2
                 \expandafter\renderinline{#1} \or          %3
      \else
                \rendercenterblock{#1}%
      \fi
%  We now can deal with any material that has to be rendered outside the |element| block, possibly material
%  such as horizontal or vertical rules.
   \ifnum\@arabic\c@numberdisplay=0
      %\hrule 
      %\csname#1after@cx\endcsname% 
     \else
     \@@par       
  \fi    
     }
    
%    \end{macrocode}
%
%  We now ready to render the text. If a border width has been defined we need to use
%  the |draw| property of the node to show it. If not we do not draw it. However, we might
%  still need to fill it, if a background color has been specified.  
%
% \begin{macro}{\rendercenterblock}   
%  For block elements, i.e., elements that are allowed to float, we use a full line to float them. 
%    \begin{macrocode}
\def\rendercenterblock#1{%
       \appendtoheading{heading}{%
       \centerline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
        }%
    }%
  }
%    \end{macrocode}  
% 
%    \begin{macrocode}
 \def\renderleftblock#1{%
   \appendtoheading{heading}{%
     % \leftline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
      %}%
      }%
  }
  %
\def\renderrightblock#1{%
   \appendtoheading{heading}{%
     \rightline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
      }% 
     }%   
}

\def\renderinline#1{%
  \appendtoheading{headingtoks}{%
     \leftline{%
         \expandafter\unhcopy\csname#1namebox\endcsname
      }%    
      }%  
    }

\def\renderboxcontents#1{%
        \drawmaybe{#1}%  
        \edef\tmp{\tempcmd@cx}
       \inshape[\expandafter\csname#1color@cx\endcsname,
                            fill=\expandafter\csname#1bgcolor\endcsname, 
                            ellipse, 
                            \expandafter\csname#1shape\endcsname, 
                            behind path,
                            line width=1pt,  %!fixme
                            \tmp,]{\expandafter\copy%
                                 \expandafter\csname#1namebox\endcsname}%
  }
%    \end{macrocode}
% \end{macro}
%
% \subsection{Author blocks}
% 
% \begin{macro}{printauthorblock} 
%	An author author block is  printed for some chapter 
%	designs such as those in multi-author books, hence we provide a macro to typeset it. 
%	
%    \begin{macrocode}
\def\printauthorblock{%
  \if@debug
    \tikz[remember picture,overlay] 
       \draw[<->] (0,0)--(0,0.5)--++(-.2,0)% 
              node[left,fill=blue!15,text=black]%
               {{\ttfamily\footnotesize author block=true}};%
  \fi       
  \authorblockformat@cx\authorblock@cx}%
%    \end{macrocode}
% \end{macro}  
%

%	We also provide a macro to typeset the number with appropriate
%	hooks for key value parameters.
%
%  \begin{docCommand}{setnumberfont}{}
%  sets the font for the number part of a chapter heading
% \end{docCommand}
%    \begin{macrocode}
\def\setnumberfont{%
    \expandafter\setfontparam@cx\numberfontsize@cx;%
    \expandafter\setfontparam@cx\numberfontfamily@cx;%
    \expandafter\setfontparam@cx\numberfontweight@cx;%
    \expandafter\setfontparam@cx\numberfontshape@cx;%
  }%
%    \end{macrocode}
% 
%    \begin{macrocode}
\newsavebox\numberbox
%    \end{macrocode}
% 
% \begin{macro}{\printnumber@cx}
%    \begin{macrocode}
% \begin{macro}{\printnumber@cx}
\def\printnumber@cx{%
     \bgroup%
       % \kern\numberpaddingleft\relax
       \@debugtrue
         \numberbefore@cx%
         \if@debug%
         \begin{tikzpicture}[remember picture,overlay]%
         \draw[<->] (0,0)--(-.2,1.0)--++(-.2,0) node[right, text=black]%
          {\footnotesize\string\numberbefore@cx};%
         \end{tikzpicture}%
         \fi%
         \if@chapterspaceout
           \if@soulspaceout
               \SetTracking
							 [ no ligatures = {f},
							 spacing = {600*,-100*, },
							 outer spacing = {450,250,150},
							 outer kerning = {*,*} ]
							 { encoding = * }
							 { 160 }
                \def\x{\thechapter}%
                \def\soxx{\textls\x\strutbox}%
                 %
          \fi       
          \else%
             \def\soxx{\thechapter}%
        \fi%
% We measure the width of the number box before we
% insert any padding and borders          
          \savebox\numberbox{%
                   \color{\numbercolor@cx}%
                   \setnumberfont%
                    \soxx}%
%                    
            \colorbox{\numberbgcolor}{\hbox to \dimexpr(\wd\numberbox%
                               +\numberborderleftwidth
                               +\numberborderrightwidth
                               +\numberpaddingright
                               +\numberpaddingleft){%
                 \vbox{%
                %toprule
                \hrule width\dimexpr(
                                 \wd\numberbox
                                +\numberpaddingright +\numberpaddingleft
                                +\numberborderleftwidth
                               +\numberborderrightwidth
                                 )
                  height\numberbordertopwidth\relax%
              % left rule takes care of padding  
               \vrule height\dimexpr(
                                   \ht\numberbox 
                                  + \numberpaddingtop)% 
                          width\numberborderleftwidth
                          depth\expandafter\dimexpr(
                                   +\numberpaddingbottom-\dp\numberbox)% 
              \kern\numberpaddingleft%
             % \copy\numberbox%\@chapapp
             \drawmaybe{number}%
              \inshape[\temp]{\copy\numberbox}%
              %right rule
              \kern\numberpaddingright%
              \def\sideborderrule{%
                    \vrule height\dimexpr(
                                   \ht\numberbox 
                                  +\numberpaddingtop)% 
                          width\numberborderrightwidth
                          depth\expandafter\dimexpr(-\dp\numberbox
                                   +\numberpaddingbottom)\relax}
               \sideborderrule\hskip1pt\sideborderrule 
               %                      
%               \def\bottomrule{% 
%                  \bgroup
                   \@tempdima\dimexpr(\wd\numberbox
                                    +\numberpaddingright +\numberpaddingleft
                                    +\numberborderleftwidth
                                    +\numberborderrightwidth)
                   \expandafter\@tempdimb\numberborderbottomwidth\relax                 
                  % \drawrule{\@tempdima}{\@tempdimb}%
                   %\egroup
               %}%
               %
               \ifnum\numberborderstyle@cx>0 %
                      \drawrule{\@tempdima}{\@tempdimb}%
                       \ifnum\numberborderstyle@cx>1 %
                           \drawrule{\@tempdima}{\@tempdimb}%
                           % \drawdoublerule{\@tempdima}{\@tempdimb}%
                       \fi
               \fi
             %
            %
          }}}%
          \numberafter@cx%
          %\aftergroup\offinterlineskip
   \egroup         
}% 
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\printchaptertitle}
% \begin{macro}{\setchaptertitlefont}
%    \begin{macrocode}
\newif\if@runinhead \@runinheadfalse
\def\afteralignhook@cx{\par}
\def\chaptertitletextalign@cx{\Centering}
\newsavebox\titlebox
\newif\if@titleborderleft \@titleborderlefttrue
\newif\if@titleborderright \@titleborderrighttrue
%
\def\setchaptertitlefont{%
     \expandafter\setfontparam@cx\titlefontweight@cx;%
      \expandafter\setfontparam@cx\titlefontfamily@cx;%
      \expandafter\setfontparam@cx\titlefontshape@cx;%
      \expandafter\setfontparam@cx\titlefontsize@cx;%
      \color{\titlefontcolor@cx}%
}%
%    \end{macrocode}
%
% Provide inerface to expl3 dimensions
% and other variables 
%
%    \begin{macrocode}
\ExplSyntaxOn
  \dim_new:N \chaptertitleboxwidth
  \dim_set_eq:Nc \chaptertitleboxwidth {chapter_title_width}
\ExplSyntaxOff
%
%
\long\def\printchaptertitle#1{%
\parindent0pt
     %\vskip\titlebeforeskip@cx  %
     \if@lefttitle%
       \beforenumber@cx%
       \counterdisplay\c@chapter\afternumber@cx%
     \fi%
% If the title is letter spaced we define a macro to expand it.
      \if@titlespaceout%
         \long\def\SSS{{\so{#1}}}%    
      \else
         \long\def\SSS{#1}%
      \fi%
       \if@runinhead% for runin heads
            \def\afternumber@cx{\space\textbar\space}%
            \thechapter\afternumber@cx\space\SSS\par%
       \fi
%    \end{macrocode}      
%
% We save the contents in order to measure the height. Change to lrbox???
%
%    \begin{macrocode}
      \savebox{\titlebox}{%   
      \begin{minipage}[t]{\chaptertitleboxwidth}%
         \language-1% no hyphenation works with lua different with others
         \setchaptertitlefont
         \chaptertitletextalign@cx%
         \SSS%
         \par
       \end{minipage} 
         }%
         % attempt to emulate display modes
          \ifnum\titledisplay@cx=0\fi %do nothing
          \ifnum\titledisplay@cx=1
             \appendtoheading{heading}{\vskip0pt%
                       \titlemargintop@cx%
                       \leavevmode\noindent}%
             %\g@addto@macro{\titleafter@cx}{\par}
          \fi
          \ifnum\titledisplay@cx=2\fi
          \titlebefore@cx%
          %\titlemarginleft@cx%
 %         \chaptertitleblockalign@cx%
%    
%    \end{macrocode}
%
%   Having measured the title block, we now typeset it. Before we typeset it
%   we will provide borders all around if required and also allow for padding. 
%   We will not repeat the browser wars here, so we will provide the borders
%   outside the block and the padding inside.
%   The top border is typeset first
%    \begin{macrocode}
%
\appendtoheading{heading}{\mbox{%
     \fboxrule0pt\fbox{\hbox to \titlemarginleft{}}%
          \hbox to \chaptertitlewidth@cx{\vbox{%
               \color{\titlebordertopcolor@cx}%              
               \vskip0pt
                \nointerlineskip 
                 \vrule width
                        \expandafter\dimexpr(\wd\titlebox+\titleborderleftwidth 
                                                      +\titleborderrightwidth+\titlepaddingleft+\titlepaddingright) 
                         height\titlebordertopwidth
                 %
                 \vskip0pt\nointerlineskip
%   
%                 
                \color{\titleborderleftcolor@cx}%
                   \vrule width\titleborderleftwidth 
                             height\expandafter\dimexpr(\ht\titlebox
                             +\titlepaddingtop)\relax
                             depth\dimexpr(\titlepaddingbottom+\dp\titlebox)
                % we kern to emulate left padding      
                \kern\titlepaddingleft
%    \end{macrocode}
%  we typeset the text which is now in the minipage and we go on
%  and also add the right padding and border if required.
%  We copy instead of |\usebox| as we do not wanr to go into paragraph mode
%  Unsure about this item will need to revisit. Gives issues with some of the templates. 
%    \begin{macrocode}   
       \begin{minipage}[t]{\chaptertitlewidth@cx}%
           \setchaptertitlefont 
           \chaptertitletextalign@cx%
           \language-1
           \SSS\par
       \end{minipage}% \copy\titlebox% 
%    \end{macrocode}
%   finally we typeset the right border. 
%    \begin{macrocode}             
             \ifdim\titleborderrightwidth>0pt
                    \color{\titleborderrightcolor@cx}% 
                    \kern\titlepaddingright
                     \vrule width\titleborderrightwidth
                              height\expandafter\dimexpr(
                              \ht\titlebox+\titlepaddingtop)
                              depth\dimexpr(\titlepaddingbottom+\dp\titlebox)
              \fi
%    \end{macrocode}
%
%  next we skip to the bottom and draw a bottom rule
%  if it is specified. We are still in paragraph mode
%    \begin{macrocode}
%      
             \color{\titleborderbottomcolor@cx}%     
             \vskip0pt
             \nointerlineskip 
             \vrule width
                      \expandafter\dimexpr(
                       \wd\titlebox
                      +\titleborderleftwidth
                      +\titleborderrightwidth
                      +\titlepaddingleft + \titlepaddingright
                ) 
             height\titleborderbottomwidth\relax
             % hook for aligning normally par, unless there is more material  
%
%             
%       
              %
              %
%Hook before skips
      \if@righttitle%
         \afternumber@cx%
         \counterdisplay\c@chapter\afternumber@cx%
      \fi%
      %
      %\titleafterskip@cx 
%    \end{macrocode}
%  
% Finally we add the bottom margin to the title block and we are done.
%    \begin{macrocode}       
      \if@debug%
          %\par\leavevmode%
          \vbox to 0pt{%
              \offinterlineskip
               \vrule width.4pt depth0pt height% 
                \expandafter\the\titlemarginbottom\relax% 
                \kern2pt\raisebox{3pt}{\hbox to 0pt{\tiny\the\titlemarginbottom}}
            }%
     \fi%
%
 %     
}}}%\hbox
}%\afteralignhook@cx
%    \end{macrocode}
% We finally add the titleafter@cx hook. This takes care of any material added at the end of the
% text block. Also here we inject the end of paragraph marker and return to vertical mode. 
% 
%    \begin{macrocode}
     \titlemarginbottom@cx%   
     \titleafter@cx%introduces space if par???  
}%  end macro here
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\@makechapterhead}
%	The macro calls the main typesetting activities of the chaper head
%	We begin our typesetting by checking, if the macro has a special
%	design which we then call.
%  
%    \begin{macrocode}
%    \newif\if@mainmatter \@mainmatterfalse CHECK THIS NOT NECESSARY
%
\newtoks\chapterprelimtoks
\newtoks\chaptertoks
\newtoks\numbertoks
\newtoks\titletoks
\newtoks\headingtoks \headingtoks={}
%
%    \end{macrocode}
%
%
%  \begin{macro}{\appendtoheading}
%
%  The command \cmd{\appendtoheading} is just a helper macro to add tokens to a
%  token register, defined as \meta{element name}|toks|. 
%
%    \begin{macrocode}
\long\def\appendtoheading #1#2{%
  \expandafter\expandafter\expandafter\csname#1toks\endcsname\expandafter{%
     \the\csname#1toks\endcsname #2}%
}
%    \end{macrocode}
% \end{macro}
%
% 
%    \begin{macrocode}
\renewcommand\@makechapterhead[2][]{%
  \if@special
       \customdesign@cx{#2}%
  \else
%    \end{macrocode}
%
% 	We now ready to typeset the chapter heading, we run everything 
% 	within a group and
% 	activate the chapter only if the |thesecumdepth>-1| and if only we are 
% 	within mainmatter. 
%
%    \begin{macrocode}
      \bgroup%
      \parindent0pt 
      %\offinterlineskip
      %
      \normalfont%
      \ifnum \c@secnumdepth>\m@ne%
          \if@mainmatter%
%    \end{macrocode}
%
% We first check if we need to print anything before the chapter head, as for
% example an image or a graphic, we then check if the number is to the left of
% the right of the image and typeset it. We follow it by printing any chapter
% 
%    \begin{macrocode}
         \lineskip0pt% 
          \topskip0pt%check this out
           %\chaptermargintop@cx%
            \leavevmode% 
           \if@runinhead%
           \else%
               \if@leftname%
                    \printnumber@cx%
               \fi%
%    \end{macrocode}
%
%  The typesetting of the chapter and number combination and as a matter of fact
%  any generalized string of element blocks depends if the value of the property |display|
%  is inline, inline block or block. A block can float freely, whereas the others restrict the
%  typesetting to a linear mode.
%  
%  We start with checking if the chapter name is to be displayed or not. If it is empty
%  we save execution speed, by skipping it.
%  
%  Both token registers have a common part and a unique part
% TO FIX THIS IS INCORRECT ALL FOR DIFFERENT SPACEOUT
%    \begin{macrocode}
          \appendtoheading{number}{\numberbefore@cx}%
          \appendtoheading{number}{\color{\numbercolor@cx}}%
           \appendtoheading{number}{\setnumberfont}%     
           \if@chapterspaceout
              \if@soulspaceout
                \expandafter\appendtoheading{number}{\so\thechapter}%
              \fi
           \else
              \expandafter\appendtoheading{number}{\thechapter}%   
           \fi   
           \appendtoheading{number}{\numberafter@cx}%
%    \end{macrocode}
%
%    If there is no chapter name to print we just typeset the number.
%
%    \begin{macrocode}  
           \xdef\xtemp{\chaptername}%
           \xdef\ytemp{}%         
           \ifx\xtemp\ytemp%
               \printchaptername[number]{\the\numbertoks}%               
           \else
%    \end{macrocode}   
%  
%  We collect all the commands in a token register. We start with the color and font
%  settings which we add in a group.
%             
%    \begin{macrocode}
             \appendtoheading{chapterprelim}{\leavevmode \chapterbefore@cx\par}%
             \appendtoheading{chapter}{%
               \leavevmode\noindent
               \color\chaptercolor@cx%
                \setchapterfont
              }%
%
             \@ifundefined{chapterbeforecontent@cx}{%
                  \def\chapterbeforecontent@cx{}}{}%
%                  
             \if@chapterspaceout
                \if@soulspaceout       
                  \expandafter
                    \appendtoheading{chapter}{\chapterbeforecontent@cx\so\chaptername}%
                \else
                   \expandafter
                    \appendtoheading{chapter}{\chapterbeforecontent@cx\chaptername}% 
                \fi                                
             \else
              \appendtoheading{chapter}{\chapterbeforecontent@cx\chaptername}%
            \fi   
%
%    \end{macrocode}
%
%  Next we need to add the tokens for decorating the number. We expect all headings to ne
%  numbered if the word `chapterâ€™ is prefixed to the heading.  
%
%    \begin{macrocode} 
           \@ifundefined{numberaftercontent@cx}{\def\numberaftercontent@cx{}}{}%  
            \ifnum\thenumberdisplay=0 %                    
              \appendtoheading{chapter}{\kern0.5em}%
              \appendtoheading{chapter}{\the\numbertoks\numberaftercontent@cx}%
%    \end{macrocode}
%
%   We are done with inline headings and we can typeset them.
%    \begin{macrocode}
                 %   
              \the\chapterprelimtoks                 
              \printchaptername[chapter]{\the\chaptertoks}%
                 %
%    \end{macrocode}
%
%  If both the chapter name as well as the number are displayed as blocks
%  we typeset them in two operations.
%    \begin{macrocode}                  
             \else
                \the\chapterprelimtoks%
                \expandafter\printchaptername[chapter]{\the\chaptertoks}%
                \expandafter\printchaptername[chapter]{\the\numbertoks}%
              \fi  
            \fi
           \fi%
         \fi% mainmatter
      \fi%secnum
%    \end{macrocode}
%
% 	We typeset the title block and if there is an author block we print it.  
%	and print it.
%    \begin{macrocode}
\if@chaptertitlespecial%
       \csname ethics\endcsname{#2}%
\else%
       \printchaptertitle{#2}%
\fi%   
\the\headingtoks
\titlemarginbottom@cx
      \if@authorblock
           \printauthorblock
            \authorblockafterskip@cx
    \fi%
    \par\nobreak%
   %
    \egroup%
 \fi% We close the main conditional @special
  
}%
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\chapter} The \cs{chapter} is modified to
% 	add hooks for openings and headers. 
% 	The |book| standard class states that a chapter should
% 	always start on a new page. In reality many book styles
%	allow the chapter heading to be continuous i.e., more
%	like a section. \label{code:chapterafterindent} 
%    \begin{macrocode}
\global\newif\if@chapterafterindent@cx \@chapterafterindent@cxfalse
%    \end{macrocode}
%
%  We set keys for |\afterindent| to enable it via the key value interface
%  
%    \begin{macrocode}
\cxset{chapter afterindent/.is choice,
           chapter afterindent/true/.code=\gdef\chapterafterindent@cx{%
                                                            \global\@chapterafterindent@cxtrue},
           chapter afterindent/false/.code=\gdef\chapterafterindent@cx{%
            \global\@chapterafterindent@cxfalse},
}           
% We set this to false by default
\cxset{chapter afterindent=false}
% call it after a heading
\def\chapterafterheading@cx{%
     \@nobreaktrue
     \everypar{%
     \if@nobreak
         \@nobreakfalse
         \clubpenalty \@M
          \if@chapterafterindent@cx \else
            {\setbox\z@\lastbox}%
          \fi
       \else
       \clubpenalty \@clubpenalty
       \everypar{}%
     \fi}}
%    \end{macrocode} 
% 
% 
%    \begin{macrocode}
\renewcommand\chapter{%
    \if@openright\cleardoublepage\fi
    \if@openleft\cleartoevenpage\fi
    \if@openany\clearpage\fi
%    \end{macrocode}
%  
%	Floats are prevented from floating at the top of chapter
%	opening pages as they look out of place.
% 	|\headerstyle@cx| defaults to empty.
%    Then we suppress the indentation of the first paragraph by
%    setting the switch |\@afterindent| to |false|. We use |\secdef|
%    to specify the macros to use for actually setting the chapter
%    title.
%
%    \begin{macrocode}
    \thispagestyle{empty}%
    \global\@topnum\z@%
%    \end{macrocode}
%
%  We provide a hook to handle indentation after a chapter. This would also necessitate to 
% change the afterheading macro and make it specific to a chapter head.
%    \begin{macrocode}  
      \@chapterafterindent@cxfalse%
   % \@afterindentfalse
%    \end{macrocode}
% \end{macro}
%
% 	Everything is now ready to call |secdef|, which is defined in the
% 	kernel. This command takes two arguments and calls the auxiliary
% 	macros for starred and unstarred commands. 
%
%    \begin{macrocode}
      \secdef\@chapter\@schapter}%[optional]{title} follows
%    \end{macrocode}
%
% We first define the unstarred version of the command.
% This is modified to include
% our hooks.
%
%
% \begin{macro}{\@chapter} 
%    This macro is called when we have a numbered chapter. When
%    |secnumdepth| is larger than $-1$ and, in the book
%    class, |\@mainmatter| is true, we display the chapter
%    number. We also inform the user that a new chapter is about to be
%    typeset by writing a message to the terminal. We hook
%	 here to add a number of typesetting key value macros.
%	
%    \#1 what to write in toc if has optional argument
%    \#2 title
% 
%    \begin{macrocode}
\newif\if@tocspecial\@tocfalse
\def\formattoctitle{}
% 
\def\@chapter[#1]#2{%
 %\refstepcounter{chapter}%
  \ifnum \c@secnumdepth >\m@ne%
    \if@mainmatter
      \if@toc% added extra if
        \refstepcounter{chapter}%
        \typeout{\@chapapp\space\thechapter.}%
%    \end{macrocode} 
%
%	We provide a hook for special design of toc layouts.
%	If set we call the specially defined custom layout otherwise
%	we default to the standard class layout.
%	We have a subtle change below to be able to catch
%	the title and number separately in a \cs{numberline} command.
%	Although the std classes have |{\protect\numberline{\thechapter}#1}|
%	we prefer |{\protect\numberline{\thechapter}{#1}}|. 
%   This way we can have a separate case for typesetting titles and numbers.
%   TODO CHECK WHY BOOKMARKS HAS AN ISSUE WITH THIS
%    \begin{macrocode}
        \def\tocchapternumber@cx{\@arabic\c@chapter}%
        \phantomsection
         \addcontentsline{toc}{chapter}{%
         \protect\chapternumberline{\tocchapternumber@cx}{#1}{\tocimage@cx}}%
  	\fi%
            %\fi%
    \else
      \addcontentsline{toc}{chapter}{#1}%for part???
    \fi%
   \else%
      \addcontentsline{toc}{chapter}{#1}%????? for part
   \fi%
%    \end{macrocode}
%
%	After having written the entry to the table of contents we
%	store the alternative title of this chapter with |\chaptermark|
%	and add some white space to the lists of figures and tables.
%    In one column mode we call |\@afterheading| which takes care 
%	of supressing the indentation after a chapter heading. 
%
%    \begin{macrocode}
  \chaptermark{#1}%
  \addtocontents{lof}{\protect\addvspace{10\p@}}%
  \addtocontents{lot}{\protect\addvspace{10\p@}}%
     \if@twocolumn
         \@topnewpage[\@makechapterhead{#2}]%
      \else%
         \@makechapterhead{#2}%
% This was afterindent, we redefined it to ensure we can make it more flexible.
%                 
                %\@afterheading
                \chapterafterheading@cx%
      \fi%
   }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\cxset{toc image/.store in = \tocimage@cx}
\cxset{toc image ={}}
%
\gdef\setdefaults{%
\cxset{%
  chapter toc=true,
  toc image={},
  chapter name=CHAPTER,
  title font-family=\rmfamily,
  title font-weight=\bfseries,
  title font-size=\Huge,
  title font-color=purple,
  title margin bottom=20pt,
  numbering=arabic,
  number dot=,
  number before=,
  number after=,
  %chapter name
 chapter display=block,
 chapter float=left,
 chapter shape=ellipse,
 chapter color=black,
 chapter background-color=sweet,
 chapter font-size= Huge,
 chapter font-weight=bfseries,
 chapter font-family=itshape,
 chapter before=,
 chapter spaceout=none,
 chapter after=,
 chapter margin-left=0cm,
 chapter margin-top=0pt,
 %
 chapter border-width=2pt,
 chapter border-top-width=1pt,
 chapter border-right-width=1pt,
 chapter border-bottom-width=1pt,
 chapter border-left-width=4pt,
% 
 chapter padding-left=20pt,
 chapter padding-right=20pt,
 chapter padding-top=20pt,
 chapter padding-bottom=10pt,
% 
 number display=block,
 number float=right,
 number shape=starburst,
 numbering=Words,
 number spaceout=soul,
 number font-size=huge,
 number font-weight=bold,
 number font-family=rmfamily,
 number font-shape=itshape,
 number before=,
 number display=inline,
 number float=none,
% 
 number border-top-width=1pt,
 number border-right-width=0pt,
 number border-bottom-width=0pt,
 number border-left-width=0pt,
 number border-width=0pt,
%  
 number padding-left=0em,
 number padding-right=0.5em,
 number padding-top=0em,
 number padding-bottom=0pt,
  %number margin-top=, to do
 %number margin-left=0pt,  to create
 %
 number after=\par,
 number dot=,
 number position=rightname,
 number color=sweet,
 number background-color=white,
 title before=,
 title after=,
 title afterskip={\vskip24pt},
 title beforeskip=,
 title font=rmfamily,
 chapter title width=\columnwidth,
 header style=plain,
 section font-weight=bfseries,
 section font-family=sffamily,
 section font-size=Large,
 section font-shape=upshape,
 section align= left,
 section numbering suffix=,
 title font-shape=upshape,
 chapter title align=left,
 chapter title text-align=left,
 chapter title width=0.8\textwidth,
 title before=,
 title after=,
 title display=block,
 title beforeskip=1pt,
 title afterskip=1pt,
 author block=false,
 section font-family=rmfamily,
 section font-size=LARGE,
 section font-weight=bfseries,
 section indent=0pt,
  section font-weight=mdseries,
 section align=left,
% epigraph width=\dimexpr(\textwidth-2cm)\relax,
% epigraph align=center,
 epigraph text align=center,
 epigraph rule width=0pt,
 header style=plain
 % blank page text=,
}
}
\cxset{rule color/.store in={\rulecolor@cx},
          block color/.store in={\blockcolor@cx}}
\cxset{rule color=blue, block color=teal}
\cxset{style87/.style={
 chapter opening=any,
 chapter numbering=arabic,
 name=Chapter,
 % positioning and float - inline is 0
 %  float right is 2
 number display=block,
 number float=right,
 number shape=starburst,
 %numbering=Words,
 number spaceout=soul,
 number font-size=huge,
 number font-weight=bold,
 number font-family=rmfamily,
 number font-shape=normal,
 number before=,
 number display=inline,
 number float=none,
% 
 number border-top-width=0pt,
 number border-right-width=0pt,
 number border-bottom-width=0pt,
 number border-left-width=0pt,
 number border-width=0pt,
%  
 number padding-left=0em,
 number padding-right=0.5em,
 number padding-top=0em,
 number padding-bottom=0pt,
  %number margin-top=, to do
 %number margin-left=0pt,  to create
 %
 number after=\par,
 number dot=,
 number position=rightname,
 number color=sweet,
 number background-color=white,
 %chapter name
 chapter display=block,
 chapter float=left,
 chapter shape=ellipse,
 chapter color=black,
 chapter background-color=sweet,
 chapter font-size= Huge,
 chapter font-weight=bfseries,
 chapter font-family=itshape,
 chapter before=,
 chapter spaceout=none,
 chapter after=,
 chapter margin-left=0cm,
 chapter margin-top=0pt,
 %
 chapter border-width=2pt,
 chapter border-top-width=1pt,
 chapter border-right-width=1pt,
 chapter border-bottom-width=1pt,
 chapter border-left-width=4pt,
% 
 chapter padding-left=20pt,
 chapter padding-right=20pt,
 chapter padding-top=20pt,
 chapter padding-bottom=10pt,
  %chapter title
 title font-family=rmfamily,
 title font-color=black!80,
 title font-weight=bfseries,
 title font-size=huge,
 chapter title align=none,
 title margin-left=1cm,
 title margin bottom=1.3cm,
 title margin top=30pt,
 % title borders
 title border-width=0pt,
 title padding=0pt,
 title border-color=black!80,
% title border-top-color=spot!50,
% title border-top-width=20pt,
 title border-left-color=black!80,
 title border-left-width=2pt,
 title border-color=black!80,
 title padding-top=10pt,
 title padding-bottom=10pt,
 title padding-left=10pt,
 title padding-right=0pt,
% title border-right-color=spot!50,
% title border-right-width=20pt,
% title border-bottom-color=spot!50,
% title border-bottom-width=20pt,
 %
 chapter title align=left,
 chapter title text-align=left,
 chapter title width=0.8\textwidth,
 title before=,
 title after=,
 title display=block,
 title beforeskip=12pt,
 title afterskip=12pt,
 author block=false,
 section font-family=sffamily,
 section font-size=LARGE,
 section font-weight=bfseries,
 section indent=0pt,
  section font-weight=mdseries,
 section align=left,
 section font-family=tiresias,
       subsection font-family=tiresias,
       subsubsection font-family=tiresias,
       subsubsection indent=0pt,
       subsubsection font-size=large,
 %epigraph width=\dimexpr(\textwidth-2cm)\relax,
 %epigraph align=center,
 %epigraph text align=center,
 %epigraph rule width=0pt,
 header style=plain,
 chapter toc=true,
 }}
 
\cxset{section align=left}
\cxset{section font-weight=bold}
\cxset{section font-family=sffamily}
\cxset{subsection beforeskip=10pt} 
\cxset{subsection afterskip=10pt,
       subsection font-weight=\bfseries,
       subsection font-family=\sffamily,
       subsection font-size=\Large,
       subsection font-shape=\upshape,
       subsection align=flushleft,%don't say left
       subsection color=spot!50,
       subsection indent=0pt,
       %subsection afterindent=false,
       subsection numbering prefix=\thesection.,
       subsubsection indent=0pt,
       section font-family=tiresias,
       subsection font-family=tiresias,
       subsubsection font-family=tiresias,
       subsubsection indent=0pt,
       subsubsection font-size=large,
       subsection afterskip=10pt,
       subsection font-weight=\bfseries,
       subsection font-family=tiresias,
       subsection font-size=\Large,
       subsection font-shape=\upshape,
       subsection align=flushleft,%don't say left
       subsection color=spot!50,
       subsection indent=0pt,
       %subsection afterindent=false,
       subsection numbering prefix=\thesection.,
       }
\cxset{section align=left}
\cxset{section font-weight=bold}
\cxset{section font-family=sffamily}
\cxset{subsection beforeskip=10pt} 
\cxset{subsection afterskip=10pt,
       subsection font-weight=\bfseries,
       subsection font-family=tiresias,
       subsection font-size=\Large,
       subsection font-shape=\upshape,
       subsection align=flushleft,%don't say left
       subsection color=spot!50,
       subsection indent=0pt,
       %subsection afterindent=false,
       subsection numbering prefix=\thesection.,
       }

\cxset{style87}
\renewsection
\renewsubsection
%
%\section{List Management}
%
\cxset{enumerate numberingi/.is choice,
  enumerate numberingi/.code={\renewcommand\theenumi {\csname#1\endcsname{enumi}}},
  enumerate numberingii/.code={\renewcommand\theenumii {\csname#1\endcsname{enumii}}},
  enumerate numberingiii/.code={\renewcommand\theenumiii {\csname#1\endcsname{enumiii}}},
  enumerate numberingiv/.code={\renewcommand\theenumiv {\csname#1\endcsname{enumiv}}},
  enumerate labeli punctuation/.store in=\enumeratepunctuationi@cx,
  enumerate labeli/.is choice,
  enumerate labeli/brackets/.code={\renewcommand\labelenumi{(\theenumi\enumeratepunctuationi@cx)}},
  enumerate labeli/square brackets/.code={\renewcommand\labelenumi{[\theenumi\enumeratepunctuationi@cx]}},
  enumerate labeli/right bracket/.code={\renewcommand\labelenumi{\theenumi\enumeratepunctuationi@cx)}},
  enumerate label left/.store in=\enumeratelabelleft@cx,
  enumerate label right/.code=\renewcommand\labelenumi{\enumeratelabelleft@cx\theenumi\enumeratepunctuationi@cx#1},
  enumerate leftmargini/.code={\setlength\leftmargini{#1}},
  enumerate leftmarginii/.code={\setlength\leftmarginii{#1}},
  enumerate leftmarginiii/.code={\setlength\leftmarginiii{#1}},
  enumerate leftmarginiv/.code={\setlength\leftmarginiv{#1}},
  listi topsep/.store in=\listitopsep@cx,
  listi partopsep/.store in=\listipartopsep@cx,
  listi itemsep/.store in=\listiitemsep@cx,
  listi parsep/.store in=\listiparsep@cx,
  listii topsep/.store in=\listiitopsep@cx,
  listii partopsep/.store in=\listiipartopsep@cx,
  listii itemsep/.store in=\listiiitemsep@cx,
  listii parsep/.store in=\listiiparsep@cx,
  listiii topsep/.store in=\listiiitopsep@cx,
  listiii partopsep/.store in=\listiiipartopsep@cx,
  listiii itemsep/.store in=\listiiiitemsep@cx,
  listiii parsep/.store in=\listiiiparsep@cx,
}
\cxset{compact1/.style={%
  enumerate numberingi=arabic,
  enumerate numberingii=alph,
  enumerate numberingiii=alph,
  enumerate numberingiv=roman,
  enumerate labeli punctuation=.,
  enumerate label left=,
  enumerate label right=,
  enumerate leftmargini=2.2em,
  enumerate leftmarginii=2.1em,
  enumerate leftmarginiii=1.5em,
  enumerate leftmarginiv=2em,
  listi topsep=8\p@ \@plus2\p@ \@minus\p@,
  listi itemsep=0\p@ \@plus2\p@ \@minus\p@,
  listi parsep=0\p@ \@plus2\p@ \@minus\p@,
  listii topsep=0\p@ \@plus2\p@ \@minus\p@,
  listii itemsep=0\p@ \@plus2\p@ \@minus\p@,
  listii parsep=0\p@ \@plus2\p@ \@minus\p@,
  listiii topsep=0\p@ \@plus2\p@ \@minus\p@,
  listiii itemsep=0\p@ \@plus2\p@ \@minus\p@,
  listiii parsep=0\p@ \@plus2\p@ \@minus\p@,
}}
\cxset{compact2/.style={%
  enumerate numberingi=alph,
  enumerate numberingii=roman,
  enumerate numberingiii=alph,
  enumerate numberingiv=roman,
  enumerate labeli punctuation=,
  enumerate label left=(,
  enumerate label right=),
  enumerate leftmargini=2.2em,
  enumerate leftmarginii=2.1em,
  enumerate leftmarginiii=1.5em,
  enumerate leftmarginiv=2em,
  listi topsep   = 8\p@ \@plus2\p@ \@minus\p@,
  listi itemsep = 0\p@ \@plus2\p@ \@minus\p@,
  listi parsep   = 0\p@ \@plus2\p@ \@minus\p@,
  listii topsep  = 0\p@ \@plus2\p@ \@minus\p@,
  listii itemsep= 0\p@ \@plus2\p@ \@minus\p@,
  listii parsep  = 0\p@ \@plus2\p@ \@minus\p@,
  listiii topsep = 0\p@ \@plus2\p@ \@minus\p@,
  listiii itemsep= 0\p@ \@plus2\p@ \@minus\p@,
  listiii parsep  = 0\p@ \@plus2\p@ \@minus\p@,
}}

\ExplSyntaxOn
\def\setenumerate#1{
\cxset{#1}
\def\@listi{%
           \leftmargin\leftmargini
            \parsep\listiparsep@cx
            \topsep\listitopsep@cx\relax
            \itemsep\listiitemsep@cx}
            
\def\@listii{\leftmargin\leftmarginii
            \parsep\listiiparsep@cx
            \topsep\listiitopsep@cx\relax
            \itemsep\listiiitemsep@cx}
            
\def\@listiii{\leftmargin\leftmarginiii
            \parsep\listiiiparsep@cx
            \topsep\listiiitopsep@cx\relax
            \itemsep\listiiiitemsep@cx}
}


\setenumerate{compact1}
\ExplSyntaxOff

%\setdefaults
%    \end{macrocode}
%
% \section{Stewart Special Design}
%
%	We provide a number of predefined \textit{special designs} 
%    to illustrate the
%	technique. This special opening chapter page has been used in this document.
%	In order to typeset it we need a number of additional fields. We need an
%	image name and the text for two text blocks. We create fields for them.
%
%	\keyval{image}{\marg{filename}}{The filename for the 
%    image. You can use any
%	name that is acceptable to the command \texttt{includegraphics}.}
%    The special designs, require that you define a new set
%    of keys, if required and to create a command to typeset
%	these.
%
%    \begin{macrocode}
\cxset{steward/.style={
  custom = stewart,
  offsety/.store in=\soffsety,
  image/.store in=\image@cx,
  texti/.store in=\texti@cx,
  textii/.store in=\textii@cx,
}}
%
\newcommand\stewart[2][]{%
   \fancypagestyle{fancy}{%
   \lhead{}\rhead{}%
   \chead{}%
   \cfoot{}%
   \lfoot{}%
   \rfoot{\thepage}%
   \def\footrule#1{{\color{blue}%
   \hrule width\paperwidth}\vskip3pt
}

\renewcommand{\headrulewidth}{0pt}
\renewcommand{\footrulewidth}{0.4pt}}

\clearpage

\begin{tikzpicture}[remember picture,overlay]
\node [xshift=5cm,yshift=-\paperheight] at (current page.north west)
[text width=0.98\textwidth,text height=\paperheight, fill=thecream!30,rounded corners,above right]
{};
\node [xshift=6.5cm,yshift=-1.5cm-\soffsety] at (current page.north west)
[text width=0.9\textwidth,below right]{\sffamily \bfseries \huge #2};

\node [xshift=3cm,yshift=-1.5cm] at (current page.north west)
[text width=3cm,align=center,minimum height=2.5cm, fill=blue,below right]
{\[\text{\HHUGE\bfseries\sffamily\color{white}\thechapter}\]
\par\vspace*{3pt}
};

\node [xshift=-0.2cm,yshift=-21.5cm] at (current page.north west)
[text width=3cm,above right]%
{\includegraphics[width=1.0\paperwidth,height=\textheight,keepaspectratio]{\image@cx}};
\node [xshift=3cm,yshift=-19.5cm] at (current page.north west)
[text width=9cm,minimum height=2.5cm,inner sep=0.5em, fill=blue,below right]
{\color{white}
  \bfseries\sffamily\texti@cx
};
\node [xshift=6.5cm,yshift=-26cm] at (current page.north west)
[text width=12cm,above right]
{\textii@cx
};
\end{tikzpicture}
\par
\clearpage
}
%    \end{macrocode}
%
% \subsection{tikzspecials}
%    \begin{macrocode}
\cxset{band height/.store in=\bandheight@cx}
\cxset{band height=5cm}

\newcommand{\tikzspecials}[2][]{%
\@specialtrue
\clearpage

\begin{tikzpicture}[remember picture,overlay]
    \node[yshift=-\bandheight@cx] at (current page.north west)
      {\begin{tikzpicture}[remember picture, overlay]
        \draw[fill=\fill@cx, draw=none] (0,0) rectangle (\paperwidth,\bandheight@cx);
        \node[anchor=east,xshift=.9\paperwidth,rectangle,
              rounded corners=10pt,inner sep=11pt,
              fill=\fill@cx]{%
        \titlefontcolor@cx
        \titlefontsize@cx\bfseries
        \titlefontfamily@cx
        \thechapter\
        \textsc{#2}};
      \draw [fill=\fill@cx] (0,10cm) -- (5cm,10cm);
       \end{tikzpicture}
      };
\end{tikzpicture}
\mbox{}
\vspace*{\bandheight@cx}\par
}
%    \end{macrocode}
%
% \subsection{The genetics special design}
%
%    \begin{macrocode}
\cxset{image/.store in=\image@cx,
       image caption/.store in=\caption@cx,
       textiii/.store in=\textiii@cx}
%    \end{macrocode}
%
% \begin{macro}{\genetics}
%	This macro is a special template that requires settings via
%	a |\cxset| command. 
%    \begin{macrocode}
\newcommand\genetics[2][]{%
  %    \end{macrocode}
% \end{macro}
%
%	We set everything in a minipage to ensure that no breaks will
%	occur. If the user added too much text it will just overflow and it
%	will have to be adjusted.
%    \begin{macrocode}
\begin{minipage}[b][\textheight][t]{\textwidth}%
\hbox{}%
%    \end{macrocode}
%	We first draw the rules.
%    \begin{macrocode}
      \vbox to 0pt {%
      \color{teal}%
      \hbox{\rule{\textwidth}{0.4pt}}%
      \hbox{\rule{0.4pt}{\textheight}\rule{4cm}{0.4pt}}%
    }%
\vspace*{10pt}%
%    \end{macrocode}
%	The next two parboxes, place the subtitle and the image.
% 	they are aligned at the bottom and a rule can be used to adjust the 
%	subtitle.
%
%    \begin{macrocode} 
\begin{minipage}[b]{\linewidth}%
\fboxsep0pt%
\fboxrule0pt%
\fbox{\begin{minipage}[b]{0.25\linewidth}%
\lineskip0pt\topskip0pt%
\leftskip0.5cm%
\leavevmode%
\bfseries\color{teal}\Large\sffamily%
\caption@cx%
\vspace*{2cm}%

\includegraphics[width=\dimexpr\linewidth-0.5cm\relax,totalheight=3.8cm]{./images/chapterconcept-01.jpg}\llap{\raise20pt\hbox to \linewidth{\HHUGE \hskip1cm\color{lightgray!40}\thechapter}\hfill}%
\end{minipage}%
}%
%
\fbox{\begin{minipage}[b]{0.75\linewidth}%
\lineskip0pt%
\leavevmode
\includegraphics[width=1\linewidth]{\image@cx}%

\includegraphics[width=\linewidth]{./images/chapterconcept-02.jpg}.%
\end{minipage}}%
\end{minipage}%
%    \end{macrocode}
%    \begin{macrocode}
\par
\vspace{1.5cm  plus25pt minus25pt}
\parbox[t]{0.3\linewidth}{%
  \titlefontsize@cx
  \titlefontweight@cx
  \titlefontfamily@cx
  \leftskip0.5em 
  \color{teal}#2%
}%
\begin{minipage}[t]{0.6\linewidth}%
\vspace{-2\baselineskip}
\textiii@cx
\end{minipage}

\end{minipage}
}


%    \end{macrocode}


% \subsection{Epigraphs}
%
% This section deals with epigraphs.\index{epigraph}\index{epigraph!rule}
% The memoir class defines the epigraph command.
%    \begin{macrocode}
\@ifundefined{epigraph}{%
   \RequirePackage{epigraph}
   %% Set up the epigraph to be a bit wider
  \setlength{\epigraphwidth}{8cm} 
  \setlength{\epigraphrule}{0pt}
  \newcommand{\theepigraph}[2]{\epigraphhead[30]{\epigraph{#1}{\textit{#2}}}}
}{\setlength{\epigraphwidth}{8cm} 
\setlength{\epigraphrule}{0pt}
\newcommand{\theepigraph}[2]{\epigraphhead[30]{\epigraph{#1}{\textit{#2}}}}%
}
%    \end{macrocode}
%
%    \begin{macrocode}

\cxset{
  epigraph width/.code={\setlength\epigraphwidth{#1}},
  epigraph font-size/.code={\renewcommand{\epigraphsize}{#1}},
  epigraph beforeskip/.code={\setlength\beforeepigraphskip{#1}},
  epigraph afterskip/.code={\setlength\afterepigraphskip{#1}},
  epigraph align/.is choice,
  epigraph align/center/.code={\renewcommand{\epigraphflush}{center}},
  epigraph align/left/.code={\renewcommand{\epigraphflush}{flushleft}},
  epigraph align/right/.code={\renewcommand{\epigraphflush}{flushright}},
  epigraph source align/.is choice,
  epigraph source align/left/.code={\renewcommand{\sourceflush}{flushleft}},
  epigraph source align/right/.code={\renewcommand{\sourceflush}{flushright}},
  epigraph source align/center/.code={\renewcommand{\sourceflush}{center}},
  epigraph text align/.is choice,
  epigraph text align/left/.code={\renewcommand{\textflush}{flushleft}},
  epigraph text align/right/.code={\renewcommand{\textflush}{flushright}},
  epigraph text align/center/.code={\renewcommand{\textflush}{center}},
  epigraph rule width/.code={\setlength\epigraphrule{#1}},
  epigraph rule color/.store in = \epigraphrulecolor@cx,
  epigraph rule/.code={
 \renewcommand{\@epirule}{\color{\epigraphrulecolor@cx}\rule[.5ex]{\epigraphwidth}{\epigraphrule}}
},
}


\cxset{}

\cxset{epigraph width=0.5\linewidth,
    epigraph font-size=\small,
    epigraph rule width=0.4pt,
    epigraph align=right,
    epigraph source align=right,
    epigraph text align=right,
    epigraph rule color=black,
    epigraph rule}
\newif\if@headertoprule
\newif\if@headerbottomrule
\cxset{
   chaptermark name color/.store in=\chaptermarknamecolor@cx,
   chaptermark title color/.store in=\chaptermarktitlecolor@cx,
   chaptermark title before/.store in=\chaptermarktitlebefore@cx,
   chaptermark after number/.store in=\chaptermarkafternumber@cx,
   chaptermark name/.store in=\chaptermarkname@cx,
   chaptermark numbering/.is choice,
   leftmark before/.store in=\leftmarkbefore@cx,
   leftmark after/.store in=\leftmarkafter@cx,
   rightmark before/.store in=\rightmarkbefore@cx,
   rightmark after/.store in=\rightmarkafter@cx,
   chaptermark numbering/none/.code=\def\chaptermarknumber{},
   sectionmark name/.is choice,
   sectionmark name/none/.code=\def\sectionmarkname@cx{},
   sectionmark name custom/.code=\def\sectionmarkname@cx{#1},
   sectionmark number/.is choice,
   sectionmark number/none/.code=\def\sectionmarknumber@cx{},
   sectionmark after number/.store in=\sectionmarkafternumber@cx,
   sectionmark name color/.store in=\sectionmarkcolor@cx,
   sectionmark title font/.store in=\sectionmarktitlefont@cx,
   sectionmark title color/.store in=\sectionmarktitlecolor@cx,
   sectionmark before title/.store in=\sectionmarkbeforetitle@cx,
   sectionmark after title/.store in=\sectionmarkaftertitle@cx,
   header offset even/.store in=\headeroffseteven@cx,
   header offset odd/.store in=\headeroffsetodd@cx,
  %
   header top rule/.is if=@headertoprule,
   header bottom rule/.is if=@headerbottomrule,
}
%    \end{macrocode}
%
%    \begin{macrocode}
\cxset{header offset even=0pt,
       header offset odd=0pt,
       rightmark before=,
       rightmark after=,
       chaptermark title before=,}
%    \end{macrocode}
%
% Set the pagestyles to a default
%
%    \begin{macrocode}
\cxset{pagestyle/.code=\pagestyle{#1}}
\cxset{pagestyle=plain}
%
%
\cxset{headings ruled-01/.style={pagestyle=headings,
          header style=headings,
          chaptermark name color=theblue,
          chaptermark after number={\thinspace:\space },
          chaptermark name=,
          chaptermark title color=black!80,
          leftmark before=\thepage\hfill, 
          leftmark after=,
          sectionmark name color=theblue,
          sectionmark title color=black!80,
          header offset even=0pt,
          header offset odd=0pt,
          header top rule=false,
          header bottom rule=true}}
%
\cxset{headings ruled-02/.style={pagestyle=headings,
          header style=headings,
          chaptermark name color=theblue,
          chaptermark after number=,
          chaptermark name=,%\@chapapp,
          chaptermark numbering=none,
          chaptermark title color=black!80,
          sectionmark name=none,
          sectionmark number=none,
          leftmark before=,
          leftmark after=\qquad\quad\thepage,
          rightmark before=\thepage,
          rightmark after=\hfill\hfill,
          sectionmark name color=theblue,
          sectionmark title color=black!80,
          sectionmark after title=,
          sectionmark after number=\qquad,
          header top rule=false,
          header bottom rule=true,
          header offset even=1.5cm,
          header offset odd=-1.5cm,
          header bottom rule=false}}
%
\cxset{%
          header style=headings,
          chaptermark name=,
          chaptermark name color=black,
          chaptermark after number={\thinspace:\space },
          chaptermark title color=black!80,
          sectionmark name color=black,
          sectionmark title color=black!80,
          sectionmark after title=,
          sectionmark after number,
          header top rule=false,
          header bottom rule=true} 
          
\newif\ifAJW@multisty \AJW@multistyfalse
\newcommand\copyrightline[1]{%
  \def\@copyrightline{#1}}

\edef\@copyrightline{\relax}

\newcommand\c@pyrightline[1]{%
  \gdef\@c@pyrightline{#1}}

\gdef\@c@pyrightline{%
  \vbox to 5.5\p@{\noindent
  \parbox[t]{\textwidth}{\normalfont\footnotesize\baselineskip 9\p@
  \@copyrightline
  }%
  \vss}%
}

\def\ps@plain{\leftskip\z@\let\@mkboth\@gobbletwo\vfuzz=5\p@
    \def\@oddhead{}%
    \def\@evenhead{}%
  \def\@oddfoot{\verbatimsize
    \vbox{\vspace{15pt}%
      \global\hoffset=0pc%
      \noindent\hbox to\textwidth{\mbox{}\hfill{\rm\thepage}}
      \makebox[\z@][l]{\@c@pyrightline}%
%     \noindent\hspace*{-9pc}\rule{37pc}{0.25pt}%
    }%
  }%
  \def\@evenfoot{\verbatimsize
    \vbox{\vspace{15pt}%
    \global\hoffset=6pc%
    \noindent\hbox to\textwidth{{\rmfamily\thepage}\hfill\mbox{}}
    \makebox[\z@][l]{\@c@pyrightline}%
%   \noindent\rule{37pc}{0.25pt}%
    }%
  }%
  \def\sectionmark##1{}%
  \def\subsectionmark##1{}%
 }
 
 
% For style 22 need 
\def\ps@verticalrule{\leftskip\z@\let\@mkboth\@gobbletwo\vfuzz=5\p@
    \def\@oddhead{}%
    \def\@evenhead{}%
  \def\@oddfoot{\verbatimsize
    \vbox{\vspace{15pt}%
      \global\hoffset=0pc%
      \noindent\hbox to\textwidth{\hbox to 0pt{\rule{1pt}{\textheight}\color{blue}\thepage}}
      \makebox[\z@][l]{\@c@pyrightline}%
%     \noindent\hspace*{-9pc}\rule{37pc}{0.25pt}%
    }%
  }%
  \def\@evenfoot{\verbatimsize
    \vbox{\vspace{15pt}%
    \global\hoffset=6pc%
    \noindent\hbox to\textwidth{{\color{blue}\rm\thepage}\hfill\makebox[0pt][l]{\rule{1pt}{30pt}}}
    \makebox[\z@][l]{\@c@pyrightline}%
%   \noindent\rule{37pc}{0.25pt}%
    }%
  }%
  \def\sectionmark##1{}%
  \def\subsectionmark##1{}%
 }
\def\ps@headings{%
 \let\@mkboth=\markboth
 \def\@evenfoot{}
  \def\@oddfoot {}
  \def\@evenhead{\verbatimsize
    \vbox{\global\hoffset=6pc\noindent
    \makebox[\z@][l]{\rm \thepage}%
      \it \strut\hfill\leftmark\hbox{}%\par\vbox to 13pt{}%
%    \noindent\rule{37pc}{0.25pt}%
    }%
  }%
  \def\@oddhead{\verbatimsize
    \vbox{\global\hoffset=0pc\noindent
    \mbox{}\it \strut\rightmark\hfill\hbox{}\makebox[\z@][r]{\rm
      \thepage}%\par\vbox to 13pt{}%
%    \noindent\hspace*{-9pc}\rule{37pc}{0.25pt}%
    }%
  }%
  \def\chaptermark##1{\markboth{##1}{##1}}
  \def\sectionmark##1{\markright{\ifnum \c@secnumdepth >\z@
    \thesection\enskip\fi ##1}}%
  \ifAJW@multisty
    \def\chaptermark##1{}
    \def\sectionmark##1{}
  \else
    \def\chaptermark##1{\markboth{##1}{##1}}
    \def\sectionmark##1{\markright{\ifnum \c@secnumdepth >\z@
      \thesection\hspace{0.5em}\fi ##1}}%
  \fi
}
%
% centered headings
\def\ps@centerheadings{%
 \let\@mkboth=\markboth
 \def\@evenfoot{}
  \def\@oddfoot {}
  \def\@evenhead{\verbatimsize
    \vbox{\global\hoffset=6pc\noindent
    \makebox[\z@][l]{\rm \thepage}%
      \it \strut\hfill\leftmark\hfill\hbox{}%\par\vbox to 13pt{}%
%    \noindent\rule{37pc}{0.25pt}%
    }%
  }%
  \def\@oddhead{\verbatimsize
    \vbox{\global\hoffset=0pc\noindent\hfill
    \mbox{}\it \strut\rightmark\hfill\hbox{}\makebox[\z@][r]{\rm
      \thepage}%\par\vbox to 13pt{}%
%    \noindent\hspace*{-9pc}\rule{37pc}{0.25pt}%
    }%
  }%
  \def\chaptermark##1{\markboth{##1}{##1}}
  \def\sectionmark##1{\markright{\ifnum \c@secnumdepth >\z@
    \thesection\enskip\fi ##1}}%
  \ifAJW@multisty
    \def\chaptermark##1{}
    \def\sectionmark##1{}
  \else
    \def\chaptermark##1{\markboth{##1}{##1}}
    \def\sectionmark##1{\markright{\ifnum \c@secnumdepth >\z@
      \thesection\hspace{0.5em}\fi ##1}}%
  \fi
}



\def\ps@chapterstyle{%
    \let\@oddfoot\@empty\let\@evenfoot\@empty
    \def\@evenhead{\thepage\hfil\slshape\leftmark}%
    \def\@oddhead{{\slshape\rightmark}\hfil\thepage}%
    \let\@mkboth\@gobbletwo
    \let\chaptermark\@gobble
    \let\sectionmark\@gobble}
%    \end{macrocode}
%
%
% Definition of 'myheadings' page style
%
%    \begin{macrocode}
\def\ps@myheadings{%
  \let\@mkboth=\@gobbletwo
  \def\@evenfoot{}
  \def\@oddfoot {}
  \def\@evenhead{\verbatimsize
    \vbox{\global\hoffset=6pc\noindent
    \makebox[\z@][l]{\rm \thepage}%
      \it \strut\hfill\leftmark\hbox{}%\par\vbox to 13pt{}%
%    \noindent\rule{37pc}{0.25pt}%
    }%
  }%
  \def\@oddhead{\verbatimsize
    \vbox{\global\hoffset=0pc\noindent
    \mbox{}\it \strut\rightmark\hfill\hbox{}\makebox[\z@][r]{\rm
      \thepage}%\par\vbox to 13pt{}%
%    \noindent\hspace*{-9pc}\rule{37pc}{0.25pt}%
    }%
  }%
%
  \def\chaptermark##1{}
  \def\sectionmark##1{}
  \def\subsectionmark##1{}}
%
% \section{Watermarks}

% Some special styles
%    \begin{macrocode}
\IfFileExists{changepage.sty}{\RequirePackage{changepage}}{}
\IfFileExists{rotating.sty}{\RequirePackage{rotating}}{}
%    \end{macrocode}
%
% \begin{macro}{\even@samplepage}
% \begin{macro}{\odd@samplepage}
%    \begin{macrocode}
\def\even@samplepage{%
 \begin{picture}(0,0)
   \put(\Xeven,\Yeven){\turnbox{90}{\Huge \textcolor{\watermark@textcolor}{\watermark@text}}}
\end{picture}
}
%% Define a macro to print SAMPLE PAGE IN THE MARGIN
\def\odd@samplepage{%
 \begin{picture}(0,0)
   \put(\Xodd,\Yodd){\turnbox{90}{\Huge \textcolor{\watermark@textcolor}{\watermark@text}}}
 \end{picture}
}
%    \end{macrocode}
% \end{macro}
% \end{macro}

% \begin{macro}{watermarktext}
%  Define the watermark words
%    \begin{macrocode}
\gdef\watermarktext#1{\gdef\watermark@text{\fontfamily{phv}\selectfont#1}}
\def\watermarktextcolor#1{\gdef\watermark@textcolor{#1}}
\watermarktext{SAMPLE PAGE}
\watermarktextcolor{black!50}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\def\ps@samplepage{\let\@mkboth\@gobbletwo
 \let\@oddhead\odd@samplepage\def\@oddfoot{\reset@font\hfil\thepage}
 \let\@evenhead\even@samplepage\def\@evenfoot{\reset@font\thepage\hfil}}
%
% We define two macros to position the watermark on the page
\def\Xodd{480}
\def\Xeven{-15}\def\Yeven{-810}
\def\Yeven{-\expandafter\strip@pt\textheight}
\let\Yodd\Yeven


\cxset{blank page text/.store in=\blankpagetext@cx{#1}}
\cxset{blank page text={}}

\def\cleardoublepage{\clearpage\if@twoside\ifodd\c@page\else
  \hbox{}
  \vspace*{\fill}
  \begin{center}
     \blankpagetext@cx      
  \end{center}
  \vspace{\fill}
  \thispagestyle{empty}
  \newpage
  \if@twocolumn\hbox{}\newpage\fi\fi\fi}
%    \end{macrocode}
%
% \section{Front Matter Commands}
% 
%	We define author commands for coverpages and
%	second pages. If they have been defined by the
%	author we do nothing, otherwise we provide some
%	defaults as examples.
% \begin{macro}{\coverpage}
%    \begin{macrocode}
\@ifundefined{coverpage}{%
  \newcommand\coverpage[3]{%
  \vspace*{2cm}
  \vbox{%
      \vspace*{-8\baselineskip} %-1
      \hskip-3.8cm\includegraphics[width=\paperwidth]{hine02.jpg}\par %hine-02
      \vspace*{1\baselineskip} %3
      \hbox to \hsize{%
         \Huge \hfill\hfill{\MakeUppercase{\bfseries  
         \textsf{WATER HAMMER}}}}%
      \vspace*{0.3cm}
      \hbox to \hsize{\Huge \hfill\hfill{\MakeUppercase{\bfseries   \textsf{ARRESTORS}}}}
      \vspace*{2\baselineskip}
      \hbox to \hsize{\huge \hfill\hfill\textsf{\hbox{#2}}}
      \vspace*{1.35cm}
      \hbox to \hsize{\huge \hfill\hfill\textsf{\hbox{#3}}}
}
}}{}
%    \end{macrocode}
% \end{macro}
% 
% 	\begin{macro}{\secondpage}
%	This macro typesets what a copyright page. It is not a general
%	command, but rather a command that you will need to redefine. It is included
%	here as an example and to typeset the second page of this publication.
%	\begin{macrocode}
\newcommand\secondpage{\clearpage\null\vfill\vfill
  \begin{minipage}[b]{0.9\textwidth}
  \includegraphics[width=3cm]{./images/zha.jpg}\par
  \raggedright
  \textit{Cover image: }
    The cover image shows Jo Bodeon, a back-roper in the mule room at 
    Chace Cotton Mill. Burlington, Vermont. This and other similar images 
    in this book were taken by Lewis W. Hine, in the period between 
    1908-1912. These images as well as social campaigns by many including 
    Hine, helped to formulate America's anti-child labour laws.
  \end{minipage}\par
  \vspace*{\baselineskip}
  \begin{minipage}[b]{0.9\textwidth}
  \RaggedRight
  \setlength{\parskip}{0.5\baselineskip}
  Copyright \copyright 2012  Dr Yiannis Lazarides\par
  Permission is granted to copy, distribute and\slash or modify this document 
  under the terms of the GNU Free Documentation License, version 1.2, with no 
  invariant sections, no front-cover texts, and no back-cover texts.\par
  A copy of the license is included in the appendix.\par
  This document is distributed in the hope that it will be useful, but without 
  any warranty; without even the implied warranty of merchantability or 
  fitness for a particular purpose.
  \end{minipage}
  \vspace*{2\baselineskip}
  \clearpage
}
%    \end{macrocode}
% \end{macro}
%
% \chapter{Table of Contents}
%
%	Most of the macros here re-write the LaTeX macros in a way that 
%	we can add appropriate hooks for styling. In writing this section
%	we had inspiration and used liberally code from Peter Wilson's 
%	\pkg{tocloft}., including the code for the image.
%
% \newcommand{\maxx}{120}       ^^A picture width
% \newcommand{\maxxm}{118}      ^^A \maxx - 2\
% \newcommand{\maxy}{55}        ^^A picture height
% \newcommand{\maxym}{53}       ^^A \maxy - 2
% \newcommand{\findent}{20}     ^^A indent
% \newcommand{\findentp}{22}    ^^A \findent + 2
% \newcommand{\fnumwidth}{10}   ^^A numwidth
% \newcommand{\ftocrmarg}{30}   ^^A \@tocrmarg
% \newcommand{\fpnumwidth}{20}  ^^A \@pnumwidth
% \newcommand{\fipn}{30}        ^^A \findent + \fnumwidth
% \newcommand{\frmarg}{90}      ^^A \maxx - \ftocrmarg
% \newcommand{\frnum}{100}      ^^A \maxx - \fpnumwidth
% \newcommand{\fyi}{10}         ^^A 1st y height
% \newcommand{\fyim}{8}         ^^A \fyi - 2
% \newcommand{\fyii}{20}        ^^A 2nd y height
% \newcommand{\fyiii}{25}       ^^A 3rd y height
% \newcommand{\fyiv}{30}        ^^A 4th y height
% \newcommand{\fyv}{40}         ^^A 5th y height
% \newcommand{\fyvp}{42}        ^^A \fyv + 2
% \newcommand{\flin}{4}         ^^A length of leader lines
% \newcommand{\frmargm}{89}     ^^A \frmarg (90) - a little bit
% 
% \providecommand{\bs}{\textbackslash}
% \begin{figure}
% \centering
% \setlength{\unitlength}{1mm}
% \begin{picture}(\maxx,\maxy)
%     ^^A side lines and linewidth
%   \put(0,0){\line(0,1){\maxy}}
%   \put(\maxx,0){\line(0,1){\maxy}}
%   \put(0,\maxy){\vector(1,0){\maxx}}
%   \put(2,\maxym){\makebox(0,0)[tl]{\texttt{\bs linewidth}}}
%     ^^A \@pnumwidth
%   \put(\maxx,\fyi){\vector(-1,0){\fpnumwidth}}
%   \put(\maxxm,\fyim){\makebox(0,0)[tr]{\texttt{\bs @pnumwidth}}}
%   \put(\frnum,\fyi){\line(0,1){\flin}}
%     ^^A \@tocrmarg
%   \put(\maxx,\fyv){\vector(-1,0){\ftocrmarg}}
%   \put(\maxxm,\fyvp){\makebox(0,0)[br]{\texttt{\bs @tocrmarg}}}
%   \put(\frmarg,\fyv){\line(0,-1){\flin}}
%     ^^A indent
%   \put(0,\fyv){\vector(1,0){\findent}}
%   \put(2,\fyvp){\makebox(0,0)[bl]{\textit{indent}}}
%   \put(\findent,\fyv){\line(0,-1){\flin}}
%     ^^A numwidth
%   \put(\findent,\fyv){\vector(1,0){\fnumwidth}}
%   \put(\findentp,\fyvp){\makebox(0,0)[bl]{\textit{numwidth}}}
%   \put(\fipn,\fyv){\line(0,-1){\flin}}
%     ^^A last title line
%   \put(\maxx,\fyii){\makebox(0,0)[br]{487}}
%   \put(\fipn,\fyii){title end}
%     ^^A second title line
%   \put(\fipn,\fyiii){continue\ldots}
%   \put(\frmarg,\fyiii){\makebox(0,0)[br]{\ldots title}}
%     ^^A first title line
%   \put(\findent,\fyiv){\textbf{3.5}}
%   \put(\fipn,\fyiv){Heading\ldots}
%   \put(\frmarg,\fyiv){\makebox(0,0)[br]{\ldots title}}
%     ^^A dotted leader
%   \multiput(\frmargm,\fyii)(-\flin,0){12}{.}
%   \multiput(\frmarg,\fyi)(-\flin,0){2}{\line(0,1){\flin}}
%   \put(\frmarg,\fyi){\vector(-1,0){\flin}}
%   \put(\frmarg,\fyi){\vector(1,0){0}}
%   \put(\frmarg,\fyim){\makebox(0,0)[tr]{\texttt{\bs @dotsep}}}
% 
% \end{picture}
% \setlength{\unitlength}{1pt}
% \caption{Layout of a ToC (LoF, LoT) entry} \label{fig:ltoc}
% \end{figure}
%
% \begin{command}{\quit@cx}
% \begin{macro}{\if@haschapter@cx}
% We will be using either chapter or section type headings for the ToC, etc.,
% so we need to know which of these the document class supports.
%    \begin{macrocode}
\newcommand{\quit@cx}{}
\newif\if@haschapter@cx\@haschapter@cxtrue
%    \end{macrocode}
% \end{macro}
% \end{command}
% \begin{macro}{\if@koma@cx}
% The \pkg{koma} classes have different defaults than the standard classes,
% so we need to know if a \pkg{koma} class has been loaded.
%    \begin{macrocode}
\newif\if@koma@cx  \@koma@cxfalse
\@ifclassloaded{scrartcl}{\@koma@cxtrue}{}
\@ifclassloaded{scrreprt}{\@koma@cxtrue}{}
\@ifclassloaded{scrbook}{\@koma@cxtrue}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\if@memoir@cx}
%    \begin{macrocode}
\newif\if@memoir@cx  \@memoir@cxfalse
\@ifclassloaded{memoir}{\@memoir@cxtrue}{}
%    \end{macrocode}
% \end{macro}
%
% Issue a warning if there are no recognised sectional divisions 
% and then skip the rest of the package code.
%    \begin{macrocode}
\@ifundefined{chapter}{%
  \@haschapter@cxfalse
  \@ifundefined{section}{%
    \PackageWarning{phd}%
      {I don't recognize any sectional divisions so I'll do very little and many things can break}
    \renewcommand{\quit@cx}{\endinput}
    }{\PackageInfo{phd}{The document has section divisions}}
  }{\@haschapter@cxtrue
    \PackageInfo{phd}{The document has chapter divisions}}
%    \end{macrocode}
% bailing out or continue.
%    \begin{macrocode}
\quit@cx
%    \end{macrocode}
%
% \begin{macro}{\settocpagestyle}
% \begin{macro}{\tocpagestyle@cx}
%	We define a user macro and to be used in keys
%   a pagestyle for the first page of the ToC.
%   The default is the |plain| pagestyle. CHECK THIS.
%    \begin{macrocode}
\newcommand{\settocpagestyle}[1]{%
  \def\tocpagestyle@cx{\thispagestyle{#1}}}
  \thispagestyle{plain}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\tocparskip@cx}
% The |\parskip| local to the ToC, etc., is set to the length |\tocparskip@cx|.
%
%    \begin{macrocode}
\newlength{\tocparskip@cx}
\setlength{\tocparskip@cx}{0pt}
%    \end{macrocode}
% \end{macro}
%
% 
% \begin{macro}{\tableofcontents}
%
%  This is a parameterised version of the default |\tableofcontents| command.
%  Each class has its own definition, but we have to cater for all classes
%  in one definition, hence some of the checks. The definition is
%  modified after all packages have been loaded. The normal LaTeX way is to use
% the chapter to set it in the book class and the section in others. Here we opted to
% leave it up to the user.
%	Consider more checks here
%
% \begin{macro}{tocstart@cx}
% \begin{macro}{tocfinish@cx}
%    \begin{macrocode}
\def\tocstart@cx{}
\def\tocfinish@cx{}
 \renewcommand{\tableofcontents}{%
    \tocstart@cx
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%     Ensure that any previous paragraph has been finished. 
%	  within a group set
%     the local paragraphing style and typeset the title. \label{code:tableofcontents}
%    \begin{macrocode}
    \par
    \begingroup
      \parindent\z@ \parskip\tocparskip@cx
      \maketoctitle@cx
%    \end{macrocode}
%
% Finally, read the \docfile{.toc} file and finish up.
%    \begin{macrocode}
      \@starttoc{toc}%
    \endgroup
    \tocfinish@cx
}%
%    \end{macrocode}
%
% \end{macro}
%
%    \begin{macrocode}
\newif\if@lowercase
\@lowercasetrue
\cxset{toc name/.code = \def\contentsname{#1},
          toc name before/.store in = \contentsnamebefore@cx,
          toc name after/.store in = \contentsnameafter@cx,
          toc name font-size/.store in = \contentsnamefontsize@cx,
          toc name font-weight/.store in = \contentsnamefontweight@cx,
          toc name font-family/.store in = \contentsnamefontfamily@cx,
          toc name font-shape/.store in = \contentsnamefontshape@cx,
          toc name color/.store in = \tocnamecolor@cx,
          toc name afterskip/.store in=\tocnameafterskip@cx,
          toc name align/.is choice,
          toc name align/center/.code=\def\startalign@cx{\bgroup\centering}\def\endalign@cx{\par\egroup},
          toc name align/right/.code=\def\startalign@cx{\flushright}\def\endalign@cx{\endflushright},
          toc name align/left/.code=\def\startalign@cx{\@empty}\def\endalign@cx{\@empty},
          toc name align/none/.code=\def\startalign@cx{\@empty}\def\endalign@cx{\@empty},
          toc name indent/.store in=\tocnameindent@cx,
          toc name case/.is choice,
          toc name case/lower/.code=\def\tocnamecase@cx{\@lowercasetrue
                             \if@lowercase\expandafter\MakeTextLowercase\fi},
          toc name case/upper/.code=\def\tocnamecase@cx{\@lowercasefalse
                             \if@lowercase\else\expandafter\MakeTextUppercase \fi},
          toc name case/none/.code=\def\tocnamecase@cx{\@empty},
     %    \end{macrocode}      
%
% The contents page is enabled to have its own pagestyle. We default this later on
% to plain.
% This needs also a bit of a thought, if we require to enable it further down the line.
%
%    \begin{macrocode}
      toc pagestyle/.code=\gdef\contentspagestyle@cx{\thispagestyle{#1}},
    }
%
\cxset{toc name= CONTENTS,
       toc name before = ,
       toc name after =, 
       toc name color = sweet,
       toc name font-weight=bold,
       toc name font-family=sffamily,
       toc name font-shape=upshape,
       toc name font-size=LARGE,
       toc name afterskip=10pt, %set as 40pt in LaTeX
       toc name after=\par,
       toc name align=right,
       toc name indent=\hspace*{4cm},
       toc name case=upper,
       toc pagestyle=plain,
  }%
%    \end{macrocode}
%
% \begin{macro}{\maketoctitle@cx}
%	\cs{maketitle@cx} is the typeset the heading that goes on top of the |ToC| page.
%	We cater for a few hooks, so the code is rather longish. At this point we can also 
%    divert to any custom design. TODO DEFAULT TO PARAMS FROM SECTIONING
%
%    \begin{macrocode}
\newcommand{\maketoctitle@cx}{%
  \addpenalty\@secpenalty
  \if@haschapter@cx
    \vspace*{10pt}
    \pdfbookmark[0]{\contentsname}{toc}%EXPERIMENTAL
  \else
    \vspace{10pt}
  \fi
  \markboth{\contentsname}{\contentsname}%
  \contentspagestyle@cx
  {\interlinepenalty\@M
  {\contentsnamebefore@cx
     \setfont@cx{\contentsnamefontweight@cx}%
    {\contentsnamefontfamily@cx}{\contentsnamefontsize@cx}%
    {\contentsnamefontshape@cx}%
     \color{\tocnamecolor@cx}%
    \startalign@cx%
         \tocnameindent@cx \tocnamecase@cx%
         \contentsname
     \endalign@cx}%
     \contentsnameafter@cx%
    \par\nobreak
  \vskip\tocnameafterskip@cx\relax
  \@afterheading}%
 }%
 \let\sampletoctitle\maketoctitle@cx
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\setpnumwidth@cx}
% \begin{macro}{\setocmarg@cx}
%  Users commands for setting |\@pnumwidth| and |\@tocrmarg|.
%    \begin{macrocode}
\newcommand{\setpnumwidth@cx}[1]{\renewcommand{\@pnumwidth}{#1}}
\newcommand{\settocmarg@cx}[1]{\renewcommand{\@tocrmarg}{#1}}
\setpnumwidth@cx{25pt}
\settocmarg@cx{20pt}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \section{Styling the dot leaders}
%  	Here we will allow the user to either have dotfills and
%    be	able to specify the type and spacing of the dots.
%	We also provide a key to disable dotfills.
%
% \begin{macro}{\dot@cx}
% \begin{macro}{\dotfill@cx}
%   In the default |ToC|, a dotted line can be used to provide a leader between
%   a title and the page number. As Peter Wilson wrote and I found at my
%   distress the definition of the leader is buried
%   in the \cs{@dottedtocline} command. The 
%	\cs{dotfill@cx}\marg{sep}
%   command provides a parameterised version of the leader code, where
%   \marg{sep} is the seperation between the dots in mu units.
%   The symbol used for the `dots' in the leader is given by the 
%   value  of |\dot@cx|. 
% 
%    \begin{macrocode}
\newcommand{\dot@cx}{.}
\newcommand{\dotfill@cx}[1]{%
  \leaders\hbox{$\m@th\mkern #1 mu\hbox{\dot@cx}\mkern #1 mu$}\hfill}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\def\nodotfill@cx{}
\cxset{toc dotfill/.is choice,
       toc dotfill/none/.code = \nodotfill@cx,
       toc dotfill symbol/.code= \renewcommand{\dot@cx}{#1},
       toc dotfill sep/.store in=\dotfillsep@cx,
}
\cxset{toc dotfill symbol=.,
       toc dotfill sep=4.5}
%    \end{macrocode}
%
% \begin{macro}{\parfillskip@CX}
% The |\l@kind| commands modify (locally) the value of |\parfillskip|.
% |\parfillskip@CX| is a copy of the default \texbook\ 
% |\parfillskip| definition.
%    \begin{macrocode}
\newcommand{\parfillskip@CX}{\parfillskip=0pt plus1fil}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\numberline}
% The purpose of the |\numberline{|\meta{secnum}|}| command is to typeset
% \meta{secnum} left justified in a box of width |\@tempdima|. I redefine
% it to add three additional parameters, namely |\tocnumberbefore@cx|, 
% |\@cftasnum| and |\@cftasnumb| 
% (see \docfile{ltsect.dtx} for the original
% definition).
%    \begin{macrocode}
\renewcommand{\numberline}[1]{% 
   \hb@xt@\@tempdima{\tocnumberbefore@cx #1\@cftasnum\hfil}\@cftasnumb}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\tocnumberbefore@cx}
% \begin{macro}{\@cftasnum}
% \begin{macro}{\@cftasnumb}
%
% Originally these were not defined but were |\let| to appropriate commands
% in the |\l@...| commands, but they
% have to be defined in case something unexpected 
% calls |\numberline|,
% for example through use of the \Lpack{float} package.\footnote{This bug WAS NOTED IN TOCLOF
% was discovered by Andrew Thurber when using the \Lpack{tocloft} and
% \Lpack{algorithm} packages together.}
%
%    \begin{macrocode}
\newcommand{\tocnumberbefore@cx}{[}
\newcommand{\@cftasnum}{}
\newcommand{\@cftasnumb}{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \section{Styling Part in the Toc}

% \begin{macro}{\l@part}
% \begin{macro}{\if@dopart}
%  |\l@part{|\meta{title}|}{|\meta{page}|}| typesets the ToC entry for
% a |part| heading. It is a parameterised copy of the default |\l@part|
% (see \docfile{classes.dtx} for the original definition and the code
%  below for |\l@part| for an explanation of most of this
%  code). 
%
% By default, Parts
% (and Chapters) do not have dotted leaders. This package provides
% for all entries to have the ability to have dotted leaders, as some styles treat the part in a similar manner.
%
% In article class, Part level is 0 not -1 and hence the conditional below.
%	
%	We start by defining a number of keys and macros to store parameters.
%	An entry to the ToC consists always of a section number, the title and 
%	a page number. For each part there are different styling keys.
%
%	\begin{macro}{\tocpartindent@cx}	 
%    \begin{macrocode}
\cxset{toc part indent/.store in = \tocpartindent@cx,
       toc part numwidth/.store in = \tocpartnumwidth@cx,
       toc part font-size/.store in =\tocpartfontsize@cx,
       toc part before number/.store in = \tocpartbeforenumber@cx,
       toc part after number/.store in=\partafterpnum@cx,
       toc part beforeskip/.store in = \tocpartbeforeskip@cx,
       toc part page font-size/.store in=\tocpartpagefontsize@cx
}



\cxset{toc part beforeskip = 2.25em \@plus\p@,
       toc part indent=-50pt,
       toc part numwidth=0em,
       toc part after number=:,
       toc part font-size={\color{teal}\large\bfseries\sffamily},
       toc part before number={\kern1.5pt},
       toc part page font-size=\bfseries
       }
  %    \end{macrocode}
% \end{macro}
%
% We need first to define conditionals to switch from
% printing the part or not.
%
%    \begin{macrocode}
\newif\if@dopart@cx
\newif\if@haspart@cx
  \@ifundefined{part}{\@haspart@cxfalse}{\@haspart@cxtrue}
\if@haspart@cx
%    \end{macrocode}
%
% We now renew the command, in order to allow for hooks. 
% This might be cloberred by hyperref if too many changes
% are carried out. It takes two parameters (one for the caption and another for the title if different).
% 
%    \begin{macrocode}
\renewcommand*{\l@part}[2]{%
  \@dopart@cxfalse
  \ifnum \c@tocdepth >-2\relax
    \if@haschapter@cx
      \@dopart@cxtrue
    \fi
    \ifnum \c@tocdepth >\m@ne
      \if@haschapter@cx\else
        \@dopart@cxtrue
      \fi
    \fi
  \fi
%    \end{macrocode}
%
% The code needs to distinguish between a chapter or a section
% level and adds the appropriate penalties.
% 
%    \begin{macrocode}
%
  \if@dopart@cx
    \if@haschapter@cx
      \addpenalty{-\@highpenalty}%
    \else
      \addpenalty\@secpenalty
    \fi
%    \end{macrocode}
%
%	We add vertical spacing before the section if
%	required.
%    \begin{macrocode}
    \addvspace{\tocpartbeforeskip@cx}%
    \begingroup
      {\leftskip \tocpartindent@cx\relax
       \rightskip \@tocrmarg % need to check this for conflics\@tocrmarg
       \parfillskip -\rightskip
       \parindent \tocpartindent@cx\relax
       \@afterindenttrue
       \interlinepenalty\@M
       \leavevmode    
       \@tempdima \tocpartnumwidth@cx\relax
%       \let\tocnumberbefore@cx \cftpartpresnum
%       \let\@cftasnum \cftpartaftersnum
%       \let\@cftasnumb \cftpartaftersnumb
       \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
       %
       {\tocpartfontsize@cx 
       \tocpartbeforenumber@cx #1}%
       \partfillnum@cx{#2}}%
      \nobreak
      \if@haschapter@cx
        \global\@nobreaktrue
        \everypar{\global\@nobreakfalse\everypar{}}%
 	   \fi
    \endgroup
  \fi}
\fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\beforepartskip@cx}
% \begin{macro}{\partnumwidth@cx}
% \begin{macro}{\cftpartfont}
% \begin{macro}{\partpresnum@cx}
% \begin{macro}{\partaftersnum@cx}
% \begin{macro}{\partaftersnumb@cx}
% \begin{macro}{\partleader@cx}
% \begin{macro}{\partdotsep@cx}
% \begin{macro}{\partpagefont@cx}
% \begin{macro}{\partafterpnum@cx}
% \begin{macro}{\partindent@cx}
% \begin{macro}{\partfillnum@cx}
%  These are the user commands to control the typesetting of Part entries.
%  They are initialised to give the standard appearance.
%    \begin{macrocode}
\if@haspart@cx
%  \newlength{\beforepartskip@cx}
%    \setlength{\beforepartskip@cx}{2.25em \@plus\p@}
%  \newlength{\partnumwidth@cx}
%    \setlength{\partnumwidth@cx}{0em}
%  \newcommand{\cftpartfont}{\large\bfseries}
  \newcommand{\partpresnum@cx}{}
  \newcommand{\partaftersnum@cx}{..}
  % defined in parameters \newcommand{\partaftersnumb@cx}{}
%
% 
  \newcommand{\partleader@cx}{\large\bfseries\dotfill@cx{\partdotsep@cx}}
%
  \def\cftnodots{10000}
  \newcommand{\partdotsep@cx}{\cftnodots}
  \newcommand{\cftpartpagefont}{\large\bfseries}
  %\newcommand{\partafterpnum@cx}{}
  \newlength{\partindent@cx}
  \setlength{\partindent@cx}{0em}
  \newcommand{\partfillnum@cx}[1]{%
    {\partleader@cx}%
    {\hb@xt@\@pnumwidth{\hss {%
       \tocpartpagefontsize@cx #1}}}\partafterpnum@cx\par}%
%    \end{macrocode}
% \Lpack{koma} classes use some different settings.
%   \begin{macrocode}
  \if@koma@cx
    %\setlength{\partnumwidth@cx}{2em}
    %\renewcommand{\cftpartfont}{\sectfont\large}
    %\renewcommand{\cftpartpagefont}{\sectfont\large}
  \fi
\fi

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%


% \section{Handling of chapters in ToC.}
%
% \begin{macro}{\beforetocchapterskip@cx}
% \begin{macro}{\cftchapindent}
% \begin{macro}{\cftchapnumwidth}
% \begin{macro}{\cftchapfont}
% \begin{macro}{\cftchappresnum}
% \begin{macro}{\cftchapaftersnum}
% \begin{macro}{\cftchapaftersnumb}
% \begin{macro}{\cftchapleader}
% \begin{macro}{\cftchapdotsep}
% \begin{macro}{\cftchappagefont}
% \begin{macro}{\cftchapafterpnum}
% \begin{macro}{\cftchapfillnum}
%  These are the user commands to control the typesetting of Chapter entries.
%  They are initialised to give the standard appearance.
%    \begin{macrocode}
\@debugfalse
\if@debug
      \fboxsep1pt
      \fboxrule-1pt
\else
      \fboxsep0pt
      \fboxrule0pt
\fi
\if@haschapter@cx
   \newlength{\beforetocchapterskip@cx}
   \setlength{\beforetocchapterskip@cx}{1.0em \@plus\p@}
  \newlength{\cftchapindent}
  \setlength{\cftchapindent}{0em}
  \newlength{\cftchapnumwidth}\setlength{\cftchapnumwidth}{1.5em}
  \newcommand{\cftchapfont}{\bfseries}
  \newcommand{\cftchappresnum}{}
  \newcommand{\cftchapaftersnum}{}
  \newcommand{\cftchapaftersnumb}{}
  \newcommand{\cftchapleader}{\bfseries\dotfill@cx{\cftchapdotsep}}
%    \end{macrocode}
%
%	The following code determines the spacing of the dots.
%    \begin{macrocode}
  \newcommand{\cftchapdotsep}{\chapterdotsep@cx} 
  \newcommand{\cftchappagefont}{\sffamily\bfseries\color{teal}}
  \newcommand{\cftchapafterpnum}{}
%
 %    \end{macrocode}
%    \begin{macrocode}
%
% \pkgname{koma} classes have different chapter settings.
%    \begin{macrocode}
%  \if@cftkoma
%    \renewcommand{\cftchapfont}{\sectfont}
%  \fi
\fi

%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{l@chapter}
%
% \begin{macro}{\l@chapter}
%  \cs{l@chapter}\marg{title}\marg{page} typesets the ToC entry for
% a |chapter| heading. It is a parameterised copy of the default |\l@chapter|
%  (see \docfile{classes.dtx} for the original definition). This only applies
%  to chaptered documents.
% \begin{macro}{\chapternumberline}
%  \#1  number
% \#2  title
% \#3 images <-- consider removing or add as hook
%    \begin{macrocode}
\newcommand{\chapternumberline}[3]{% 
\if@debug
   \fboxsep1pt
   \fboxrule-1pt
\else
   \fboxsep0pt
   \fboxrule0pt
\fi
 \hrule width\textwidth height1pt depth0pt\relax 
  \hbox to 0pt{%
    \hspace*{0cm}%
    \vbox to 0pt{\vspace*{.9cm}%
       \parbox[t]{2cm}{%
%         \ifx#3\empty\else
%            \includegraphics[width=1.5cm]{#3}%
%         \fi
         }}}%
 % Typesets the Chapter  number   
 % and chapter name     
  \hspace*{0cm}%
   \fbox{\parbox[t]{2.5cm}{%
      \fbox{\chaptername
      \kern0.5em #1}%
  }}%
  \@@par  
  %   Typeset the chapter title width
\fbox{\parbox[t]{\tocchaptertitlewidth@cx}{%
      \bgroup
         \raggedright%
         \language-1
         \MakeTextUppercase{#2}%
        \par
        \egroup
       }}%
  }%
% 
% TODO ADD FONT DIRECTIVES FOR PAGE 
 \newcommand{\typesettocchapterpage@cx}[1]{%
 \if@debug
   \fboxsep1pt
   \fboxrule-1pt
\else
   \fboxsep0pt
   \fboxrule0pt
\fi
      \hfill\fbox{\parbox[b]{3em}{%
       \hfill%
       #1}}%
      \par\addvspace{0.5\baselineskip}
     %  \hrule \@width\textwidth \@height1pt \@depth0pt\relax 
      }% 
%    \end{macrocode}  
% \end{macro}
%    \begin{macrocode}
\cxset{toc chapter beforeskip/.store in=\tocchapterbeforeskip@cx,
          toc chapter afterskip/.store in=\tocafterchapterskip@cx,
          toc chapter indent/.store in = \tocchapterindent@cx,
          toc chapter dotsep/.store in = \chapterdotsep@cx,
          toc chapter no dots/.code=\def\chapterdotsep@cx{10000},
          toc chapter numberwidth/.store in = \tocchapternumberwidth@cx,
          toc chapter font/.store in=\tocchapterfont@cx,
          toc chapter title width/.store in=\tocchaptertitlewidth@cx}
%
%

\cxset{toc chapter beforeskip =10pt,
          toc chapter indent= 0pt,
          toc chapter dotsep=4.5,
          toc chapter no dots,
          toc  chapter numberwidth=0pt,
          toc chapter font= \bfseries\sffamily\large\color{sweet},
          toc chapter title width=0.8\textwidth}
%
% The l@chapter takes two parameters and is used to typeset
% the c
\if@haschapter@cx
  \renewcommand*{\l@chapter}[2]{%
     \ifnum \c@tocdepth >\m@ne
       \addpenalty{-\@highpenalty}%
       \vskip \tocchapterbeforeskip@cx\relax 
        {%\leftskip\tocchapterindent@cx\relax
        %\rightskip \@tocrmarg
        %\parfillskip -\rightskip
         \parindent \tocchapterindent@cx\relax%
         \@afterindenttrue
        %\interlinepenalty\@M
        \leavevmode
        %\@tempdima \tocchapternumberwidth@cx\relax
        %\let\tocnumberbefore@cx \cftchappresnum
        %\let\@cftasnum \cftchapaftersnum
        %\let\@cftasnumb \cftchapaftersnumb
        %\advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
        {\tocchapterfont@cx#1}\nobreak
         \typesettocchapterpage@cx{#2}}%
    \fi}%
\fi
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\sampletocchapter}
% We define a macro for mocking sample toc chapters for the documentation
% 
%    \begin{macrocode}
\let\sampletocchapter\l@chapter
%    \end{macrocode}
% \end{macro}
%
% \section{ToC section styling}
%
%  |\l@section{|\meta{title}|}{|\meta{page}|}| typesets the ToC entry for
% a |section| heading. It is a parameterised copy of the default |\l@section|
% (see \docfile{classes.dtx} for the original definition). 
% 	We start by defining all our parameters and variables.
%
%    \begin{macrocode}
\renewcommand{\numberline}[1]{%
    \hb@xt@\@tempdima{#1\hfil}} %#1
 % 
%  
\cxset{toc section beforeskip/.store in=\tocsectionbeforeskip@cx,
          toc section beforeskip/.default={0pt plus.2pt},
          toc section indent/.store in=\tocsectionindent@cx,
%      fonts for title &num
       toc section font-size/.store in=\tocsectionfontsize@cx, 
       toc section font-family/.store in=\tocsectionfontfamily@cx, 
       toc section font-shape/.store in=\tocsectionfontshape@cx, 
       toc section font-weight/.store in=\tocsectionfontweight@cx, 
       toc section color/.store in=\tocsectioncolor@cx,
       toc section numwidth/.store in=\tocsectionnumwidth@cx,
%	  fonts etc for page number
       toc section page font-size/.store in=\tocsectionpagefontsize@cx,
       toc section page font-family/.store in=\tocsectionpagefontfamily@cx,
       toc section page font-shape/.store in=\tocsectionpagefontshape@cx,
       toc section page font-weight/.store in=\tocsectionpagefonteight@cx,
       toc section page color/.store in=\tocsectionpagecolor@cx,
%      leaders
	   toc section dotsep/.store in = \tocsecdotsep@cx,
%      before and after page number
       toc section page before/.store in=\tocsectionpagebefore@cx,
       toc section page after/.store in=\tocsectionpageafter@cx,
}
%
\cxset{%
       toc section beforeskip=\z@ \@plus.2\p@,
       toc section beforeskip,
       toc section indent=0em,
       toc section font-family= sffamily,
       toc section font-weight = mdseries,
       toc section font-shape = upshape,
       toc section color= sweet,
       toc section font-size=,
       toc section numwidth = 4.2em,
       toc section page font-size=,
       toc section page font-shape= upshape,  
       toc section page font-weight=, 
       toc section page font-family= sffamily,
       toc section page color = sweet, 
       toc section page before =,% \{,
       toc section page after =,% \},
       toc section dotsep = 2.7,
}
%    \end{macrocode}
%
%  
% \begin{macro}{\tocsectionpagefont@cx}
%    For convenience we define font setting commands for
%    the page number. We use \cs{setfont@cx}, which we have
%	defined earlier.
%  
%    \begin{macrocode}
\newcommand\tocsectionpagefont@cx{%
	\setfont@cx{\tocsectionpagefonteight@cx}%
       {\tocsectionpagefontfamily@cx}{\tocsectionpagefontsize@cx}%
       {\tocsectionpagefontshape@cx}\color{\tocsectionpagecolor@cx}
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\l@section} 
% 	This macro is called when the \cs{tableofcontents}
%	is read from the |.toc| file and it typesets
%	the title and the page number. Note this is also
% 
%    \#1 section title
%    \#2 page number
%      
%    \begin{macrocode}
\renewcommand*{\l@section}[2]{%
  \ifnum \c@tocdepth >\z@
    \if@haschapter@cx
      \vskip \tocsectionbeforeskip@cx
    \else
      \addpenalty \@secpenalty
      \addvspace{\tocsectionbeforeskip@cx}%
    \fi
    {\leftskip \tocsectionindent@cx\relax
     \rightskip \@tocrmarg
     \parfillskip -\rightskip
     \parindent \tocsectionindent@cx\relax\@afterindenttrue
     \interlinepenalty\@M
     \leavevmode
     \@tempdima \tocsectionnumwidth@cx\relax
     \let\tocnumberbefore@cx \cftsecpresnum
     \let\@cftasnum \cftsecaftersnum
     \let\@cftasnumb \cftsecaftersnumb
     \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
%    \end{macrocode}
%
%	We are now ready to print out the toc section title,
%	we set the font information then typeset the title.
%	The dot leaders are typeset by calling the 
%	macro \cs{sectionfillnum}
%
%    \begin{macrocode}
     {%
      \setfont@cx{\tocsectionfontweight@cx}%
        {\tocsectionfontfamily@cx}{\tocsectionfontsize@cx}%
        {\tocsectionfontshape@cx}%
        \color{\tocsectioncolor@cx}%
      #1}\nobreak
%    \end{macrocode}
%	We are now ready to typeset the leaders and the page number. 
%    We then pass \#2 to the \cs{tocsectionfillnum} which 
%	does the typesetting.
%    \begin{macrocode}
      \tocsectionfillnum@cx{#2}}%
  \fi}
%    \end{macrocode}
% \end{macro}
%
%    These are the user commands to control the typesetting 
%	 of Section entries.
%    They are initialised to give the standard appearance.
%	 These are hooks to \cs{numberline}.
%    \begin{macrocode}
\newcommand{\cftsecpresnum}{}
\newcommand{\cftsecaftersnum}{}
\newcommand{\cftsecaftersnumb}{}
\newcommand{\tocsectionleader@cx}  {\normalfont\dotfill@cx{\tocsecdotsep@cx}}
%\newcommand{\cftsecdotsep}{\cftdotsep}
%    \end{macrocode}
%    We can now define the command \cmd{\tocsectionfillnum@cx}. 
%    will print the 
%	leaders if any and the page number \#1. 
%    \begin{macrocode}
\newcommand{\tocsectionfillnum@cx}[1]{%
  {\tocsectionleader@cx}\nobreak
  \hb@xt@\@pnumwidth{\hfil\tocsectionpagefont@cx
   \tocsectionpagebefore@cx #1}%
   \tocsectionpageafter@cx\par}%
%    \end{macrocode}
%
%
% \section{Toc subsection styling}
%
% \begin{macro}{\l@subsection}
%  |\l@subsection{|\meta{title}|}{|\meta{page}|}| typesets the ToC entry for
% a |section| heading. It is a parameterised copy of the default |\l@section|
% (see \docfile{classes.dtx} for the original definition). 
% 	We start by defining all our parameters and variables.
%
%    \begin{macrocode}
\newif\if@lowercasesubsection
\cxset{toc subsection beforeskip/.store in=\tocsubsectionbeforeskip@cx,
       toc subsection indent/.store in=\tocsubsectionindent@cx,
%      fonts for title &num
       toc subsection font-size/.store in=\tocsubsectionfontsize@cx, 
       toc subsection font-family/.store in=\tocsubsectionfontfamily@cx, 
       toc subsection font-shape/.store in=\tocsubsectionfontshape@cx, 
       toc subsection font-weight/.store in=\tocsubsectionfontweight@cx, 
       toc subsection color/.store in=\tocsubsectioncolor@cx,
toc subsection case/.is choice,
       toc subsection case/lower/.code=\def\tocsubsectioncase@cx{\@lowercasesubsectiontrue
                             \if@lowercasesubsection\expandafter\MakeTextLowercase\fi},
       toc subsection case/upper/.code=\def\tocsubsectioncase@cx{\@lowercasesubsectionfalse
                    \if@lowercasesubsection\else\expandafter\MakeTextUppercase \fi},
       toc subsection case/none/.code=\def\tocsubsectioncase@cx{\@empty},
       toc subsection numwidth/.store in=\tocsubsectionnumwidth@cx,
%	  fonts etc for page number
       toc subsection page font-size/.store in=\tocsubsectionpagefontsize@cx,
       toc subsection page font-family/.store in=\tocsubsectionpagefontfamily@cx,
       toc subsection page font-shape/.store in=\tocsubsectionpagefontshape@cx,
       toc subsection page font-weight/.store in=\tocsubsectionpagefonteight@cx,
       toc subsection page color/.store in=\tocsubsectionpagecolor@cx,
%      leaders
	   toc subsection dotsep/.store in = \tocsubsecdotsep@cx,
%      before and after page number
       toc subsection page before/.store in=\tocsubsectionpagebefore@cx,
       toc subsection page after/.store in=\tocsubsectionpageafter@cx,
}
%
\cxset{toc subsection beforeskip=\z@ \@plus.2\p@,
       toc subsection indent=0em,
       toc subsection font-family= sffamily,
       toc subsection font-weight = mdseries,
       toc subsection font-shape = upshape,
       toc subsection color= sweet,
       toc subsection font-size=,
       toc subsection case = none,
       toc subsection numwidth = 4.2em,
       toc subsection page font-size=,
       toc subsection page font-shape= upshape,  
       toc subsection page font-weight=, 
       toc subsection page font-family= sffamily,
       toc subsection page color = sweet, 
       toc subsection page before =,% \{,
       toc subsection page after =,% \},
       toc subsection dotsep = 2.7,
}%
%    \end{macrocode}
%
%    For convenience we define font setting commands for
%    the page number. We use \cs{setfont@cx}, which we have
%	defined earlier.
%    
%    \begin{macrocode}
\newcommand\tocsubsectionpagefont@cx{%
	\setfont@cx{\tocsubsectionpagefonteight@cx}%
       {\tocsubsectionpagefontfamily@cx}{\tocsubsectionpagefontsize@cx}%
       {\tocsubsectionpagefontshape@cx}\color{\tocsubsectionpagecolor@cx}
}%
%        
%
\renewcommand*{\l@subsection}[2]{%
  \ifnum \c@tocdepth >\z@
    \if@haschapter@cx
      \vskip \tocsubsectionbeforeskip@cx
    \else
      \addpenalty \@secpenalty
      \addvspace{\tocsubsectionbeforeskip@cx}%
    \fi
    {\leftskip \tocsubsectionindent@cx\relax
     \rightskip \@tocrmarg
     \parfillskip -\rightskip
     \parindent \tocsubsectionindent@cx\relax\@afterindenttrue
     \interlinepenalty\@M
     \leavevmode
     \@tempdima \tocsubsectionnumwidth@cx\relax
     \let\tocnumberbefore@cx \cftsecpresnum
     \let\@cftasnum \cftsecaftersnum
     \let\@cftasnumb \cftsecaftersnumb
     \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
%    \end{macrocode}
%
%	We are now ready to print out the toc subsection title,
%	we set the font information then typeset the title.
%	The dot leaders are typeset by calling the macro \cs{sectionfillnum}
%
%    \begin{macrocode}
     {%
      \setfont@cx{\tocsubsectionfontweight@cx}%
        {\tocsubsectionfontfamily@cx}{\tocsubsectionfontsize@cx}%
        {\tocsubsectionfontshape@cx}%
        \color{\tocsubsectioncolor@cx}%
      \tocsubsectioncase@cx#1}\nobreak
%    \end{macrocode}
%	We are now ready to typeset the leaders and the page number. 
%    We then pass \#2 to the \cs{tocsectionfillnum} which 
%	does the typesetting.
%    \begin{macrocode}
      \tocsubsectionfillnum{#2}}%
  \fi}
%    \end{macrocode}
% \end{macro}
%
%    These are the user commands to control the typesetting of Section entries.
%    They are initialised to give the standard appearance.
%    \begin{macrocode}
% hooks to |\numberline|
\renewcommand{\cftsecpresnum}{.}
\renewcommand{\cftsecaftersnum}{..}
\renewcommand{\cftsecaftersnumb}{...}
\newcommand{\tocsubsectionleader}{\normalfont\dotfill@cx{\tocsubsecdotsep@cx}}
%\newcommand{\cftsecdotsep}{\cftdotsep}
%    \end{macrocode}
%    We can now define the command \cmd{\tocsectionfillnum}. It will print the 
%	leaders if any and the page number \#1. TODO IS par necessary??
%    \begin{macrocode}
\newcommand{\tocsubsectionfillnum}[1]{%
  {\tocsubsectionleader}\nobreak
  \hb@xt@\@pnumwidth{\hfil\tocsubsectionpagefont@cx
   \tocsubsectionpagebefore@cx #1}%
   \tocsubsectionpageafter@cx\par}%
%    \end{macrocode}
%
% \section{Toc subsubsection styling}
%
% \begin{macro}{\l@subsubsection}
%  |\l@subsubsection{|\meta{title}|}{|\meta{page}|}| typesets the ToC entry for
% a |subsubsection| heading. It is a parameterised copy of the default |\l@subsubsection|
%	We start by defining all our parameters and variables.
%
%    \begin{macrocode}
\newif\if@lowercasesubsubsection
\cxset{toc subsubsection beforeskip/.store in=\tocsubsubsectionbeforeskip@cx,
       toc subsubsection indent/.store in=\tocsubsubsectionindent@cx,
%      fonts for title &num
       toc subsubsection font-size/.store in=\tocsubsubsectionfontsize@cx, 
       toc subsubsection font-family/.store in=\tocsubsubsectionfontfamily@cx, 
       toc subsubsection font-shape/.store in=\tocsubsubsectionfontshape@cx, 
       toc subsubsection font-weight/.store in=\tocsubsubsectionfontweight@cx, 
       toc subsubsection color/.store in=\tocsubsubsectioncolor@cx,
toc subsubsection case/.is choice,
       toc subsubsection case/lower/.code=\def\tocsubsubsectioncase@cx{\@lowercasesubsubsectiontrue
                             \if@lowercasesubsubsection\expandafter\MakeTextLowercase\fi},
       toc subsubsection case/upper/.code=\def\tocsubsubsectioncase@cx{\@lowercasesubsubsectionfalse
                    \if@lowercasesubsubsection\else\expandafter\MakeTextUppercase \fi},
       toc subsubsection case/none/.code=\def\tocsubsubsectioncase@cx{\@empty},
       toc subsubsection numwidth/.store in=\tocsubsubsectionnumwidth@cx,
%	  fonts etc for page number
       toc subsubsection page font-size/.store in=\tocsubsubsectionpagefontsize@cx,
       toc subsubsection page font-family/.store in=\tocsubsubsectionpagefontfamily@cx,
       toc subsubsection page font-shape/.store in=\tocsubsubsectionpagefontshape@cx,
       toc subsubsection page font-weight/.store in=\tocsubsubsectionpagefonteight@cx,
       toc subsubsection page color/.store in=\tocsubsubsectionpagecolor@cx,
%      leaders
	   toc subsubsection dotsep/.store in = \tocsubsubsecdotsep@cx,
%      before and after page number
       toc subsubsection page before/.store in=\tocsubsubsectionpagebefore@cx,
       toc subsubsection page after/.store in=\tocsubsubsectionpageafter@cx,
}
%
\cxset{toc subsubsection beforeskip=\z@ \@plus.2\p@,
       toc subsubsection indent=0em,
       toc subsubsection font-family= sffamily,
       toc subsubsection font-weight = mdseries,
       toc subsubsection font-shape = upshape,
       toc subsubsection color= sweet,
       toc subsubsection font-size=,
       toc subsubsection case = none,
       toc subsubsection numwidth = 4.2em,
       toc subsubsection page font-size=,
       toc subsubsection page font-shape= upshape,  
       toc subsubsection page font-weight=, 
       toc subsubsection page font-family= sffamily,
       toc subsubsection page color = teal, 
       toc subsubsection page before =,% \{,
       toc subsubsection page after =,% \},
       toc subsubsection dotsep = 2.7,
}
%    \end{macrocode}
%
%    For convenience we define font setting commands for
%    the page number. We use \cs{setfont@cx}, which we have
%	defined earlier. Note this might be clobbered if 
%  hyperref is to provide a page link.
%    
%    \begin{macrocode}
\newcommand\tocsubsubsectionpagefont@cx{%
	\setfont@cx{\tocsubsubsectionpagefonteight@cx}%
       {\tocsubsubsectionpagefontfamily@cx}{\tocsubsubsectionpagefontsize@cx}%
       {\tocsubsubsectionpagefontshape@cx}\color{\tocsubsubsectionpagecolor@cx}
}%
%        
%
\renewcommand*{\l@subsubsection}[2]{%
  \ifnum \c@tocdepth >\z@
    \if@haschapter@cx
      \vskip \tocsubsubsectionbeforeskip@cx
    \else
      \addpenalty \@secpenalty
      \addvspace{\tocsubsubsectionbeforeskip@cx}%
    \fi
    {\leftskip \tocsubsubsectionindent@cx\relax
     \rightskip \@tocrmarg
     \parfillskip -\rightskip
     \parindent \tocsubsubsectionindent@cx\relax\@afterindenttrue
     \interlinepenalty\@M
     \leavevmode
     \@tempdima \tocsubsubsectionnumwidth@cx\relax
     \let\tocnumberbefore@cx \cftsecpresnum
     \let\@cftasnum \cftsecaftersnum
     \let\@cftasnumb \cftsecaftersnumb
     \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
%    \end{macrocode}
%
%	We are now ready to print out the toc subsection title,
%	we set the font information then typeset the title.
%	The dot leaders are typeset by calling the macro \cs{sectionfillnum}
%
%    \begin{macrocode}
     {%
      \setfont@cx{\tocsubsubsectionfontweight@cx}%
        {\tocsubsubsectionfontfamily@cx}{\tocsubsubsectionfontsize@cx}%
        {\tocsubsubsectionfontshape@cx}%
        \color{\tocsubsubsectioncolor@cx}%
      \tocsubsubsectioncase@cx#1}\nobreak
%    \end{macrocode}
%
%	We are now ready to typeset the leaders and the page number. 
%    We then pass \#2 to the \cs{tocsectionfillnum} which 
%	does the typesetting.
%    \begin{macrocode}
      \tocsubsubsectionfillnum{#2}}%
  \fi}
%    \end{macrocode}
% \end{macro}
%
%    These are the user commands to control the typesetting of Section entries.
%    They are initialised to give the standard appearance.
%    \begin{macrocode}
% hooks to |\numberline|
\renewcommand{\cftsecpresnum}{.}
\renewcommand{\cftsecaftersnum}{..}
\renewcommand{\cftsecaftersnumb}{...}
\newcommand{\tocsubsubsectionleader}{\normalfont\dotfill@cx{\tocsubsubsecdotsep@cx}}
%\newcommand{\cftsecdotsep}{\cftdotsep}
%    \end{macrocode}
%    We can now define the command \cmd{\tocsectionfillnum}. It will print the 
%	leaders if any and the page number \#1. TODO IS par necessary??
%    \begin{macrocode}
\newcommand{\tocsubsubsectionfillnum}[1]{%
  {\tocsubsubsectionleader}\nobreak
  \hb@xt@\@pnumwidth{\hfil\tocsubsubsectionpagefont@cx
   \tocsubsubsectionpagebefore@cx #1}%
   \tocsubsubsectionpageafter@cx\par}%
%    \end{macrocode}
%
% \section{Toc paragraph styling}
% \begin{macro}{\l@paragraph}
%  |\l@subsubsection{|\meta{title}|}{|\meta{page}|}| typesets the ToC entry for
% a |subsubsection| heading. It is a parameterised copy of the default |\l@subsubsection|
%	We start by defining all our parameters and variables.
%
%    \begin{macrocode}
\newif\if@lowercaseparagraph
\cxset{toc paragraph beforeskip/.store in=\tocparagraphbeforeskip@cx,
       toc paragraph indent/.store in=\tocparagraphindent@cx,
%      fonts for title &num
       toc paragraph font-size/.store in=\tocparagraphfontsize@cx, 
       toc paragraph font-family/.store in=\tocparagraphfontfamily@cx, 
       toc paragraph font-shape/.store in=\tocparagraphfontshape@cx, 
       toc paragraph font-weight/.store in=\tocparagraphfontweight@cx, 
       toc paragraph color/.store in=\tocparagraphcolor@cx,
toc paragraph case/.is choice,
       toc paragraph case/lower/.code=\def\tocparagraphcase@cx{\@lowercaseparagraphtrue
                             \if@lowercaseparagraph\expandafter\MakeTextLowercase\fi},
       toc paragraph case/upper/.code=\def\tocparagraphcase@cx{\@lowercaseparagraphfalse
                    \if@lowercaseparagraph\else\expandafter\MakeTextUppercase \fi},
       toc paragraph case/none/.code=\def\tocparagraphcase@cx{\@empty},
       toc paragraph numwidth/.store in=\tocparagraphnumwidth@cx,
%	  fonts etc for page number
       toc paragraph page font-size/.store in=\tocparagraphpagefontsize@cx,
       toc paragraph page font-family/.store in=\tocparagraphpagefontfamily@cx,
       toc paragraph page font-shape/.store in=\tocparagraphpagefontshape@cx,
       toc paragraph page font-weight/.store in=\tocparagraphpagefonteight@cx,
       toc paragraph page color/.store in=\tocparagraphpagecolor@cx,
%      leaders
	   toc paragraph dotsep/.store in = \tocparagraphdotsep@cx,
%      before and after page number
       toc paragraph page before/.store in=\tocparagraphpagebefore@cx,
       toc paragraph page after/.store in=\tocparagraphpageafter@cx,
}

\cxset{toc paragraph beforeskip=\z@ \@plus.2\p@,
       toc paragraph indent=0em,
       toc paragraph font-family= sffamily,
       toc paragraph font-weight = mdseries,
       toc paragraph font-shape = upshape,
       toc paragraph color= teal,
       toc paragraph font-size=,
       toc paragraph case = none,
       toc paragraph numwidth = 4.2em,
       toc paragraph page font-size=,
       toc paragraph page font-shape= upshape,  
       toc paragraph page font-weight=, 
       toc paragraph page font-family= sffamily,
       toc paragraph page color = teal, 
       toc paragraph page before =,% \{,
       toc paragraph page after =,% \},
       toc paragraph dotsep = 2.7,
}
%    \end{macrocode}
%
%	\subsection{Default paragraph style}
%   \subsubsection{With a subsubsection}
%
%
%	\paragraph{Test paragraph} This is a test.
%
%    For convenience we define font setting commands for
%    the page number. We use \cs{setfont@cx}, which we have
%	defined earlier.
%    
%    \begin{macrocode}
\newcommand\tocparagraphpagefont@cx{%
	\setfont@cx{\tocparagraphpagefonteight@cx}%
       {\tocparagraphpagefontfamily@cx}{\tocparagraphpagefontsize@cx}%
       {\tocparagraphpagefontshape@cx}\color{\tocparagraphpagecolor@cx}
}%
%        
%
\renewcommand*{\l@paragraph}[2]{%
  \ifnum \c@tocdepth >\z@
    \if@haschapter@cx
      \vskip \tocparagraphbeforeskip@cx
    \else
      \addpenalty \@secpenalty
      \addvspace{\tocparagraphbeforeskip@cx}%
    \fi
    {\leftskip \tocparagraphindent@cx\relax
     \rightskip \@tocrmarg
     \parfillskip -\rightskip
     \parindent \tocparagraphindent@cx\relax\@afterindenttrue
     \interlinepenalty\@M
     \leavevmode
     \@tempdima \tocparagraphnumwidth@cx\relax
     \let\tocnumberbefore@cx \cftsecpresnum
     \let\@cftasnum \cftsecaftersnum
     \let\@cftasnumb \cftsecaftersnumb
     \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
%    \end{macrocode}
%
%	We are now ready to print out the toc subsection title,
%	we set the font information then typeset the title.
%	The dot leaders are typeset by calling the macro \cs{sectionfillnum}
%
%    \begin{macrocode}
     {%
      \setfont@cx{\tocparagraphfontweight@cx}%
        {\tocparagraphfontfamily@cx}{\tocparagraphfontsize@cx}%
        {\tocparagraphfontshape@cx}%
        \color{\tocparagraphcolor@cx}%
      \tocparagraphcase@cx#1}\nobreak
%    \end{macrocode}
%	We are now ready to typeset the leaders and the page number. 
%    We then pass \#2 to the \cs{tocsectionfillnum} which 
%	does the typesetting.
%    \begin{macrocode}
      \tocparagraphfillnum{#2}}%
  \fi}
%    \end{macrocode}
% \end{macro}
%
%    These are the user commands to control the typesetting of Section entries.
%    They are initialised to give the standard appearance.
%    \begin{macrocode}
% hooks to |\numberline|
\renewcommand{\cftsecpresnum}{.}
\renewcommand{\cftsecaftersnum}{..}
\renewcommand{\cftsecaftersnumb}{...}
\newcommand{\tocparagraphleader}{\normalfont\dotfill@cx{\tocparagraphdotsep@cx}}
%\newcommand{\cftsecdotsep}{\cftdotsep}
%    \end{macrocode}
%    We can now define the command \cmd{\tocsectionfillnum}. It will print the 
%	leaders if any and the page number \#1. TODO IS par necessary??
%    \begin{macrocode}
\newcommand{\tocparagraphfillnum}[1]{%
  {\tocparagraphleader}\nobreak
  \hb@xt@\@pnumwidth{\hfil\tocparagraphpagefont@cx
   \tocparagraphpagebefore@cx #1}%
   \tocparagraphpageafter@cx\par}%
%    \end{macrocode}
%
% This brings us, dear reader to a long and arduous 
% path. Surely there must be an easier way. we have 
% added parameters in all sectioning commands, down to 
% paragraph level and we can even lower if you want
% for the legal guys and for construction specs.
%
% \chapter{Handling Footnotes and Endnotes}
%
% \precis{Handling of Footnotes and Endnotes.}
%
% Keeping up with the spirit of the package, we now
% have a go at footnotes and endnotes. This is a difficult
% topic, with many packages and a diverse way of handlingg
% things.
% TO DO STORE IN PREHOOKS
% AND POST HOOKS
%
%    \begin{macrocode}
\cxset{endnotes package/.code ={\gdef\endnotes@cs{#1}%
                   \RequirePackage{\endnotes@cs}%
                }%
}%
\cxset{endotes package/.default=pagenote}
\cxset{endnotes package=pagenote}%
%
%    \end{macrocode}
%
%   This also has a number of other packages loaded
%
%
% \chapter{Handling Images}
%
% \precis{Commands for laying out complex pages composed primarily of images.}
%
% \section{creating Image Page Styles}
%
% We now develop a method to produce variable environments
% that can include images in a page. We start using designs
% that incorporate two columns, as shown on 
% Page~\pageref{krollcode}.
%
% \begin{macro}{\miniwidthi}
% \begin{macro}{\miniwidthii}
% \begin{macro}{\sepmainhorizontal}
%    \begin{macrocode}
\global\newlength{\miniwidthi}
\global\newlength{\miniwidthii}
\global\newlength{\sepmainhorizontal}
\def\tinyskip{\vskip2pt}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%    \begin{macrocode}
\newenvironment{leftcolumn}{}{}
\newenvironment{rightcolumn}{}{}

\newlength\offsetfromright
\setlength\offsetfromright{0em}
%    \end{macrocode}
%
% \begin{macro}{\onelinecaption} The oneline caption
% is the description that goes underneath images that
% unlike figures, they are not described in the text.
%    \begin{macrocode}
\newcommand\onelinecaption[2][]{%
    \setlength\offsetfromright{0em}%
    \bgroup%
        \vskip0pt plus1pt minus1pt %
        \reset@font
        \sffamily
        \bfseries%
        \footnotesize%
        \hfill\hfill#2\hbox to \offsetfromright{}%
     \egroup%
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\onelineheader} This macro takes one parameter
%   and styles the main header.
%    \begin{macrocode}
\long\def\onelineheader#1{%
 \vspace{1.5\baselineskip}%
 {\sffamily{\bgroup\LARGE\bf \mbox{#1}\egroup}%
 \vspace{0.5\baselineskip}}%
}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\newcommand\byline[2][]{\small{\bfseries#1}#2}
 \newcommand\MainHeader[1]{{\leavevmode\par\centering \textrm{\fontsize{50pt}{65pt}\selectfont #1}\par\vspace{1cm}}}
 \newcommand\MainHeadera[1]{{\leavevmode\par\centering \textrm{\fontsize{30pt}{42pt}\selectfont #1}\par\vspace{1cm}}}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\aheader#1{\footnotesize \textbf{SELF-PORTRAIT}#1}
 \renewenvironment{leftcolumn}[1]{%
        \begin{minipage}[b]{\miniwidthi} #1}{\end{minipage} \hspace{\sepmainhorizontal}}%
    \renewenvironment{rightcolumn}[1]{%
        \begin{minipage}[b]{\miniwidthii} #1}{\end{minipage}}%
\def\starttemplate#1{%
  %% we now calculate some of the parameters
%% required
    \setlength\miniwidthi{0.3\textwidth}%
    \setlength\miniwidthii{0.67\textwidth}%
    \setlength\sepmainhorizontal{0.03\textwidth}%
   %
   %
%% Create environments for convenience
   %% Create right column environment
}
 \def\stoptemplate{}
%
%% Defining kroll style
  %% We need to find a way to define the templates
%% We will assume that images have been saved in a database
%% image@file
%% image@caption
%% this is a must to avoid long typing and keep the environments
%% short
\fboxsep=0pt
\fboxrule=1pt
\define@key{img}{width}[1cm]{\def\img@width{#1}}
\define@key{img}{height}{\def\img@height{#1}}
\define@key{img}{offsetx}{\def\img@offsetx{#1}}
\define@key{img}{offsety}{\def\img@offsety{#1}}
\define@key{img}{border}{\def\img@border{#1}}
\define@key{img}{padding}{\def\img@padding{#1}}
\define@key{img}{style}{\def\img@style{#1}}
\define@key{img}{bottommargin}{\def\img@bottommargin{#1}}
\define@key{img}{keepaspectratio}{\def\img@keepaspectratio{keepaspectratio}}
\define@key{imgpg}{pagestyle}{\def\imgpg@pagestyle{#1}}
%% Set defaults for all keys
\setkeys{img}{offsetx=1sp, offsety=0pt,width=3cm, keepaspectratio=keepaspectratio,
                      border=0pt, padding=0pt,bottommargin=0pt}
%% Create the command graphic
\newlength\tempal
%%
%% We create a new command to place images 
\newcommand\putimage[2][0pt]{%
%% Set the keys
\setkeys{img}{#1}%
\setlength\fboxrule\img@border%
\setlength\fboxsep\img@padding%
\ifdim\img@offsety=0pt% 
\else%
\vspace*{\img@offsety}%
\fi%
\hskip\img@offsetx%
\setlength{\tempal}{\img@width}
\fboxsep=1pt
\def\setcaption{\captionof{figure}{This is the caption for the figure\lorem}}%
\begin{minipage}{\textwidth}%
\fbox{\includegraphics[width=\textwidth]{#2}}%
\end{minipage}
}%\vspace*{\img@bottommargin}}%
%    \end{macrocode}
%
% 
% \clearpage
% 
% ^^A\newgeometry{top=0.5cm, bottom=1cm, left=1cm, right=1cm,
%   ^^A            marginparsep=0cm, marginpar=0pt}
% 
% \clearpage 
% \newpage
%
% \hrule
% \mbox{}
%    
% \label{krollcode}
% \renewenvironment{leftcolumn}{%
%   \minipage[b]{.3\textwidth}%
%  }{\endminipage}\hspace*{0cm}%
% 
% \starttemplate{kroll}%
% \vspace*{-.8cm}
% \hspace*{-1cm}\begin{leftcolumn}%
%   \MainHeader{Leon\\[15pt] Kroll}
%   \putimage[width=0.5\linewidth]{krollportrait.jpg}\par
%   \aheader{shows Kroll at 59. Says he. ``Painting is 
%             fascinating'' even when motif my own mug.}
% \end{leftcolumn}%
% \begin{minipage}[b]{0.8\textwidth}%
%   \includegraphics[width=\linewidth]{nudeback.jpg}
%       \onelinecaption{{\resizebox{\linewidth}{5.5pt}{\bfseries \hfill NUDE \hfill BACK \hfill SHOWS \hfill  A \hfill DANCER \hfill WHOSE \hfill BACK \hfill SAYS \hfill KROLL, \hfill HAS \hfill BEAUTIFUL \hfill PLANES }}\par}
%       \onelineheader{THE DEAN OF U.S. NUDE-PAINTERS}
%      \begin{multicols}{2}
%      \small
%      \lettrine{A}{t the} age of 63 when businessmen are thinking of retiring Leon Kroll according to Life Magazine was having the busiest time of his life, just doing what comes naturally.  \lorem\lorem
%      \end{multicols}
%   \end{minipage}
%\stoptemplate
% 
%
% \newpage
%
%\starttemplate{kroll}
%    \begin{minipage}[b]{0.3\textwidth}
%       \MainHeadera{Sandro Botticelli}
%       \includegraphics[width=1.0\linewidth]{botticelli-34.jpg}\par
%       \byline[BOTTICELLI ]{ painted hundreds of portraits. He is famous for his `Young Woman' series. Even in his larger compositions, he took extreme care of the details of women's faces.}
%   \end{minipage}\hspace*{0.2cm}
%   \begin{minipage}[b]{0.67\textwidth}
%       \putimage[width=\linewidth]{youngwoman.png}\par
%       \tinyskip
%       \onelinecaption{YOUNG WOMAN}\par
%       \onelineheader{SADRO BOTTICELLI'S PORTRAITS}
%      \begin{multicols}{2}
%      \small
%      \lettrine{A}{t the} age of 63 when businessmen are thinking of retiring leon Kroll according to Life Magazine was having the busiest time of his life, just doing what comes naturally.  \lorem\lorem
%      \end{multicols}
%    \end{minipage}
%\stoptemplate
%
%
% ^^A\newgeometry{top=1cm,left=1cm,right=1cm,bottom=1cm}
% \newtheorem{process}{Algorithm}
% \begin{process}
% Test exam
% \end{process}
%\clearpage
%
% \chapter{Posters}
% \makeatletter
%\def\HUGE{\@setfontsize\HUGE{65}{90}}
% \makeatother
%\raggedbottom
%\begin{minipage}{0.8\textwidth}
%\sffamily
%\centering
%\HUGE{\bf SYMPOSIUM}\\
%
%\LARGE{\textbf{\so{CAROLINA DYNAMICS GROUP}}}\\
%
%\Large{\textbf{\so{CLEMSON UNIVERSITY}}}\\
%%\large{\textbf{APRIL 5, 2012}}
%
%\bigskip
%
%\begin{minipage}[b]{0.6\textwidth}
%\normalsize
%\includegraphics[width=\linewidth]{lorenzattractor01.jpg}
%
%\textbf{PRESENTED BY THE CAROLINA DYNAMICAL \\ SYSTEMS GROUP}. Some more text here to fill the space. You need to get the reader to stop and read a bit more. Some more text here to fill the space. \par 
%\rule{0pt}{32pt}
%\end{minipage}\hspace{5pt}
%\begin{minipage}[b]{0.37\textwidth}
%\textbf{\large INVITED SPEAKERS}\par
%
%{\leavevmode \raggedright
%Dr Liang Foo\\
%Dr Berry Ling\\
%Dr Zezsko Petrovick \\
%Dr A Berchowitz\\
%\par{}
%}
%
%\medskip
%
%\large{\textbf{VENUE}}
%
%The symposium will take place at Clemson University.
%
%\medskip
%
%{\large\raggedright
%{\textbf{DYNAMICAL SYSTEMS}}
%\par
%}
%\normalsize
%\smallskip
%
%\lorem\lorem\lorem
%
%\medskip
%\textbf{\large ORGANIZERS}\par
%Martin Schmoll, Clemson University\\
%Predrag Punosevac, Augusta State \\
%University
%\medskip
%
%\textbf{\large CONTACT }\par
%
%Predrag Punosevac, Augusta State\\
%University
%\textcolor{blue}{email@mail.com}
%
%\rule{0pt}{78pt}
%\end{minipage}\par
% ^^A\vspace*{-0pt}
%
%\hbox to \textwidth{\HUGE{\bfseries\rmfamily APRIL 5 $\cdot$  2012}}
%\end{minipage}
%
%
% ^^A\newgeometry{top=2cm, bottom=3cm, left=3.5cm, right=3.5cm}

% \appendix
% \cxset{
%  chapter name = Appendix,
%  section numbering prefix = \thechapter.}
%  
% \chapter{MWE and Testing Macros}
%
% As far as LaTeX is concerned, there is nothing special in styling an appendix. It is either a chapter or a section with a different name. This name in order to allow internationalization is called \lstinline{\appendixname}.
%\bigskip
%
%\begin{tcolorbox}[width=\linewidth]
%\begin{lstlisting}
%\newcommand\appendix{\par
%  \setcounter{chapter}{0}%
%  \setcounter{section}{0}%
%  \gdef\@chapapp{\appendixname}(*@\footnote{The actual literal used for   \textbackslash{appendixname} is defined later on, so that you can customize the language}\label{appendixname}@*)
%  \gdef\thechapter{\@Alph\c@chapter}
%}
%\end{lstlisting}
%\end{tcolorbox}
%\medskip
%
%The code above is only a simplified version of the command. One might need to add more formatting information such as resetting equation numbers, tables and figures and any special floating environments that have their own numbering.
%
%\begin{tcolorbox}[width=\linewidth]
%\begin{lstlisting}
%\renewcommand\appendix{\par
%                \stepcounter{chapter}
%                \setcounter{chapter}{0}
%                \stepcounter{section}
%                \setcounter{section}{0}
%                \setcounter{equation}{0}
%                \setcounter{figure}{0}
%                \setcounter{table}{0}
%                \setcounter{footnote}{0}
%  \def\@chapapp{\appendixname}%
%  \renewcommand\thechapter{\@Alph\c@chapter}}
%\end{lstlisting}
%\end{tcolorbox}
%
%  
%

%\iffalse
%</package>
%\fi
%
% \section{Experimental Lua Code}
% \subsection{hiero lua module}
% 
% \iffalse
%<*hhiero1>
% \fi
%
%    \begin{macrocode}
-- returns a tex string
-- with a font command to print 
-- hieroglyphics

 local hiero 				= hiero or {}
 local inlinemath 		    = "$"

 local function getglyph(cmd, codepoint)
 local texstring = "\\Large\\"..cmd.." \\char".."\""..codepoint
  return texstring
end

function getglyphRL(cmd, codepoint)
  local texstring = "\\scalebox{-1}[1]{\\"..cmd.." \\char".."\""..codepoint.."}"
  return texstring
end

function printglyphRL(cmd, codepoint)
  tex.print(getglyphRL(cmd,codepoint))
end

local printhierochar = function (cmd, unicode, options)
	-- prints single hieroglyph 
   -- formatting commands are set via options
   -- @cmd = font family command

   local tx = "\\"..cmd.." \\char\""..unicode.."" 
   local direction, size, color
   direction = "LR"

   if options.size then size = options.size 
   else
     size = ""
   end
   if options.color then color = "\\color{"..options.color.."} " 
   else
     color = ""
   end

   local scale
   if options.scale then scale = options.scale 
   else
      scale = 1
   end

   local texcmds = size..color

   if options.direction then direction = options.direction end
   if direction == "RL" then
      tx = "{\\scalebox{"..-1*scale.."}["..scale.."]{"..texcmds.." "..tx.."}}"
   else
		tx = "{\\scalebox{"..1*scale.."}["..scale.."]{"..texcmds.." "..tx.."}}"
   end
   return tex.print(tx)
end



function stackrelf(a,b,c)
  return ""..inlinemath.."\\stackrel{\\mbox{"..a.."}}{\\mbox{"..b.."}}"..inlinemath..""
end

--[[
We define a local table to hold data for glyphs 
@t : table
--]]

local t = t or {}

--- returns a number of transformations and data
-- to the table holding codepoints for Gardiner lists
---

local function f(codepoint, gardiner, mnemonic,
                 description, determinant)

    	local theglyph=""  -- typeset glyph
    	local glyphslot
	 	if gardiner==nil or gardiner=="" then gardiner="empty" end
    	if mnemonic==nil or mnemonic=="" then mnemonic="\\phantom{z}" end
    	if description==nil then description="no description" end
 
-- stackengine 
   local hook = "\\color{blue}\\huge\\hiero"
   local stackrel = stackrelf(hook.."\\char\""..codepoint.." ","\\footnotesize 0x"..codepoint)
   stackrel = stackrelf(stackrel,"\\footnotesize"..tonumber(codepoint, 16))
   stackrel = stackrelf(stackrel,"\\footnotesize \\arial ".. gardiner)
   stackrel = stackrelf(stackrel,"\\footnotesize \\arial ".. mnemonic)
  
   theglyph = "\\scalebox{-1}[1]{\\hiero\\char\""..codepoint.."\\hskip0pt }"
   glyphslot = codepoint


return {  fullblock     = "\\scalebox{1}[1]{"..stackrel.."}", 
          unicode       = codepoint, --
          gardiner      = gardiner,
          mnemonic      = mnemonic,
          description   = description,
          theglyph      = theglyph,
          glyphslot     = codepoint}
end

-- The Gardiner classification table
-- and mnemonics as per MdC1988 
--   

t = {
   ["A1"    ]     =  f(13000,"A1","",
                         "kneeling man",
                          "Det.I (Masculine) (paeu)"),
   ["A2"    ] 		=  f(13001,"A2"),
   ["A3"    ] 		=  f(13002,"A3"),
   ["A4"    ] 		=  f(13003,"A4"),
   ["A5"    ]		  =  f(13004,"A5"), 
   ["A5a"   ] 		=  f(13005,"A5a"),
   ["A6"    ]		  =  f(13006,"A6"),
   ["A6a"   ]		  =  f(13007,"A6a"),
   ["A6b"   ]		  =  f(13008,"A6b"),
   ["A7"    ] 		=  f(13009,"A7"),
   ["A8"    ] 		=  f("1300A","A8"),
   ["A9"    ] 		=  f("1300B","A9"),
   ["A10"   ] 		=  f("1300C","A10"),
   ["A11"   ] 		=  f("1300D","A11"),
   ["A12"   ] 		=  f("1300E","A12","mSa"),
   ["A13"   ] 		=  f("1300F","A13"),
   ["A14"   ] 		=  f("13010","A14"),
   ["A14a"  ] 		=  f("13011","A14a"),
   ["A15"   ]		  =  f(13012,"A15","xr"),
   ["A16"   ] 		=  f(13013,"A16"),
   ["A17"   ] 		=  f(13014,"A17","Xrd"),
   ["A17a"  ] 		=  f(13015,"A17a"),
   ["A18"   ] 		=  f(13016,"A18"),
   ["A19"   ] 		=  f(13017,"A19"),
   ["A20"   ] 		=  f(13018,"A20"),
   ["A21"   ] 		=  f("13019","A21","sr"),
   ["A22"   ] 		=  f("1301A","A22"),
   ["A23"   ] 		=  f("1301B","A23"),
   ["A24"   ] 		=  f("1301C","A24"),
   ["A25"   ] 		=  f("1301D","A25"),
   ["A26"   ] 		=  f("1301E","A26"),
   ["A27"   ] 		=  f("1301F","A27"),
   ["A28"   ] 		=  f("13020","A28"),
   ["A29"   ] 		=  f("13021","A29"),
   ["A30"   ] 		=  f("13022","A30"),
   ["A31"   ] 		=  f("13023","A31"),
   ["A32"   ] 		=  f("13024","A32"),
   ["A32a"  ] 		=  f("13025","A32a"),
   ["A33"   ] 		=  f(13026,"A33","mniw"),
   ["A34"   ] 		=  f("13027","A34"),
   ["A35"   ] 		=  f("13028","A35"),
   ["A36"   ] 		=  f("13029","A36"),
   ["A37"   ] 		=  f("1302A","A37"),
   ["A38"   ] 		=  f("1302B","A38","qiz"),
   ["A39"   ] 		=  f("1302C","A39"),
   ["A40"   ] 		=  f("1302D","A40"),
   ["A40a"  ] 		=  f("1302E","A40a"),
   ["A41"   ] 		=  f("1302F","A41"),
   ["A42"   ] 		=  f("13030","A42"),
   ["A42a"  ] 		=  f("13031","A42a"),
   ["A43"   ] 		=  f("13032","A43"),
   ["A43a"  ] 		=  f("13033","A43a"),
   ["A44"   ] 		=  f("13034","A44"),
   ["A45"   ] 		=  f("13035","A45"),
   ["A45a"  ] 		=  f("13036","A45a"),
   ["A46"   ] 		=  f("13037","A46"),
   ["A47"   ] 		=  f(13038,"A47","iry"),
   ["A48"   ] 		=  f("13039","A48"),
   ["A49"   ] 		=  f("1303A","A49"),
   ["A50"   ] 		=  f("1303B","A50","Sps"),
   ["A51"   ] 		=  f("1303C","Spsi"),
   ["A52"   ] 		=  f("1303D","A52"),
   ["A53"   ] 		=  f("1303E","A53"),
   ["A54"   ] 		=  f("1303F","A54"),
   ["A55"   ] 		=  f("13040","A55"),
   ["A56"   ] 		=  f("13041","A56"),
   ["A57"   ] 		=  f("13042","A57"),
   ["A58"   ] 		=  f("13043","A58"),
   ["A59"   ]     =  f("13044","A59"),
   ["A60"   ] 		=  f("13045","A60"),
   ["A61"   ] 		=  f("13046","A61"),
   ["A62"   ]     =  f("13047","A62"),
   ["A63"   ] 		=  f("13048","A63"),
   ["A64"   ] 		=  f("13049","A64"),
   ["A65"   ] 		=  f("1304A","A65"),
   ["A66"   ] 		=  f("1304B","A66"),
   ["A67"   ] 		=  f("1304C","A67"),
   ["A68"   ] 		=  f("1304D","A68"),
   ["A69"   ] 		=  f("1304E","A69"),
   ["A70"   ] 		=  f("1304F","A70"),

-- Woman and her occupations
-- Unicode points 

	["B1"   ] 		= f("13050","B1"),
	["B2"   ] 		= f("13051","B2"),
	["B3"   ] 		= f(13052, "B3", "msi"),
	["B4"   ] 		= f("13053","B4"),
	["B5"   ] 		= f("13054","B5"),
	["B5a"  ]		= f("13055","B5a"),
	["B6"   ] 		= f("13056","B6"),
	["B7"   ] 		= f("13057","B7"),
	["B8"   ] 		= f("13058","B8"),
	["B9"   ] 		= f("13059","B9"),

-- C series

	["C1"   ] 		= f("1305A","C1"),
	["C2"   ] 		= f("1305B","C2"),
	["C2a"  ] 		= f("1305C","C2a"),
	["C2b"  ] 		= f("1305D","C2b"),
	["C2c"  ] 		= f("1305E","C2c"),
	["C3"   ] 		= f("1305F","DHwty"),
	["C4"   ] 		= f(13060,"Xnmw"),
	["C5"   ] 		= f(13061,"Xnmw"),
	["C6"   ] 		= f(13062,"inpw"),
	["C7"   ] 		= f(13063,"stX"),
	["C8"   ] 		= f(13064,"mnw"),
    ["C9"   ]  		= f(13065,"C9"),  
	["C10"  ] 		= f(13066,"mAat"),
	["C10a" ] 		= f(13067,"C10a"),
	["C11"  ] 		= f(13068,"HH"),
	["C12"  ] 		= f(13069,"C12"),
	["C13"  ] 		= f("1306A","C13"),
	["C14"  ] 		= f("1306B","C14"),
	["C15"  ] 		= f("1306C","C15"),
	["C16"  ] 		= f("1306D","C16"),
	["C17"  ] 		= f("1306E","C17"),
	["C18"  ] 		= f("1306F","C18"),
	["C19"  ] 		= f(13070,"C19"),
	["C20"  ] 		= f(13071,"C20"),
	["C21"  ] 		= f(13072,"C21"),
	["C22"  ] 		= f(13073,"C22"),
	["C23"  ] 		= f(13074,"C23"),
	["C24"  ] 		= f(13075,"C24"),

-- D series Parts of the Human Body
-- needs checking missed some

	["D1"   ]  		= f(13076,"tp"),
	["D2"   ]  		= f(13077,"Hr"),
	["D3"   ] 		= f(13078,"Sny"),
	["D4"   ]  		= f(13079,"ir"),
	["D5"   ]  		= f("1307A","D5"),
	["D6"   ]  		= f("1307B","D6"),
	["D7"   ]  		= f("1307C","D7"),
	["D8"   ] 		= f("1307D","D8"),
	["D8a"  ]		= f("1307E","D8a"),
	["D9"   ]  		= f("1307F","rmi"),
	["D10"  ] 		= f(13080,"wDAt"),
	["D11"  ] 		= f(13081,"D11"),
	["D12"  ] 		= f(13082,"D12"),
	["D13"  ] 		= f(13083,"D13"),
	["D14"  ] 		= f(13084,"D14"),
	["D15"  ] 		= f(13085,"D15"),
	["D16"  ] 		= f(13086,"D16"),
	["D17"  ] 		= f(13087,"D17"),
	["D18"  ] 		= f(13088,"D18"),
	["D19"  ] 		= f(13089,"fnD"),
	["D20"  ] 		= f("1308A","D20"),
	["D21"  ] 		= f("1308B","r"),
	["D22"  ] 		= f("1308C","D22"),
	["D23"  ] 		= f("1308D","D23"),
	["D24"  ] 		= f("1308E","spt"),
	["D25"  ] 		= f("1308F","spty"),
	["D26"  ] 		= f("13090","D26"),
	["D27"  ] 		= f(13091,"mnD"),

	["D27a" ] 		= f(13092,"kA"),
	["D28"  ] 		= f(13093,"D29"),
	["D29"  ] 		= f(13094,"D30"),
	["D30"  ] 		= f(13095,"D31"),
	["D31"  ] 		= f(13096,"D32"),
  
	["D31a" ] 		= f(13097,"D33"),
	["D32"  ] 		= f(13098,"aHA"),
	["D33"  ] 		= f(13099,"D34"),
	["D34"  ] 		= f("1309A","aHA"),
	["D34a" ] 		= f("1309B","a"),
	["D35"  ] 		= f("1309C","D35"),
	["D36"  ] 		= f("1309D","D36"),
	["D37"  ] 		= f("1309E","D37"),
	["D38"  ] 		= f("1309F","D38"),
	["D39"  ] 		= f("130A0","D39"),

	["D40" ] 		= f("130A1","Dsr"),
	["D41" ] 		= f("130A2","d"),
	["D42" ] 		= f("130A3","Dba"),
	["D43" ] 		= f("130A4","D43"),
	["D44" ] 		= f("130A5","D44"),
	["D45" ] 		= f("130A6","D45"),
	["D46" ] 		= f("130A7","D46"),
	["D46a"] 		= f("130A8","D46a"),
	["D47" ] 		= f("130A9","D47"),
	["D48" ] 		= f("130AA","D48"),
	["D48a"] 		= f("130AB","D48a"),
	["D49" ] 		= f("130AC","D49"),
	["D50" ] 		= f("130AD","D50"),
	["D50a"] 		= f("130AE","D50a"),
	["D50b"] 		= f("130AF","D50b"),
	["D50c"] 		= f("130B0","D50c"),
	["D50d"] 		= f("130B1","D50d"),
	["D50e"] 		= f("130B2","D50e"),
	["D50f"] 		= f("130B3","D50f"),
	["D50g"] 		= f("130B4","D50g"),
	["D50h"] 		= f("130B5","D50h"),
	["D50i"] 		= f("130B6","D50i"),
	["D51" ] 		= f("130B7","D51"),
	["D52" ] 		= f("130B8","mt"),
	["D52a"] 		= f("130B9","D52a"),
	["D53" ] 		= f("130BA","D53"),
	["D54" ] 		= f("130BB","D54"),
	["D54a"] 		= f("130BC","D54a"),
	["D55" ] 		= f("130BD","D55"),
	["D56" ] 		= f("130BE","rd"),
	["D57" ] 		= f("130BF","D57"),
	["D58" ] 		= f("130C0","b"),
	["D59" ] 		= f("130C1","ab"),
	["D60" ] 		= f("130C2","wab"),
	["D61" ] 		= f("130C3","sAH"),
	["D62" ] 		= f("130C4","D62"),
	["D63" ] 		= f("130C5","D63"),
	["D64" ] 		= f("130C6","D64"),
	["D65" ] 		= f("130C7","D65"),
	["D66" ] 		= f("130C8","D66"),
	["D67" ] 		= f("130C9","D67"),
	["D67a"] 		= f("130CA","D67a"),
	["D67b"] 		= f("130CB","D67b"),
	["D67c"] 		= f("130CC","D67c"),
	["D67d"] 		= f("130CD","D67d"),
	["D67e"] 		= f("130CE","D67e"),
	["D67f"] 		= f("130CF","D67f"),
	["D67g"] 		= f("130D0","D67g"),
	["D67h"] 		= f("130D1","D67h"),

-- E 

    ["E1"  ] 		= f("130D2","E1"),
    ["E2"  ] 		= f("130D3","E2"),
    ["E3"  ] 		= f("130D4","E3"),
    ["E4"  ] 		= f("130D5","E4"),
    ["E5"  ] 		= f("130D6","E5"),
    ["E6"  ]        = f("130D7","E6","zzmt"),
    ["E7"  ]        = f("130D8","E7"),
    ["E8"  ] 		= f("130D9","E8"),
    ["E8a" ] 	    = f("130DA","E8a"),
    ["E9"  ] 		= f("130DB","E9"),
    ["E9a" ] 		= f("130DC","E9a"),
    ["E10" ] 		= f("130DD","E10"),
	["E11" ] 		= f("130DE","E11"),
	["E12" ] 		= f("130DF","E12"),
	["E13" ] 		= f("130E0","E13"),
	["E14" ] 		= f("130E1","E14"),
	["E15" ] 		= f("130E2","E15"),
	["E16" ] 		= f("130E3","E16"),
	["E16a"] 		= f("130E4","E16a"),
	["E17" ] 		= f("130E5","E17","zAb"),
	["E17a"] 		= f("130E6","E17a",""),
	["E18" ] 		= f("130E7","E18",""),
	["E19" ] 		= f("130E8","E19",""),
	["E20" ] 		= f("130E9","E20"),
	["E20a"] 		= f("130EA","E20a"),
	["E21" ] 		= f("130EB","E21",""),
	["E22" ] 		= f("130EC","E22","mAi"),
	["E23" ] 		= f("130ED","E23","l"),
	["E24" ] 		= f("130EE","E24","Aby"),
	["E25" ] 		= f("130EF","E25",""),
	["E26" ] 		= f("130F0","E26",""),
	["E27" ] 		= f("130F1","E27",""),
	["E28" ] 		= f("130F2","E28",""),
	["E28a"] 		= f("130F3","E28a",""),
	["E29" ] 		= f("130F4","E29",""),
	["E30" ] 		= f("130F5","E30",""),
	["E31" ] 		= f("130F6","E31",""),
	["E32" ] 		= f("130F7","E32",""),
	["E33" ] 		= f("130F8","E33",""),
	["E34" ] 		= f("130F9","E34","wn"),
	["E34a"] 		= f("130FA","E34a",""),
	["E35" ] 		= f("0000","E35","unused"), -- see http://www.rostau.org.uk/aegyptian-l/archives/week617.txt
	["E36" ] 		= f("130FB","E36",""),
	["E37" ] 		= f("130FC","E37",""),
	["E38" ] 		= f("130FD","E38",""),

-- F series

	["F1"  ] 		= f("130FF","F1",""),
	["F2"  ] 		= f("13100","F2",""),
	["F3"  ] 		= f("13101","F3",""),
	["F4"  ] 		= f(13102,"F4","HAt"),
	["F5"  ] 		= f(13103,"F5","SsA"),
	["F6"  ] 		= f(13104,"F6",""),
	["F7"  ] 		= f(13105,"F7",""),
	["F8"  ] 		= f(13106,"F8",""),
	["F9"  ] 		= f(13107,"F9",""),
	["F10" ] 		= f(13108,"F10",""),
	["F11" ] 		=  f(13109,"F11",""),
	["F12" ] 		=  f("1310A","F12","wsr"),
	["F13" ] 		=  f("1310B","F13","wp"),
	["F13a"] 		=  f("1310C","F13a",""),
	["F14" ] 		=  f("1310D","F14",""),
	["F15" ] 		=  f("1310E","F15",""),
	["F16" ] 		=  f("1310F","F16","db"),
	["F17" ] 		=  f("13110","F17",""),
	["F18" ] 		= f(13111,"F18","Hw"),
	["F19" ] 		= f(13112,"F19",""),
	["F20" ] 		= f(13113,"F20","ns"),
	["F21" ] 		= f(13114,"F21","sDm"),
	["F21a"] 		= f(13115,"F21a",""),
	["F22" ] 		= f(13116,"F22","pH"),
	["F23" ]       = f(13117,"F23","xpS"),
	["F24" ]       = f(13118,"F24","xpS"),
	["F25" ]       = f(13119,"F25","wHm"),
	["F26" ]       = f("1311A","F26","Xn"),
	["F27" ]       = f("1311B","F27",""),
	["F28" ]       = f("1311C","F28",""),
	["F29" ]       = f("1311D","F29","sti"),
	["F30" ]       = f("1311E","F30","Sd"),
	["F31" ]       = f("1311F","F31","ms"),
    ["F31a"]       = f("13120","F31a",""),
    ["F32" ]       = f(13121,"F32","X"),
	["F33" ]       = f(13122,"F33","sd"),
	["F34" ]       = f(13123,"F34","ib"),
	["F35" ]       =  f(13124,"F35","nfr"),
	["F36" ]       = f(13125,"F36","zmA"),
	["F37" ]       = f(13126,"F37",""),
	["F37a"]       = f(13127,"F37a",""),
	["F38" ]       = f(13128,"F38",""),
	["F38a"]       = f(13129,"F38",""),
	["F39" ]       = f("1312A","F39","imAx"),
	["F40" ]       = f("1312B","F40","Aw"),
	["F41" ]       = f("1312C","F41","Aw"),
	["F42" ]       = f("1312D","F42","spr"),
	["F43" ]       = f("1312E","F43","Aw"),
	["F44" ]       = f("1312F","F44","isw"),
	["F45" ]       = f("13130","F45",""),
	["F45a"]       = f("13131","F45a",""),
	["F46" ]       = f(13132,"F46","pXr"),
	["F46a"]       = f(13133,"F46a",""),
	["F47" ]       = f(13134,"F47","qAb"),
	["F47a"]       = f(13135,"F47a",""),
	["F48" ]       = f(13136,"F48",""),
	["F49" ]       = f(13137,"F49",""),
	["F50" ]       = f(13138,"F50",""),
	["F51" ]       = f(13139,"F51",""),
	["F51a"]       = f("1313A","F51a",""),
	["F51b"]       = f("1313B","F51b",""),
	["F51c"]       = f("1313C","F51c",""),
	["F52" ]       = f("1313D","F52",""),
	["F53" ]       = f("1313E","F53",""),
	["G1"  ]       = f("1313F","G1","A"),
	["G2"  ]       = f("13140","G2","AA"),
	["G3"  ]       = f("13141","G3",""),
	["G4"  ]       = f(13142,"G4","tyw"),
	["G5"  ]       = f("13143","G5",""),
	["G6"  ]       = f("13144","G6",""),
	["G6a" ]       = f("13145","G6a",""),
	["G7"  ]       = f("13146","G7",""),
	["G7a" ]       = f("13147","G7a",""),
	["G7b" ]       = f("13148","G7b",""),
	["G8"  ]       = f("13149","G8",""),
	["G9"  ]       = f("1314A","G9",""),
	["G10" ]       = f("1314B","G10",""),
	["G11" ]       = f("1314C","G11",""),
	["G11a"]       = f("1314D","G11a",""),
	["G12" ]       = f("1314E","G12",""),
	["G13" ]       = f("1314F","G13",""),
	["G14" ]       = f("13150","G14","mwt"),
	["G15" ]       = f("13151","G15",""),
	["G16" ]       = f(13152,"G16","nbty"),
	["G17" ]       = f(13153,"G17","m"),
	["G18" ]       = f(13154,"G18","mm"),
	["G19" ]       = f("13155","G19","mwt"),
	["G20" ]       = f("13156","G20","mwt"),
	["G20a"]       = f("13157","G20a","mwt"),
	["G21" ]       = f(13158,"G21","nH"),
	["G22" ]       = f(13159,"G22","Db"),
	["G23" ]       = f("1315A","G23","rxyt"),
	["G24" ]       = f("1315B","G24",""),
	["G25" ]       = f("1315C","G25","Ax"),
	["G26" ]       = f("1315D","G26",""),
	["G26a"]       = f("1315E","G26a",""),
	["G27" ]       = f("1315F","G27","dSr"),	
	["G28" ]       = f("13160","G28","gm"),
	["G29" ]       = f("13161","G29","bA"),
	["G30" ]       = f(13162,"G30","baHi"),
	["G31" ]       = f(13163,"G31",""),
	["G32" ]       = f(13164,"G32","baHi"),
	["G33" ]       = f(13165,"G33",""),
	["G34" ]       = f(13166,"G34","baHi"),
	["G35" ]       = f(13167,"G35","aq"),
	["G36" ]       = f(13168,"G36","wr"),
	["G36a"]       = f(13169,"G36a",""),
	["G37" ]       = f("1316A","G37",""),
	["G37a"]       = f("1316B","G37a",""),
	["G38" ]       = f("1316C","G38","gb"),
	["G39" ]       = f("1316D","G39","zA"),
	["G40" ]       = f("1316E","G40","pA"),
	["G41" ]       = f("1316F","G41","xn"),
	["G42" ]       = f("13170","G42","wSA"),
	["G43" ]       = f(13171,"G43","w"),
	["G43a"]       = f(13172,"G43a","w"),
	["G44" ]       = f(13173,"G44","ww"),
	["G45" ]       = f(13174,"G45",""),
	["G45a"]       = f(13175,"G45a",""),
	["G46" ]       = f(13176,"G46","mAw"),
	["G47" ]       = f(13177,"G47","TA"),
	["G48" ]       = f(13178,"G48",""),
	["G49" ]       = f(13179,"G49",""),
	["G50" ]       = f("1317A","G50",""),
	["G51" ]       = f("1317B","G51",""),
	["G52" ]       = f("1317C","G52",""),
	["G53" ]       = f("1317D","G53",""),
	["G54" ]       = f("1317E","G54","snD"),
	["H1"  ]       = f("1317F","H1",""),
	["H2"  ]       = f(13180,"H2","pq"),
	["H3"  ]       = f(13181,"H3","pAq"),
	["H4"  ]       = f(13182,"H4","nr"),
	["H5"  ]       = f(13183,"H5",""),
	["H6"  ]       = f(13184,"H6","Sw"),


	["I1"  ]       = f(13188,"I1","aSA"),
	["I2"  ]       = f(13189,"I2","Styw"),
	["I3"  ]       = f("1318A","I3","mzH"),
	["I4"  ]       = f("1318B","I4","sbk"),
	["I5"  ]       = f("1318C","I5","sAq"),
	["I5a" ]       = f("1318D","I5a",""),

	["I6"  ]       = f("1318E","I6","km"),
	["I7"  ]       = f("1318F","I7",""),
	["I8"  ]       = f(13190,"I8","Hfn"),
	["I9"  ]       = f(13191,"I9","f"),
	["I9a" ]       = f(13192,"I9a",""),

	["I10" ]       = f(13193,"I10","D"),
	["I10a"]       = f(13194,"I10a",""),

	["I11" ]       = f(13195,"I11","DD"),
	["I11a"]       = f(13196,"I11a",""),

	["I12" ]       = f(13197,"I12",""),
	["I13" ]       = f(13198,"I13",""),
	["I14" ]       = f(13199,"I14",""),
	["I15" ]       = f("1319A","I15",""),




	["K1"  ]       = f("1319B","K1","in"),
	["K2"  ]       = f("1319C","K2","in"),
	["K3"  ]       = f("1319D","K3","ad"),
	["K4"  ]       = f("1319E","K4","XA"),
	["K5"  ]       = f("1319F","K5","bz"),
	["K6"  ]       = f("131A0","K6","nSmt"),
	["K7"  ]       = f("131A1","K7",""),
	["K8"  ]       = f("131A2","K8",""),

-- Insects

	["L1"  ]       = f("131A3","xpr"),
	["L2"  ]       = f("131A4","L2","bit"),
	["L2a" ]       = f("131A5","L2a","bit"),
	["L3"  ]       = f("131A6","L3","bit"),
	["L4"  ]       = f("131A7","L4",""),
	["L5"  ]       = f("131A8","L5",""),
	["L6"  ]       = f("131A9","L6",""),
	["L6a" ]       = f("131AA","L6a",""),
	["L7"  ]       = f("131AB","L7","srqt"),
	["L8"  ]       = f("131AC","L8",""),

-- 
	["M1"  ]       = f("131AD","M1","iAm"),
	["M1a" ]       = f("131AE","M1a",""),
	["M1b" ]       = f("131AF","M1b",""),
	["M2"  ]       = f("131B0","M2","Hn"),
	["M3"  ]       = f("131B1","M3","xt"),
	["M3a" ]       = f("131B2","M3a",""),
	["M4"  ]       = f("131B3","M4","rnp"),
	["M5"  ]       = f("131B4","M5",""),
	["M6"  ]       = f("131B5","M6","tr"),
	["M7"  ]       = f("131B6","M7",""),
	["M8"  ]       = f("131B7","M8","SA"),
	["M9"  ]       = f("131B8","M9","zSn"),
	["M10" ]       = f("131B9","M10",""),
	["M10a"]       = f("131BA","M10a",""),


	["M11" ]       = f("131BB","M11","wdn"),
	["M12" ]       = f("131BC","M12","xA"),
	["M12a"]       = f("131BD","M12a",""),
	["M12b"]       = f("131BE","M12b",""),
	["M12c"]       = f("131BF","M12c",""),

	["M12d"]       = f("131C0","M12d",""),
	["M12e"]       = f("131C1","M12e",""),
	["M12f"]       = f("131C2","M12f",""),
	["M12g"]       = f("131C3","M12g",""),
	["M12h"]       = f("131C4","M12h",""),


	["M13" ]       = f("131C5","M13","wAD"),
	["M14" ]       = f("131C6","M14",""),


	["M15" ] = f("131C7","M15",""),
	["M15a"] = f("131C8","M15a",""),
	["M16" ] = f("131C9","HA"),
	["M16a"] = f("131CA","M16a",""),


	["M17" ] = f("131CB","M17","i"),
	["M17a"] = f("131CC","M17a",""),

	["M18" ] = f("131CD","M18","ii"),
	["M19" ] = f("131CE","M19",""),

	["M20" ] = f("131CF","M20","sxt"),
	["M21" ] = f("131D0","M21","sm"),
	["M22" ] = f("131D1","M22",""),
	["M22a"] = f("131D2","M22a",""),

	["M23" ] = f("131D3","M23","sw"),
	["M24" ]  = f("131D4","M24","rsw"),
	["M24a"] = f("131D5","M24a","M24a",""),

	["M25" ] = f("131D6","M25",""),

	["M26" ] = f("131D7","M26","Sma"),
	["M27" ] = f("131D8","M27",""),
	["M28" ] = f("131D9","M28",""),
	["M28a"] = f("131DA","M28a",""),

	["M29" ] = f("131DB","M29","nDm"),
	["M30" ] = f("131DC","M30","bnr"),
	["M31" ] = f("131DD","M31",""),
	["M31a"] = f("131DE","M31a",""),

	["M32" ] = f("131EF","M32",""),
	["M33" ] = f("131E0","M33",""),
	["M33a"] = f("131E1","M33a",""),
    ["M33b"] = f("131E2","M33b",""),
	["M34" ] = f("131E3","M34","bdt"),
	["M35" ] = f("131E4","M35",""),

	["M36" ] = f("131E5","M36","Dr"),
	["M37" ] = f("131E6","M37",""),
	["M38" ] = f("131E7","M38",""),
	["M39" ] = f("131E8","M39",""),


	["M40" ] = f("131E9","M40","iz"),
	["M40a"] = f("131EA","M40a",""),
	["M41" ] = f("131EB","M41",""),
	["M42" ] = f("131EC","M42",""),
	["M43" ] = f("131ED","M43",""),
	["M44" ] = f("131EE","M44",""),
--
	["N1"  ] = f("131EF","N1","pt"),
	["N2"  ] = f("131F0","N2",""),
	["N3"  ] = f("131F1","N3",""),
	["N4"  ] = f("131F2","N4","iAdt,idt"),

	["N5"  ] = f("131F3","ra,zw"),
	["N6"  ] = f("131F4","N6",""),
	["N7"  ] = f("131F5","N7",""),

	["N8"  ] = f("131F6","N8","Hnmmt"),
	["N9"  ] = f("131F7","N9","pzD"),
	["N10" ] = f("131F8","N10",""),



	["N11" ] = f("131F9","N11","Abd,iaH"),
	["N12" ] = f("131FA","N12","iaH"),
	["N13" ] = f("131FB","N13",""),

	["N14" ] = f("131FC","N14","sbA.dwA"),

	["N15" ] = f("131FD","N15","dwAt"),
	["N16" ] = f("131FE","N16","tA"),
	["N17" ] = f("131FF","N17",""),

	["N18" ] = f("13200","N18","iw"),
	["N18a"] = f("13201","N18a",""),
	["N18b"] = f("13202","N18b",""),

	["N19" ] = f(13203,"N19",""),

	["N20" ] = f(13204,"wDb"),
	["N21" ] = f(13205,"N21",""),
	["N22" ] = f(13206,"N22",""),
	["N23" ] = f(13207,"N23",""),

	["N24" ] = f(13208,"spAt"),
	["N25" ] = f(13209,"xAst"),
	["N25a"] = f("1320A","N25a",""),

	["N26" ] = f("1320B","N26","Dw"),
	["N27" ] = f("1320C","N27","Axt"),
	["N28" ] = f("1320D","N28","xa"),
	["N29" ] = f("1320E","N29","q"),
	["N30" ] = f("1320F","N30","iAt"),

	["N31" ] = f("13210","N31",""),
	["N32" ] = f("13211","N32",""),
	["N33" ] = f("13212","N33",""),
	["N33a"] = f("13213","N33a",""),
	["N34" ] = f(13214,"N34",""),
	["N34a"] = f(13215,"N34a",""),


	["N35" ] = f(13216,"N35","n"),
	["N35a"] = f(13217,"N35a","mw"),
	["N36" ] = f(13218,"N36",""),

	["N37" ] = f("13219","N37","S"),
	["N38" ] = f("1321A","N38",""),
	["N39" ] = f("1321B","N39",""),
	["N40" ] = f("1321C","N40","Sm",""),
	["N41" ] = f("1321D","N41","id"),
	["N42" ] = f("1321E","N42",""),


	["O1"  ] = f("13250","O1","pr"),
	["O1a" ] = f("13251","O1a","pr"),
	["O2"  ] = f("13252","O2",""),
	["O3"  ] = f("13253","O3",""),
	["O4"  ] = f(13254,"O4","h"),
	["O5"  ] = f(13255,"O5","h"),
	["O5a" ] = f(13256,"O5a","h"),

	["O6"  ] = f(13257,"O6","Hwt"),
	["O6a" ] = f(13258,"O6a",""),
	["O6b" ] = f(13259,"O6b",""),
	["O6c" ] = f("1325A","O6c",""),
	["O6d" ] = f("1325B","O6d",""),
	["O6e" ] = f("1325C","O6e",""),
	["O6f" ] = f("1325D","O6f",""),

	["O7"  ] = f("1325E","O7","h"),
	["O8"  ] = f("1325F","O8","h"),
	["O9"  ] = f(13260,"O9",""),
	["O10" ] = f(13261,"O10",""),
	["O10a"] = f(13262,"O10a",""),
	["O10b"] = f(13262,"O10b",""),
	["O10c"] = f(13262,"O10c",""),

	["O11" ] = f(13265,"aH"),
	["O12" ] = f(13266,"O12",""),
	["O13" ] = f(13267,"O13",""),
	["O14" ] = f(13268,"O14",""),


	["O15" ] = f(13269,"wsxt"),
	["O16" ] = f("1326A","O16",""),
	["O17" ] = f("1326B","O17",""),

	["O18" ] = f("1326C","kAr"),
	["O19" ] = f("1326D",""),
	["O19a"] = f("1326E",""),

	["O20" ] = f("1326F","O20",""),
	["O20a"] = f("13270","O20a",""),
	["O21" ] = f("13271","O21",""),
	["O22" ] = f("13272","O22","zH"),
	["O23" ] = f("13273","O23",""),
	["O24" ] = f("13274","O24",""),
	["O24a"] = f("13275","O24a",""),

	["O25" ] = f(13276,"O25","txn"),
	["O25a"] = f("13277","O25a",""),

	["O26" ] = f(13278,"O26",""),
	["O27" ] = f(13279,"O27","txn"),
	["O28" ] = f("1327A","O28","iwn"),
	["O29" ] = f("1327B","O29","aA"),
	["O29a"] = f("1327C","O29a"),

	["O30" ] = f("1327D","O30","zxnt"),
	["O30a"] = f("1327E","O30a",""),

	["O31" ] = f("1327F","O31"),
	["O32" ] = f("13280","O32"),
	["O33" ] = f("13281","O33"),
	["O33a"] = f("13282","O33a"),

	["O34" ] = f(13283,"O34","z"),
	["O35" ] = f(13284,"O35","zb"),
	["O36" ] = f(13285,"O36","inb"),
	["O36a"] = f(13286,"O36a",""),
	["O36b"] = f(13287,"O36b",""),
	["O36c"] = f(13288,"O36c","inb"),
	["O36d"] = f(13289,"O36d",""),
	["O37" ] = f("1328A","O37",""),
	["O38" ] = f("1328B","O38",""),
	["O39" ] = f("1328C","O39",""),
	["O40" ] = f("1328D","O40",""),
	["O41" ] = f("1328E","O41",""),
	["O42" ] = f("1329F","O42","Szp"),
	["O43" ] = f(13290,"O43",""),
	["O44" ] = f(13291,"O44","Szp"),
	["O45" ] = f(13292,"O45","ipt"),
	["O46" ] = f(13293,"O46",""),
	["O47" ] = f(13294,"O47","nxn"),
	["O48" ] = f(13295,"O42","Szp"),
	["O49" ] = f(13296,"O49","niwt"),
	["O50" ] = f(13297,"O50","zp"),
	["O50a"] = f(13298,"O50a","Snwt"),
	["O50b"] = f(13299,"O50b",""),
	["O51" ] = f("1329A","O51",""),

	["P1"  ] = f("1329B","P1",""),
	["P1a" ] = f("1329C","P1a",""),
	["P2"  ] = f("1329D","P2",""),
	["P3"  ] = f("1329E","P3",""),
	["P3a" ] = f("1329F","P3a",""),
	["P4"  ] = f("132A0","P4","wHa"),
	["P5"  ] = f("132A1","P5","nfw"),
	["P6"  ] = f("132A2","P6","TAw"),
	["P7"  ] = f("132A3","P7","aHa"),
	["P8"  ] = f("132A4","P8","xrw"),
	["P9"  ] = f("132A5","P9",""),
	["P10" ] = f("132A6","P10",""),
	["P11" ] = f("132A7","P11",""),


	["Q1"  ] = f("132A8","Q1","st"),
	["Q2"  ] = f("132A9","Q2","wz"),
	["Q3"  ] = f("132AA","Q3","p"),
	["Q4"  ] = f("132AB","Q4",""),
	["Q5"  ] = f("132AC","Q5",""),
	["Q6"  ] = f("132AD","Q6","qrsw"),
	["Q7"  ] = f("132AE","Q7",""),


	["R1"  ] = f("132AF","R1","xAwt"),
	["R2"  ] = f("132B0","R2",""),
	["R2a" ] = f("132B1","R2a",""),
	["R3"  ] = f("132B2","R3",""),
	["R3a" ] = f("132B3","R3a",""),
	["R3b" ] = f("132B4","R3b",""),
	["R4"  ] = f("132B5","R4","Htp,kAp"),
	["R5"  ] = f("132B6","R5","kAp"),
	["R6"  ] = f("132B7","R6",""),
	["R7"  ] = f("132B8","R7","snTr"),
	["R8"  ] = f("132B9","R8","nTr"),
	["R9"  ] = f("132BA","R9","bd"),
	["R10" ] = f("132BB","R10",""),
	["R10a"] = f("132BC","R10a",""),
	["R11" ] = f("132BD","R11","dd,Dd"),
	["R12" ] = f("132BE","R12",""),
	["R13" ] = f("132BF","R13",""),
	["R14" ] = f("132C0","R14","imnt"),
	["R15" ] = f("132C1","R15","iAb"),
	["R16" ] = f("132C2","R16","wx"),
	["R16a"] = f("132C3","R16a",""),
	["R17" ] = f("132C4","R17",""),
	["R18" ] = f("132C5","R18",""),
	["R19" ] = f("132C6","R19",""),
	["R20" ] = f("132C7","R20",""),
	["R21" ] = f("132C8","R21",""),
	["R22" ] = f("132C9","R22","xm"),
	["R23" ] = f("132CA","R23",""),
	["R24" ] = f("132CB","R24",""),
	["R25" ] = f("132CC","R25",""),
	["R26" ] = f("132CD","R26",""),
	["R27" ] = f("132CE","R27",""),
	["R28" ] = f("132CF","R28",""),
	["R29" ] = f("132D0","R29",""),


	["S1"  ] = f("132D1","S1","HDt"),
	["S2"  ] = f("132D2","S2",""),
	["S2a" ] = f("132D3","S2a","HDt"),
	["S3"  ] = f("132D4","S3","dSrt,N"),
	["S4"  ] = f("132D5","S4","HDt"),
	["S5"  ] = f("132D6","S5","HDt"),
	["S6"  ] = f("132D7","S6","sxmty"),
	["S6a" ] = f("132D8","S6a",""),


	["S7"  ] = f("132D9","S7","xprS"),
	["S8"  ] = f("132DA","S8","Atf"),
	["S9"  ] = f("132DB","S9","Swty"),
	["S10" ] = f("132DC","S10","mDH"),
	["S11" ] = f("132DD","S11","wsx"),
	["S12" ] = f("132DE","S12","nbw"),
	["S13" ] = f("132DF","S13","sxmty"),
	["S14" ] = f("132E0","S14",""),
	["S14a"] = f("132E1","S14a",""),
	["S14b"] = f("132E2","S14b",""),
	["S15" ] = f("132E3","S15","tHn"),
	["S16" ] = f("132E4","S16",""),
	["S17" ] = f("132E5","S17",""),
	["S17a"] = f("132E6","S17a",""),


	["S18" ] = f("132E7","S18","mnit"),
	["S19" ] = f("132E8","S19","sDAw"),
	["S20" ] = f("132E9","S20","xtm"),
	["S21" ] = f("132EA","S21",""),

	["S22" ] = f("132EB","S22","sT"),
	["S23" ] = f("132EC","S23","dmD"),
	["S24" ] = f("132ED","S24","Tz"),
	["S25" ] = f("132EE","S25","Tz"),

	["S26" ] = f("132EF","S26","Sndyt"),
	["S26a"] = f("132F0","S26a",""),
	["S26b"] = f("132F1","S26b",""),

	["S27" ] = f("132F2","S27","mnxt"),
	["S28" ] = f("132F3","S28","Tz"),
	["S29" ] = f("132F4","S29","s"),

	["S30" ] = f("132F5","S30","sf"),
	["S31" ] = f("132F6","S31",""),


	["S32" ] = f("132F7","S32",""),
	["S33" ] = f("132F8","S33",""),
	["S34" ] = f("132F9","S34",""),


	["S35" ] = f("132FA","S35","Swt"),
	["S35a"] = f("132FB","S35a",""),
	["S36" ] = f("132FC","S36",""),
	["S37" ] = f("132FD","S37","xw"),
	["S38" ] = f("132FE","S38","HqA"),
	["S39" ] = f("132FF","S39","awt"),
	["S40" ] = f(13300,"S40","wAs"),
	["S41" ] = f(13301,"S41","Dam"),
	["S42" ] = f(13302,"S42","abA"),
	["S43" ] = f(13303,"S43","xrp"),
	["S44" ] = f(13304,"S44","sxm"),
	["S45" ] = f(13305,"S45","nxxw"),
	["S46" ] = f("13306","S46",""),

	["T1"  ] = f("13307","T1",""),
	["T2"  ] = f("13308","T2",""),
	["T3"  ] = f(13309,"T3","HD"),
	["T3a" ] = f("1330A","T3a",""),
	["T4"  ] = f("1330B","T4",""),
	["T5"  ] = f("1330C","T5",""),

	["T6"  ] = f("1330D","T6","HDD"),
	["T7"  ] = f("1330E","T7",""),
	["T7a" ] = f("1330F","T7a",""),
	["T8"  ] = f("13310","T8",""),
	["T8a" ] = f("13311","T8a",""),
	["T9"  ] = f(13312,"T9","pd"),

	["T10" ] = f(13314,"T10","pD"),
	["T11" ] = f(13315,"T11","zin,zwn,sXr"),
    ["T11a"] = f("13316","T11a",""),
	["T12" ] = f(13317,"T12","Ai,Ar,rwd,ewD"),
	["T13" ] = f(13318,"T13","rs"),

	["T14" ] = f(13319,"qmA"),
    ["T15" ] = f("1331A","T15",""),
    ["T16" ] = f("1331B","T16",""),
    ["T16a"] = f("1331C","T16a",""),
	["T17" ] = f("1331D","T17","wrrt"),
	["T18" ] = f("1331E","T18","Sms"),
	["T19" ] = f("1331F","T19","qs"),
    ["T20" ] = f("13320","T20",""),
    ["T21" ] = f("13321","T21",""),
	["T22" ] = f(13322,"T22","sn"),
    ["T23" ] = f("13323","T23",""),
	["T24" ] = f(13324,"T24","iH"),
	["T25" ] = f(13325,"T25","DbA"),
    ["T26" ] = f("13326","T26","T2",""),
    ["T27" ] = f("13327","T27",""),
	["T28" ] = f(13328,"T28","Xr"),
	["T29" ] = f(13329,"T29","nmt"),
    ["T30" ] = f("1333A","T30","T2",""),
	["T31" ] = f("1333B","T31","sSm"),
    ["T32" ] = f("1333C","T32",""),
    ["T32a"] = f("1333D","T32a",""),
    ["T33" ] = f("1333E","T33",""),
    ["T33a"] = f("1333F","T33a",""),
	["T34" ] = f("13330","nm"),
    ["T35" ] = f("13331","T35",""),
    ["T36" ] = f("13332","T36",""),

	["U1"  ] = f("13333","U1","mA"),
	["U2"  ] = f("13334","U2",""),
	["U3"  ] = f("13335","U3",""),
	["U4"  ] = f("13336","U4",""),
	["U5"  ] = f("13337","U5",""),


	["U6"  ] = f(13338,"mr"),
	["U6a" ] = f("13339","U6a",""),
	["U6b" ] = f("1333A","U6b",""),
	["U7"  ] = f("1333B","U7",""),
	["U8"  ] = f("1333C","U8",""),
	["U9"  ] = f("1333D","U9",""),

	["U10" ] = f("1333E","it"),

	["U11" ] = f("1333F","U11","HqAt"),
	["U12" ] = f("13340","U12",""),
	["U13" ] = f(13341,"U13","hb,Sna"),
	["U14" ] = f(13342,"U14",""),

	["U15" ] = f(13343,"U15","tm"),
	["U16" ] = f(13344,"U16","biA"),
	["U17" ] = f(13345,"U17","grg"),
	["U18" ] = f(13346,"U18",""),
	["U19" ] = f(13347,"U19",""),
	["U20" ] = f(13348,"U20",""),
	["U21" ] = f(13349,"U21","stp"),

	["U22" ] = f("1334A","U22","mnx"),

	["U23" ] = f("1334B","U23","Ab"),
	["U23a"] = f("1334C","U23a",""),
	["U24" ] = f("1334D","U24","Hmt"),
	["U25" ] = f("1334E","U25",""),

	["U26" ] = f("1334F","U26","wbA"),
	["U27" ] = f("13350","U27",""),
	["U28" ] = f("13351","U28","DA"),
	["U29" ] = f("13352","U29",""),
	["U29a"] = f("13353","U29a",""),
	["U30" ] = f("13354","U30",""),
	["U31" ] = f("13355","U31","rtH"),
	["U32" ] = f(13356,"U32","zmn"),
	["U32a"] = f("13357","U32a",""),
	["U33" ] = f("13358","U33","ti"),
	["U34" ] = f(13359,"U34","xsf"),
	["U35" ] = f("1335A","U35",""),
	["U36" ] = f("1335B","U36","Hm"),
	["U37" ] = f("1335C","U37",""),
	["U38" ] = f("1335D","U38","mxAt"),
	["U39" ] = f("1335E","U39",""),
	["U40" ] = f("1335F","U40",""),
	["U41" ] = f("13360","U41",""),
	["U42" ] 	= f("13361","U42",""),
---
-- Gardiner symbols V mapped to Unicode
-- and MdC
---   
	["V1"  ] 	= f(13362,"V1","100"),
	["V1a" ] 	= f(13363,"V1a",""),
    ["V1b" ] 	= f(13364,"V1b",""),
    ["V1c" ]	= f(13365,"V1c",""),
  	["V1d" ]	= f(13366,"V1d",""),
  	["V1e" ] 	= f(13367,"V1e",""),
  	["V1f" ] 	= f(13368,"V1f",""),
  	["V1g" ] 	= f(13369,"V1g",""),
  	["V1h" ] 	= f("1336A","V1h",""),
  	["V1i" ] 	= f("1336B","V1i",""),
	["V2"  ] 	= f("1336C","V2","sTA"),
	["V2a" ] 	= f("1336D","V2a",""),
	["V3"  ] 	= f("1336E","V3","sTAw"),
	["V4"  ] 	= f("1336F","V4","wA"),
	["V5"  ] 	= f("13370","V5","snT"),
	["V6"  ] 	= f(13371,"V6","Ss"),
	["V7"  ] 	= f(13372,"V7","Sn"),
	["V7a" ] 	= f(13373,"V7a",""),
	["V7b" ] 	= f(13374,"V7b",""),
	["V8"  ] 	= f(13375,"V8",""),
	["V9"  ] 	= f(13376,"V9",""),
	["V10" ] 	= f(13377,"V10",""),
	["V11" ] 	= f(13378,"V11",""),
	["V11a"] 	= f(13379,"V11a",""),
	["V11b"] 	= f("1337A","V11b",""),
	["V11c"] 	= f("1337B","V11c",""),
	["V12" ] 	= f("1337C","V12","arq"),	
	["V12a"] 	= f("1337D","V12a",""),
	["V12b"] 	= f("1337E","V12b",""),
	["V13" ] 	= f("1337F","V13","T"),
	["V14" ] 	= f("13380","V14","T"),
	["V15" ] 	= f("13381","V15","iTi"),
	["V16" ] 	= f("13382","V16",""),
	["V17" ] 	= f("13383","V17",""),
	["V18" ] 	= f("13384","V18",""),
	["V19" ] 	= f("13385","V19","mDt,XAr,TmA"),
	["V20" ] 	= f(13386,"V20","10,mD"),
	["V20a"] 	= f(13387,"V20a",""),
	["V20b"]	= f(13388,"V20b",""),
	["V20c"] 	= f(13389,"V20c",""),
	["V20d"] 	= f("1338A","V20d",""),
	["V20e"] 	= f("1338B","V20e",""),
	["V20f"] 	= f("1338C","V20f",""),
	["V20g"] 	= f("1338D","V20g",""),
	["V20h"] 	= f("1338E","V20h",""),
	["V20i"] 	= f("1338F","V20i",""),
	["V20j"] 	= f("13390","V20j",""),
	["V20k"] 	= f("13391","V20k",""),
	["V20l"] 	= f("13392","V20l",""),
	["V21" ] 	= f("13393","V21",""),
	["V22" ]    = f(13394,"V22","mH"),
	["V23" ]    = f("13395","V23",""),
	["V23a"]    = f("13396","V23a",""),
	["V24" ]    = f(13397,"V24","wD"),
	["V25" ]    = f("13398","V25",""),
	["V26" ]    = f(13399,"V26","aD"),
	["V27" ]    = f("1339A","V27",""),
	["V28" ]    = f("1339B","V28","H"),
	["V28a"]    = f("1339C","V28a",""),
	["V29" ]    = f("1339D","V29","wAH,sk"),
	["V29a"]    = f("1339E","V29a","H"),
	["V30" ]    = f("1339F","V30","nb"),
	["V30a"]    = f("133A0","V30a","b"),
	["V31" ]    = f("133A1","V31","k"),
	["V31a"]    = f("133A2","V31a",""),
	["V32" ]    = f("133A3","V32","msn"),
	["V33" ]    = f("133A4","V33","sSr"),
	["V33a"]    = f("133A5","V33a",""),
	["V34" ]    = f("133A6","V34",""),
	["V35" ]    = f("133A7","V35",""),
	["V36" ]    = f("133A8","V36",""),
	["V37" ]    = f("133A9","V37","idr"),
	["V37a"]    = f("133AA","V37a",""),
	["V38" ]    = f("133AB","V38",""),
	["V39" ]    = f("133AC","V39",""),
	["V40" ]    = f("133AD","V40",""),
	["V40a"]    = f("133AE","V40a",""),
---
--  Series W Gardiner set
---

	["W1"  ] 	= f("133AF","W1",""),
	["W2"  ] 	= f("133B0","W1","bAs"),
	["W3"  ] 	= f("133B1","W3","Hb"),
	["W3a" ] 	= f("133B2","W3a","Hb"),
	["W4"  ] 	= f("133B3","W4",""),
	["W5"  ] 	= f("133B4","W5","Hb"),
	["W6"  ] 	= f("133B5","W6",""),
	["W7"  ] 	= f("133B6","W7",""),
	["W8"  ] 	= f("133B7","W8",""),
	["W9"  ] 	= f("133B8","W9","Xnm"),
	["W9a" ] 	= f("133B9","W9a",""),

	["W10" ] 	= f("133BA","W10","iab"),
	["W10a"] 	= f("133BB","W10a",""),

	["W11" ] 	= f("133BC","W11","g,nzt"),
	["W12" ] 	= f("133BD","W12",""),
	["W13" ] 	= f("133BE","W13",""),

	["W14" ] 	= f("133BF","W14","Hz"),
	["W14a"] 	= f("133C0","W14a",""),
	["W15" ] 	= f("133C1","W15",""),
	["W16" ] 	= f("133C2","W16",""),
	["W17" ] 	= f("133C3","W17","xnt"),
	["W17a"] 	= f("133C4","W17a",""),
	["W18" ] 	= f("133C5","W18",""),
	["W18a"] 	= f("133C6","W18a",""),

	["W19" ] 	= f("133C7","W19","mi"),
	["W20" ] 	= f("133C8","W20",""),
	["W21" ] 	= f("133C9","W21",""),
	["W22" ] 	= f("133CA","W22","Hnqt"),
	["W23" ] 	= f("133CB","W23",""),
	["W24" ] 	= f("133CC","W24","nw"),
	["W24a"] 	= f("133CD","W24a","nw"),
	["W25" ] 	= f("133CE","W25","ini"),


	["X1"  ]    = f("133CF","X1","t"),
 	["X2"  ]    = f("133D0","X2",""),
 	["X3"  ]    = f("133D1","X3",""),
 	["X4"  ]    = f("133D2","X4",""),
 	["X4a" ]    = f("133D3","X4a",""),
 	["X4b" ]    = f("133D4","X4b",""),
 	["X5"  ]    = f("133D5","X5",""),
 	["X6"  ]    = f("133D6","X6",""),
 	["X6a" ]    = f("133D7","X6a",""),
 	["X7"  ]    = f("133D8","X7",""),
	["X8"  ]    = f("133D9","rdi,di"),
 	["X8a" ]    = f("133DA","X8a",""),


	["Y1"  ]    = f("133DB","Y1","mDAt"),
	["Y1a" ]    = f("133DC","Y1a",""),
 	["Y2"  ]    = f("133DD","Y2",""),

	["Y3"  ]    = f("133DE","mnhd,zS"),
 	["Y4"  ]    = f("133DF","Y4",""),
	["Y5"  ]    = f("133E0","Y5","mn"),
	["Y6"  ]    = f("133E1","Y6","ibA"),
 	["Y7"  ]    = f("133E2","Y7",""),
	["Y8"  ]    = f("133E3","Y8","zSSt"),

 	["Z1"  ]    = f("133E4","Z1",""),
 	["Z2"  ]    = f("133E5","Z2",""),
 	["Z2a" ]    = f("133E6","Z2a",""),
 	["Z2b" ]    = f("133E7","Z2b",""),
	["Z2c" ]    = f("133E8","Z2c",""),
	["Z2d" ]    = f("133E9","Z2d",""),


 	["Z3"  ]    = f("133EA","Z3",""),
 	["Z3a" ]    = f("133EB","Z3a",""),
	["Z3b" ]    = f("133EC","Z3b",""),
	["Z4"  ]    = f("133ED","Z4","y"),
	["Z5"  ]    = f("133EE","Z4a","y"),
 	["Z5"  ]    = f("133EF","Z5",""),
 	["Z5a" ]    = f("133F0","Z5a",""),
 	["Z6"  ]    = f("133F1","Z6",""),
	["Z7"  ]    = f("133F2","Z7","W"),
 	["Z8"  ]    = f("133F3","Z8",""),
 	["Z9"  ]    = f("133F4","Z9",""),
 	["Z10" ]    = f("133F5","Z10",""),


	["Z11" ]    = f("133F6","Z11","imi"),
 	["Z12" ]    = f("133F7","Z12",""),
 	["Z13" ]    = f("133F8","Z13",""),
 	["Z14" ]    = f("133F9","Z14",""),
 	["Z15" ]    = f("133FA","Z15",""),
 	["Z15a"]    = f("133FB","Z15a",""),
 	["Z15b"]    = f("133FC","Z15b",""),
 	["Z15c"]    = f("133FD","Z15c",""),
 	["Z15d"]    = f("133FE","Z15d",""),
 	["Z15e"]    = f("133FF","Z15e",""),
 	["Z15f"]    = f("13400","Z15f",""),
 	["Z15g"]    = f("13401","Z15g",""),
 	["Z15h"]    = f("13402","Z15h",""),
	["Z15i"]    = f("13403","Z15i",""),
 	["Z16" ]    = f("13404","Z16",""),
 	["Z16a"]    = f("13405","Z16a",""),
 	["Z16b"]    = f("13406","Z16b",""),
 	["Z16c"]    = f("13407","Z16c",""),
 	["Z16d"]    = f("13408","Z16d",""),
 	["Z16e"]    = f("13409","Z16e",""),
 	["Z16f"]    = f("1340A","Z16f",""),
 	["Z16g"] 	= f("1340B","Z16g",""),
 	["Z16h"] 	= f("1340C","Z16h",""),
	["Aa1" ] 	= f("1340D","Aa1","x"),
   	["Aa2" ]    = f("1340E","Aa2","x"),
	["Aa3" ]    = f("1340F","Aa3","x"),
	["Aa4" ]    = f("13410","Aa4","x"),
	["Aa5" ]    = f("13411","Aa5","Hp"),
	["Aa6" ]    = f("13412","Aa6","x"),
	["Aa7" ]    = f("13413","Aa7","x"),
	["Aa7a"]    = f("13414","Aa7a","x"),
	["Aa7b"]    = f("13415","Aa7b",""),
	["Aa8" ]    = f("13416","Aa8","qn"),
	["Aa9" ]    = f("13417","Aa9","x"),
	["Aa10"]    = f("13418","Aa10","x"),
	["Aa11"]    = f("13419","A11","mAa"),
	["Aa12"]    = f("1341A","Aa12",""),
	["Aa13"]    = f("1341B","Aa13","im,gs,M"),
	["Aa14"]    = f("1341C","Aa14",""),
	["Aa15"]    = f("1341D","Aa15",""),
	["Aa16"]    = f("1341E","Aa16",""),
	["Aa17"]    = f("1341F","Aa17","sA"),
	["Aa18"]    = f("13420","Aa18",""),
	["Aa19"]    = f("13421","Aa19",""),
	["Aa20"]    = f("13422","Aa20","apr"),
	["Aa21"]    = f("13423","Aa21","wDa"),
	["Aa22"]    = f("13424","Aa22",""),
	["Aa23"]    = f("13425","Aa23",""),
	["Aa24"]    = f("13426","Aa24",""),
	["Aa25"]    = f("13427","Aa25",""),
	["Aa26"]    = f("13428","Aa26",""),
	["Aa27"]    = f("13429","Aa27","nD"),
	["Aa28"]    = f("1342A","Aa28","qd"),
	["Aa29"]    = f("1342B","Aa29",""),
      ["Aa30"]    = f("1342C","Aa30","Xkr"),
	["Aa31"]    = f("1342D","Aa31",""),
	["Aa32"]    = f("1342E","Aa32","")
}

-- Gardiner categories
-- we store in a table for convenience

local cat = {}

cat["A"]   =   {[[A1-A2-A3-A4-A5-A5a-A6-A6a-A6b-A7-A8-
                 A9-A10-A11-A12-A13-A14-A14a-A15-A16-
                 A17-A17a-A18-A19-A20-A21-A22-A23-A24-
                 A25-A26-A27-A28-A29-A30-A31-A32-A32a-
                 A33-A34-A35-A36-A37-A38-A39-A40-A40a-
                 A41-A42-A42a-A43-A43a-A44-A45-A45a-A46-
                 A47-A49-A50-A51-A52-A53-A54-A55-A56-
                 A57-A58-A59-A60-A61-A62-A63-A64-A65-
                 A66-A67-A68-A69-A70!]],
                 heading = "Man and his occupations"}

cat["B"]   =   {[[B1-B2-B3-B4-B5-B5a-B6-B7-B8!]], 
                 heading = "Woman and her occupations"}

cat["C"]   =   {[[C1-C2-C2a-C2b-C2c-C3-C4-C5-C6-C7-C8-C9-
                 C10-C10a 
                 C11-C12-C13-C14-C15-C16 C17-C18-C19-C20-
                 C21-C22  C23 - C24!]], 
                 heading = "Anthropomorphic Deities"}

cat["D"]   =   {[[D1-D2-D3-D4 D5 D6 D7-D8-D9-D10-D11-D12-
                 D13-D14-D15-D16-D17-D18-D19-D20-D21-D22-
                 D23-D24-D25-D26-D27-D28-D29-D30-D31-D31a-
                 D32-D33-D34-D35-D36-D37-D38-D39-D40-D41-
                 D42-D43-D44-D45-D46-D47-D48-D49-D50-D50a-
                 D50b-D50c-D50d-D50e-D50f-D50g-D50h-D50i-
                 D51-D52-D53-D54-D55-D56-D57-D58-D59-D60-
                 D61-D62-D63-D64-D65-D66-D67-D67a-D67b-D67c-
                 D67d-D67e-D67f-D67g-D67h!]],
                 heading = "parts of the human body parts"}


cat["E"]   =   {[[E1-E2-E3-E4-E5-E6-E7-E8-E8a-E9-E9a-E10-
                 E11-E12-E13-E14-E15-E16-E16a-E17-E17a-
                 E18-E19-E20-E20a-E22-E23-E24-E25-E26-
                 E27-E28-E28a-E29-E30-E31-E32-E33-E34-
                 E34a-E35-E36-E37-E38!]],
                 heading = "Mammals"}

cat["F"]   =   {[[F1-F2-F3-F4-F5-F6-F7-F8-F9-F10-F11-F12-
                  F13-F14-F15-F16-F17-F18-F19-F20-F21-F21a-
                  F22-F23-F24-F25-F25-F26-F27-F28-F29-F30-
                  F31-F31a-F32-F33-F34-F35-F36-F37-F37a-F38-
                  F38a-F39-F40-F41-F42-F43-F44-F45-F45a-F46-
                  F46a-F47-F47a-F48-F49-F50-F51-F51a-F51b-
                  F51c-F52-F53!]],
                  heading = "Parts of Mammals"}

cat["G"]  =   {[[G1-G2-G3-G4-G5-G6-G6a-G7-G7a-G8-G9-G10-
                 G11-G11a-G12-G13-G14-G15-G16-G17-G18-
                 G19-G20-G20a-G21-G22-G23-G24-G25-G26-
                 G26a-G27-G28-G29-G30-G31-G32-G33-G34-
                 G35-G36-G36a-G37-G37a-G38-G39-G40-G42-
                 G43-G43a-G44-G45-G45a-G46-G47-G48-G49-
                 G50-G51-G52-G53-G54!]],
                 heading = "Birds"}

cat["H"] 	 =   {"H1-H2-H3-H4-H5-H6-H6!",
                   heading = "Parts of Birds"}

cat["I"] 	 =   {[[I1-I2-I3-I4-I5-I5a-I6-I7-I8-I9-
                   I9a-I10-I10a-I11-I12-I13-I14-I15]],
                   heading = "Amphibious Animals, Reptiles etc."}

cat["K"] 	 =   {"K1-K2-K3-K4-K5-K6-K7-K8",
                   heading = "Fish and parts of fish"}

cat["L"] 	 =   {"L1-L2-L2a-L3-L4-L5-L6-L6a-L7-L8",
                   heading = "Invertrbrates and lesser animals"}

cat["M"] 	 =   {[[M1-M1a-M1b-M2-M3-M3a-M4-M5-M6-M7-M8-
                 M9-M10-M10a-M11-M12-M12a-M12b-M12c-
                 M12d-M12e-M12f-M12g-M12h-M13-M14-M15-
                 M15a-M16-M16a-M17-M18-M19-M20-M21-M22-
                 M22a-M23-M24-M25-M26-M27-M28-M29-M30-
                 M31-M32-M33-M34-M35-M36-M37-M38-M39-
                 M40-M41-M42-M43-M44!]],
                 heading = "Trees and plants"}

cat["N"] =     {[[N1-N2-N3-N4-N5-N6-N7-N8-N9-N10-N11-N12-
                 N13-N14-N15-N16-N17-N18-N18a-N18b-N19-
				    N20-N21-N22-N23-N24-N25-N26-N27-N28-N29-
                 N30-N31-N32-N33-N34-N34a-N35-N36-N37-N38-
                 N39-N40-N41-N42!]], 
                 heading = "Sky, earth, water"}

cat["O"] = 	  {[[O1-O1a-O2-O3-O4-O5-O6-O6a-O6b-O6c-O6d-O6e-
                  O6f-O7-O8-O9-O10-O10a-O10b-O10c-O11-O12-
                  O13-O14-O15-O16-O17-O18-O19-O19a-O20-O20a-
                  O21-O22-O23-O24-O24a-O25-O25a-O26-O27-O28-
                  O29-O29a-O30-O30a-O31-O32-O33-O34-O35-O36-
                  O36a-O36b-O36c-O36d-O37-O38-O39-O40-O41-
                  O42-O43-O44-O45-O46-O47-O48-O49-O50-O50a-
                  O50b-O51-O51!]],
                  heading = "Buildings, parts of buildings"}

cat["P"]   =   {"P1-P1a-P2-P3-P3a-P4-P5-P6-P7-P8-P9-P10-P11",
                heading = "Ships and parts of ships"}

cat["Q"]   =   {"Q1-Q2-Q3-Q4-Q5-Q6-Q7!",
                heading = "Domestic and funerary furniture"}

cat["R"]	 =   {[[R1-R2-R2a-R3-R3a-R3b-R4-R5-R6-R7-R8-R9-
                  R10-R11-R12-R13-R14-R15-R16-R16a-R17-
                  R18-R19-R20-R21-R22-R23-R24-R25-R26-R27-
                  R28-R29]],
                  heading = "Temple furniture and sacred emblems"}

cat["S"]   =   {[[S1-S2-S2a-S3-S4-S5-S6-S6a-S7-S8-S9-
                 S10-S11-S12-S13-S14-S14a-S14b-S15-
                 S16-S17-S17a-S18-S19-S20-S21-S22-
                 S23-S24-S25-S26-S26a-S26b-S27-S28-
                 S29-S30-S31-S32-S33-S34-S35-S35a-S36-
                 S37-S38-S39-S40-S41-S42-S43-S44-S45-S46]],
                heading = "Crowns, dress, staves."}

cat["T"]   =   {[[T1-T2-T3-T3a-T4-T5-T6-T7-T8-T8a-T9-
                 T10-T11-T11a-T12-T13-T14-T15-T16-T16a-
                 T17-T18-T19-T20-T21-T22-T23-T24-T25-
                 T26-T27-T28-T29-T30-T31-T32-T32a-T33-
                 T33a-T34!]],
heading    =     "Warfare, hunting, butchery"}

cat["U"]   =    {[[U1-U2-U3-U4-U5-U6-U6a-U7-U8-U9-U10-
                  U11-U12-U13-U14-U15-U16-U17-U18-U19-
                  U20-U21-U22-U23-U24-U25-U26-U27-U28-
                  U29-U29a-U30-U31-U32-U32a-U33-U34-
                  U35-U36-U37-U38-U39-U40-U41-U42!]], 
                  heading = "Agriculture, crafts and Professions"}


cat["V"]   =    {[[V1-V1a-V1b-V1c-V1d-V1e-V1f-V1g-V1h-V1i-
                  V2-V2a-V3-V4-V5-V6-V7-V7a-V7b-V8-V9-
                  V10-V11-V11a-V11b-V11c-V12-V12a-V12b-
                  V13-V14-V15-V16-V17-V18-V19-V20-V20a-
                  V20b-V20c-V20d-V20e-V20f-V20g-V20h-V20i-
                  V20k-V20l-V21-V22-V23-V24-V25-V26-V27-
                  V28-V28a-V29-V29a-V30-V31-V32-V33-V34-
                  V35-V36-V37-V38-V39-V40-V40a!]], 
                  heading = "Rope, fiber, baskets, bags"}

cat["X"]   =    {[[X1-X2-X3-X4-X4a-X4b-X5-X6-X6a-X7-X8-X8a!]],
                   heading = "Loaves and cakes"}


cat["W"]   =     {[[W1-W2-W3-W4-W5-W6-W7-W8-W9-W9a-
                    W10-W10a-W11-W12-W13-W14-W14a-
                    W15-W16-W17-W17a-W18-W18a-W19-
                    W20-W21-W22-W23-W24-W24a-W25!]],
                    heading = "Vessels of stone and earthenware"}

cat["Y"]   =     {"Y1-Y1a-Y2-Y3-Y4-Y5-Y6-Y7!",
                   heading = "Writing, games, music"}

cat["Z"]   =     {[[Z1-Z2-Z2a-Z2b-Z3-Z4-Z5-Z5a-Z6-Z7-Z8-Z9-
                    Z10-Z11-Z12-Z13-Z14-Z15-Z15a-Z15b-Z15c-
                    Z15d-Z15e-Z15f-Z15g-Z15h-Z15i-Z16-Z16a-
                    Z16b-Z16c-Z16d-Z16f-Z16g-Z16h!]],
                    heading = [[Strokes, signs derived from 
                           hieratic, geometrical figures]],
                    label = "cat:z"}
 

cat["Aa"]  =     {[[Aa1-Aa2-Aa3-Aa4-Aa5-Aa6-Aa7-Aa7a-Aa8-Aa9-
						Aa10-Aa11-Aa12-Aa13-Aa14-Aa15-Aa16-Aa17-
						Aa18-Aa19-Aa20-Aa21-Aa22-Aa23-Aa24-Aa25-
						Aa26-Aa27-Aa28-Aa29-Aa30-Aa31-Aa32!]],
                   heading = "Unclassified"}

function cleanstring (s)
  s = string.gsub(s,"-", " ")
  s = string.gsub(s,"%t", " ") -- remove tabs?
  return string.gsub(s, "%s+", "-")
end

-- enable hyphenation of the input string
-- 
local function printstring (s)
  --s = string.gsub(s,"-", " ")
			  return string.gsub(s, "-", "\\hskip1sp-\\hskip1sp")
end

local function flushbuffer(a)
   if a~=nil then tex.print(a) end
   return ""
end

-- add the glyphs together
-- 
local function addtobuffer(str,bf)
    return bf..str
end

local function addtobottom(str)

end

local function placenext(str)

end

local function exclamationmark(str)
   
end



--[[
This is the main parser. 
@str = string formatted as per MoC 
@opt = 
The parsing occurs in two modes. Under normal mode
it parses strings and collects them in a buffer. If an
end of symbol is found, it flushes the buffer.

In the second mode it stacks the symbols.
--]]

local numberglyphs=0

local function parseMdC (str, opt) 

  local options = opt or {style=nil,
                    switch=nil,
                    echo=true,
                    strings=true,
                    heading="Man"}
  --if options.echo == true then 
        -- tex.print("{\\ttfamily "..printstring(str).." --}") end

  if options.heading == nil then options.heading="" end
  if options.style=="block" then  
     tex.print("\\par "..options.heading.."\\par ") 
  end

  local buff = ""
  local bufftop = "" 
  local buffbottom
  str = cleanstring(str)
  local counttop = 1
  local countbottom = 1
  local stackon = false
  local staron = false

-- parsing loop
  local i = 0
  while i < #str do
    local c = string.sub(str,i,i) 
    i = i + 1	
    if c=="-" then 
       if type(t[buff].theglyph~=nil) then
         tex.print(t[buff].fullblock)
       end
       buff =""
     elseif c == "!" then
       tex.print(t[buff].fullblock,"\\par")
     elseif c=="*" then -- just signs next to each other
       staron = true
       -- if star is completed in means previous symbol
       -- is completed stack next to each other
     elseif c==":" then
         stackon = true
         c="-" --ignore for the time being flush buffer
		   --buff = flushbuffer(t[buff].fullblock)
     else
       if type(t[buff]~=nil) then
            buff = addtobuffer(c,buff)
       else
            buff = buff..c
       end
  end
    -- end of line
  end

  numberglyphs = numberglyphs+i

end

-- tex.print(" ","Number of Glyphs",numberglyphs)





local printgardiner = function (t,options) 
   local ts = {} -- table to hold the cat keys
   local tmp = {}
   local hcmd = ""
   local str = ''
   for k,v in pairs (cat) do
      table.insert(ts,k)
   end
   table.sort(ts)

   for k,v in pairs (ts) do
      tmp = cat[ts[k]]
      if (options.headings and tmp.heading) then
          hcmd = "\\"..options.headings --TODO improve on interface 
          tex.print(hcmd.." {"..tmp.heading.."}")
      end 
      if tmp.label then tex.print("\\label{"..tmp.label.."}") end
      tex.print("\\par\\noindent",parseMdC(tmp[1],options))
   end
end

-- prints a single list from gardiner's series
local printgardinercat = function (series)
      local tmp = cat[series]
      return tex.print(parseMdC(tmp[1], options))
end
%    \end{macrocode} 
% We r
%    \begin{macrocode}
return {printhierochar = printhierochar,
        printgardiner  = printgardiner,
        printgardinercat   = printgardinercat,
        parseMdC = parseMdC}


%    \end{macrocode}
%
%
% \iffalse  
%</hhiero1>
% \fi
%
% \section{Test macros}
% We provide a series of MWE for testing purposes.
% \subsection{Letter MWE}
% \iffalse
%<*MWE-01>
% \fi
% \subsection{MWE-01, using \texttt{multicol} and \texttt{multitoc}}
%    \begin{macrocode}
% This is an example using the default |lstlisting|
% A environment.
\documentclass{article}
\usepackage{phd}
\begin{document}
  \begin{lstlisting}
    \def\test{This is a test.}  
  \end{lstlisting}
  \begin{teX}
    \def\test{This is a test.} 
  \end{teX}
  \begin{teXX}
    \def\test{This is a test.} 
  \end{teXX}
  
  \startnumberat{25}
  \begin{teX}
    \def\test{This is a test.} 
  \end{teX}
  
  \startnumberat{35}
  \begin{teX}
    % coloring comments is done in orange
    \def\test{This is a test.} 
  \end{teX}
\end{document}
%    \end{macrocode}
% \iffalse  
%</MWE-01>
% \fi
% \iffalse
%<*MWE-02>
% \fi
% \subsection{Listings MWE-02}
%    \begin{macrocode}
%% Example using |multitoc|
\documentclass{article}
\usepackage{phd}
\renewcommand{\multicolumntoc}{2}
\title{Typesetting the Table of Contents in Multiple Columns}
\author{Dr Y. Lazarides}
\begin{document}
\maketitle
\tableofcontents
\section{First section}
\begin{multicols}{3}
\lipsum[1-2]
\end{multicols}
\subsection{First subsection}
\subsection{Second subsection}
\subsection{Third subsection}
\subsection{Last subsection}
\section{Second section}
\subsection{First subsection}
\subsection{Second subsection}
\subsection{Third subsection}
\subsection{Last subsection}
\section{Last section}
\subsection{First subsection}
\subsection{Second subsection}
\subsection{Third subsection}
\subsection{Last subsection}
\end{document}
%    \end{macrocode}
% \iffalse  
%</MWE-02>
% \fi
% 
% \subsection{Listings MWE-03}
% 
% \iffalse
%<*MWE-03>
% \fi
%    \begin{macrocode}
%% example for using encoded commands such as guillemets. (If you need
%% shorthands you need to load babel.
%%
\documentclass{article}
\usepackage{phd}
\newcommand{\encone}[1]{{\fontencoding{T1}\selectfont#1}}
\begin{document}


\noindent\begin{tabular}{@{}*8l@{}}
\toprule
\Kt\guillemotleft  & \Kt\guilsinglleft & \Kt\quotedblbase & \Kt\textquotedbl \\
\Kt\guillemotright & \Kt\guilsinglright & \Kt\quotesinglbase \\
\bottomrule
\end{tabular}
\medskip

\lipsum[1]
\end{document}
%    \end{macrocode}
% \iffalse  
%</MWE-03>
% \fi
% 
% \iffalse
%<*test-tufte>
% \fi
%    \begin{macrocode}
\documentclass[justified]{tufte-book}
\usepackage{phd}
\begin{document}
\lipsum[1]
\sidenote{\RaggedRight \protect\lipsum[5]}
\centering
\begin{minipage}{5cm}
\RaggedRight
\lipsum[1]
\end{minipage}
\end{document}
%    \end{macrocode}
% \iffalse  
%</test-tufte>
% \fi
%
% \iffalse
%<*test-memoir>
% \fi
%    \begin{macrocode}
% clashes with options
\documentclass{memoir}
\usepackage{phd}
\begin{document}
\lipsum[1]
\end{document}
%    \end{macrocode}
% \iffalse  
%</test-memoir>
% \fi
%
%\iffalse
%<*test-scrartcl>
% \fi
%    \begin{macrocode}
% clashes with options
\documentclass{scrartcl}
\usepackage{phd}
\begin{document}
\lipsum[1]

\[ A = \upalpha r^2/4\]

% check for complaints
$$ A = a + b $$
\end{document}
%    \end{macrocode}
% \iffalse  
%</test-scrartcl>
% \fi
% 
%\iffalse
%<*test-hyphenation>
% \fi
%    \begin{macrocode}
\documentclass{scrartcl}
\usepackage{phd}
\begin{document}
%% Tests if hyphenation routines have been
%% found.
\hsize2cm
\noindent Florida appendix asynchronous
\end{document}
%    \end{macrocode}
% \iffalse  
%</test-hyphenation>
% \fi
%
%\iffalse
%<*test-algorithms>
% \fi
%    \begin{macrocode}
% clashes with options
\documentclass{article}
\usepackage{phd}
\begin{document}
\begin{algorithm}[H]
\SetAlgoLined
\KwData{this text}
\KwResult{how to write algorithm with \LaTeX2e }
initialization\;
\While{not at end of this document}{
read current\;
\eIf{understand}{
go to next section\;
current section becomes this one\;
}{
go back to the beginning of current section\;
}
}
\caption{How to write algorithms}
\end{algorithm}
\IncMargin{1em}
\begin{algorithm}
\SetKwData{Left}{left}\SetKwData{This}{this}\SetKwData{Up}{up}
\SetKwFunction{Union}{Union}\SetKwFunction{FindCompress}{FindCompress}
\SetKwInOut{Input}{input}\SetKwInOut{Output}{output}
\Input{A bitmap $Im$ of size $w\times l$}
\Output{A partition of the bitmap}
\BlankLine
\emph{special treatment of the first line}\;
\For{$i\leftarrow 2$ \KwTo $l$}{
\emph{special treatment of the first element of line $i$}\;
\For{$j\leftarrow 2$ \KwTo $w$}{\label{forins}
\Left$\leftarrow$ \FindCompress{$Im[i,j-1]$}\;
\Up$\leftarrow$ \FindCompress{$Im[i-1,]$}\;
\This$\leftarrow$ \FindCompress{$Im[i,j]$}\;
\If(\tcp*[h]{O(\Left,\This)==1}){\Left compatible with \This}{\label{lt}
\lIf{\Left $<$ \This}{\Union{\Left,\This}}\;
\lElse{\Union{\This,\Left}\;}
}
\If(\tcp*[f]{O(\Up,\This)==1}){\Up compatible with \This}{\label{ut}
\lIf{\Up $<$ \This}{\Union{\Up,\This}}\;
\tcp{\This is put under \Up to keep tree as flat as possible}\label{cmt}
\lElse{\Union{\This,\Up}}\tcp*[r]{\This linked to \Up}\label{lelse}
}
}
\lForEach{element $e$ of the line $i$}{\FindCompress{p}}
}
\caption{disjoint decomposition}\label{algo_disjdecomp}
\end{algorithm}\DecMargin{1em}
\end{document}
%    \end{macrocode}
% \iffalse  
%</test-algorithms>
% \fi
%
%<*test-spacing>
% Uses the package setspace to set the spacing of the
% document.
%    \begin{macrocode}
\documentclass{article}
\usepackage{setspace}
\usepackage{lipsum}
\onehalfspacing
\begin{document}
\title{merry setspace christmas test}
\author{who cares?}
\date{2011-12-19}
\maketitle

\section{dummy}
\lipsum[1]
\subsection{first offspring}
\lipsum[2]
\begin{tabular}{llr}
  a & silly & story about latex \\
  silly & a & story
\end{tabular}
\end{document}
%    \end{macrocode}
%</test-spacing>
%
% \iffalse
%<*settings>
% \fi
%% Some settings
%    \begin{macrocode}
\cxset{nag keys = {l2tabu,%
                   orthodox}}
\cxset{onlyamsmath keys = {warning}}
%    \end{macrocode}
% \iffalse
%</settings>
% \fi
%
% ^^A\PrintIndex
%
% \Finale

% \newpage
%
% \section{List of Packages and Usage Statistics}
%
% Table~\ref{tbl:listofpaks} provides a list of the packages loaded as default by |phd|.
% The column describing usage statistics
% is from \url{http://arxmliv.kwarc.info/package_usage.php}. It is by no means an
% indication of overall popularity, but I have used these statistics as an
% guide in selecting what packages to include here in order to at least cover
% the scientific side well.
%
% \input{packages-table}
% \label{tbl:listofpaks}
%
% \bibliography{phd}
% ^^A \PrintIndex
\endinput




%  \input{./sections/acronyms}
%  \input{./sections/boxesandglue}


% \end{document}

%  \input{./sections/introduction}
%  \input{./sections/languages}
%  \input{./languages/middle-eastern-scripts}
%  \input{./languages/modern-scripts}
%  \input{./languages/south-east-asian-scripts}
%  \input{south-asian-scripts}

%  \input{./sections/symbols}


%  \part{Graphics}
%  \input{./sections/graphics}
%  \input{./sections/wrapfig-02}
%  \input{./sections/pericula}
%  \input{./sections/subfigure}
%  \input{./sections/long-figures}
%  \input{./sections/sideways}
%  \input{./sections/twowomenreverse}
%  \input{./sections/twowomen}
%  \input{./sections/kroll}
%  \input{./sections/bache}
%  \input{./sections/elgreco.tex}
%  \input{./sections/captions}
%  \input{./sections/captionsandothers}
%  \input{./sections/rulesandleaders}

%  \input{./sections/macros}

%  ^^A\input{./languages/east-asian-scripts}


% \end{document}



%  \input{./languages/languages-list}

%  \input{./sections/document-divisions}

%  \part{Visualizations and Plotting}
%  \input{./sections/pictureenvironment}
%  \input{./sections/tikz}
% 

%  \end{document}

% ^^A \input{./sections/numbers}

% ^^A \input{./sections/generalsettings}

%  \part{The Structural Elements of Documents}
%
%\end{document}




%\end{document}
%  \input{./sections/maths}
% 



%

%

%  \input{./sections/lowerlevelheadings}


% 
%
%  \part{THE TYPESETTING ENGINES}
% 

%  \input{./sections/charting01}
%
%  %  \part{Programming Topics}
%  \input{./sections/grouping}

%  \input{./sections/expandafter} 
%  \input{./sections/futurelet}
%  \input{./sections/datastructures}

%  \input{./sections/io}
%  \input{./sections/classes}
%  \input{./sections/keyvalues}
%  \input{./sections/pgfmanual-en-pgfkeys}
%  \input{./sections/colors}
%  \input{./sections/dates}
%  \input{./sections/codingstyle}
%  \input{./sections/OTR}


%  \part{The LaTeX2e Kernel}
%
%  \input{./sections/latexkernel}
%  \input{./sections/kernel-ltspace}
%  \input{./sections/kernel-ltfloat.tex} 
%  \input{./sections/kernel-ltlists}
%  \input{./sections/kernel-N-ltlength.tex}
%
%	\part{The Standard Classes}
%  \input{./sections/book.cls.tex}
%  \input{./sections/pages}
%  \input{./sections/bibliographies}
% \fi

%  
%\iffalse
%   \includepdf[pages=1]{grid.pdf}
%\fi
%  \iffalse
%  \@specialfalse
%  \input{./styles/style01}
%  \input{./styles/style02}
%  \input{./styles/style04}
%  \input{./styles/style05}
%  \input{./styles/style06}
%  \input{./styles/style07}
%  \input{./styles/style08}
%  \input{./styles/style09}
%  \input{./styles/style10}
%  \input{./styles/style11}
%  \input{./styles/style12}^^A
%  \input{./styles/style15}^^A
%  \input{./styles/style18}^^A
%  \input{./styles/style19}^^A
%   \input{./styles/style20}^^A
%  \input{./styles/style20a}^^A
%  \input{./styles/style21}
%  \input{./styles/style22}
%  \input{./styles/style23}
%  \input{./styles/style24}^^A
%   \input{./styles/style25}^^A
%   \input{./styles/style26}^^A
%   \input{./styles/style27}^^A
%   \input{./styles/style28}^^A
%   \input{./styles/style29}^^A
%   \input{./styles/style30}^^A
%   \input{./styles/style31}^^A
%   \input{./styles/style32}^^A
%   \input{./styles/style33}^^A
%   \input{./styles/style34}^^A
%   \input{./styles/style35}^^A
%   \input{./styles/style36}^^A
%   \input{./styles/style37}^^A
%   \input{./styles/style38}^^A
%   \input{./styles/style39}^^A
%   \input{./styles/versochapter}^^A
%   ^^A\input{./styles/style41}^^A
%   \input{./styles/style42}^^A
%   \input{./styles/style43}^^A
%   \input{./styles/style50}
%  \input{./styles/style52}
%  \input{./styles/style54}
%  
%  \fi

